
m2s010_som_sb_MSS_CM3_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vector_table 00000190  00000000  00000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .boot_code    00000330  00000190  00000190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000031b0  000004c0  000004c0  000084c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000020  20000000  00003670  00010000  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000090  20000020  00003690  00010020  2**4
                  ALLOC
  5 .heap         0000ef50  200000b0  00003690  000100b0  2**4
                  ALLOC
  6 .stack        00001000  2000f000  00003690  00017000  2**4
                  ALLOC
  7 .comment      000000d7  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  000100f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000776  00000000  00000000  000103af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004e6e  00000000  00000000  00010b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000009ab  00000000  00000000  00015993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000013a9  00000000  00000000  0001633e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000006e8  00000000  00000000  000176e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002118  00000000  00000000  00017dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001150  00000000  00000000  00019ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .ARM.attributes 00000025  00000000  00000000  0001b038  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 00000e18  00000000  00000000  0001b05d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .vector_table:

00000000 <__vector_table_start>:
 * Close a file.
 */
int _close(int file)
{
    return -1;
}
   0:	20010000 	.word	0x20010000
    uint8_t line_config,
    mss_uart_rzi_polarity_t rxpol,
    mss_uart_rzi_polarity_t txpol,
    mss_uart_rzi_pulsewidth_t pw
)
{
   4:	00000191 	.word	0x00000191

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);

     /* Enable LIN mode */
    set_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
   8:	0000037f 	.word	0x0000037f
)
{
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(MSS_UART_INVALID_IRQ > irq_mask);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) && 
   c:	00000381 	.word	0x00000381
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
  10:	00000383 	.word	0x00000383
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ((uint8_t *)0));
    ASSERT(tx_size > 0u);

    if((tx_size > 0u) && ( pbuff != ((uint8_t *)0)) &&
  14:	00000385 	.word	0x00000385
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        if((TX_COMPLETE == this_uart->tx_buff_size) &&
  18:	00000387 	.word	0x00000387
	...
  2c:	00000389 	.word	0x00000389
         * bit 5 - NACK / ERR signal interrupt
         * bit 6 - PID parity error interrupt 
         * bit 7 - LIN break detection interrupt
         * bit 8 - LIN Sync detection interrupt
         */
        this_uart->hw_reg->IEM |= (uint8_t)(~(((uint32_t)irq_mask & ~((uint32_t)IIRF_MASK)) >> 8u));
  30:	0000038b 	.word	0x0000038b
        this_uart->tx_buffer = pbuff;
        this_uart->tx_buff_size = tx_size;
        this_uart->tx_idx = (uint16_t)0;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
  34:	00000000 	.word	0x00000000

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  38:	0000038d 	.word	0x0000038d
         * bit 8 - LIN Sync detection interrupt
         */
        this_uart->hw_reg->IEM |= (uint8_t)(~(((uint32_t)irq_mask & ~((uint32_t)IIRF_MASK)) >> 8u));

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
  3c:	0000038f 	.word	0x0000038f
  40:	00000391 	.word	0x00000391

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;

        /* enables TX interrupt */
        set_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
  44:	00000393 	.word	0x00000393
  48:	00000395 	.word	0x00000395
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER |= (uint8_t)irq_mask & IIRF_MASK;
  4c:	00000397 	.word	0x00000397
            /* Fill up FIFO */
            for(size_sent = 0u; size_sent < fill_size; ++size_sent)
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
  50:	00000399 	.word	0x00000399
  54:	0000039b 	.word	0x0000039b
         * bit 5 - NACK / ERR signal interrupt
         * bit 6 - PID parity error interrupt 
         * bit 7 - LIN break detection interrupt
         * bit 8 - LIN Sync detection interrupt
         */
        this_uart->hw_reg->IEM |= (uint8_t)(((uint32_t)irq_mask & ~((uint32_t)IIRF_MASK)) >> 4u);
  58:	0000039d 	.word	0x0000039d
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
  5c:	0000039f 	.word	0x0000039f
  60:	000003a1 	.word	0x000003a1

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;
  64:	000003a3 	.word	0x000003a3
    if((tx_size > 0u) && ( pbuff != ((uint8_t *)0)) &&
      ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
        this_uart->tx_buff_size = tx_size;
  68:	0000252d 	.word	0x0000252d
  6c:	0000250d 	.word	0x0000250d
  70:	000003a9 	.word	0x000003a9

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;
  74:	000003ab 	.word	0x000003ab
  78:	000003ad 	.word	0x000003ad
      ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
        this_uart->tx_buff_size = tx_size;
        this_uart->tx_idx = (uint16_t)0;
  7c:	000003af 	.word	0x000003af

    if((tx_size > 0u) && ( pbuff != ((uint8_t *)0)) &&
      ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
  80:	000003b1 	.word	0x000003b1
            /* Fill up FIFO */
            for(size_sent = 0u; size_sent < fill_size; ++size_sent)
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
  84:	000003b3 	.word	0x000003b3
  88:	000003b5 	.word	0x000003b5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  8c:	000003b7 	.word	0x000003b7
  90:	000003b9 	.word	0x000003b9
  94:	000003bb 	.word	0x000003bb
  98:	000003bd 	.word	0x000003bd
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
  9c:	000003bf 	.word	0x000003bf
  a0:	000003c1 	.word	0x000003c1
  a4:	000003c3 	.word	0x000003c3
  a8:	000003c5 	.word	0x000003c5
  ac:	000003c7 	.word	0x000003c7
  b0:	000003c9 	.word	0x000003c9
                                      
    ((pw == MSS_UART_3_BY_16) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITP) : 
                                      set_bit_reg8(&this_uart->hw_reg->MM1,EITP));
    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
}
  b4:	000003cb 	.word	0x000003cb
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
  b8:	000003cd 	.word	0x000003cd
  bc:	000003cf 	.word	0x000003cf
  c0:	000003d1 	.word	0x000003d1
  c4:	000003d3 	.word	0x000003d3
  c8:	000003d5 	.word	0x000003d5
  cc:	000003d7 	.word	0x000003d7
                                      set_bit_reg8(&this_uart->hw_reg->MM1,EIRX));
                                      
    ((txpol == MSS_UART_ACTIVE_LOW) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITX) : 
                                      set_bit_reg8(&this_uart->hw_reg->MM1,EITX));
                                      
    ((pw == MSS_UART_3_BY_16) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITP) : 
  d0:	000003d9 	.word	0x000003d9
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
  d4:	000003db 	.word	0x000003db
  d8:	000003dd 	.word	0x000003dd
  dc:	000003df 	.word	0x000003df
  e0:	000003e1 	.word	0x000003e1
  e4:	000003e3 	.word	0x000003e3
  e8:	000003e5 	.word	0x000003e5
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
  ec:	000003e7 	.word	0x000003e7
  f0:	000003e9 	.word	0x000003e9
  f4:	000003eb 	.word	0x000003eb
  f8:	000003ed 	.word	0x000003ed
  fc:	000003ef 	.word	0x000003ef
 100:	000003f1 	.word	0x000003f1
 104:	000003f3 	.word	0x000003f3
 108:	000003f5 	.word	0x000003f5
 10c:	000003f7 	.word	0x000003f7
 110:	000003f9 	.word	0x000003f9
 114:	000003fb 	.word	0x000003fb
 118:	000003fd 	.word	0x000003fd
 11c:	000003ff 	.word	0x000003ff
 120:	00000401 	.word	0x00000401
 124:	00000403 	.word	0x00000403
 128:	00000405 	.word	0x00000405
 12c:	00000407 	.word	0x00000407
 130:	00000409 	.word	0x00000409
 134:	0000040b 	.word	0x0000040b
 138:	0000040d 	.word	0x0000040d
 13c:	0000040f 	.word	0x0000040f
 140:	00000411 	.word	0x00000411
 144:	00000413 	.word	0x00000413
 148:	00000415 	.word	0x00000415
 14c:	00000417 	.word	0x00000417
 150:	00000419 	.word	0x00000419
 154:	0000041b 	.word	0x0000041b
 158:	0000041d 	.word	0x0000041d
 15c:	0000041f 	.word	0x0000041f
 160:	00000421 	.word	0x00000421
 164:	00000423 	.word	0x00000423
 168:	00000425 	.word	0x00000425
 16c:	00000427 	.word	0x00000427
 170:	00000429 	.word	0x00000429
 174:	0000042b 	.word	0x0000042b
 178:	0000042d 	.word	0x0000042d
 17c:	0000042f 	.word	0x0000042f
 180:	00000431 	.word	0x00000431
 184:	00000433 	.word	0x00000433
	...

Disassembly of section .boot_code:

00000190 <Reset_Handler>:
 190:	f04f 0b00 	mov.w	fp, #0
 194:	f8df 02be 	ldr.w	r0, [pc, #702]	; 456 <SF2_MDDR_MODE_CR>
 198:	6800      	ldr	r0, [r0, #0]
 19a:	f8df 12b6 	ldr.w	r1, [pc, #694]	; 452 <SF2_EDAC_CR>
 19e:	6809      	ldr	r1, [r1, #0]
 1a0:	f001 0103 	and.w	r1, r1, #3
 1a4:	f000 001c 	and.w	r0, r0, #28
 1a8:	2814      	cmp	r0, #20
 1aa:	d101      	bne.n	1b0 <check_esram_edac>
 1ac:	f04b 0b02 	orr.w	fp, fp, #2

000001b0 <check_esram_edac>:
 1b0:	2900      	cmp	r1, #0
 1b2:	d001      	beq.n	1b8 <check_stack_init>
 1b4:	f04b 0b01 	orr.w	fp, fp, #1

000001b8 <check_stack_init>:
 1b8:	f1bb 0f00 	cmp.w	fp, #0
 1bc:	d005      	beq.n	1ca <system_init>

000001be <clear_stack>:
 1be:	48a7      	ldr	r0, [pc, #668]	; (45c <SF2_MDDR_MODE_CR+0x6>)
 1c0:	49a7      	ldr	r1, [pc, #668]	; (460 <SF2_MDDR_MODE_CR+0xa>)
 1c2:	f8df 2272 	ldr.w	r2, [pc, #626]	; 436 <RAM_INIT_PATTERN>
 1c6:	f000 f89f 	bl	308 <fill_memory>

000001ca <system_init>:
 1ca:	48a6      	ldr	r0, [pc, #664]	; (464 <SF2_MDDR_MODE_CR+0xe>)
 1cc:	4780      	blx	r0
 1ce:	f00b 0a02 	and.w	sl, fp, #2
 1d2:	f1ba 0f00 	cmp.w	sl, #0
 1d6:	d00c      	beq.n	1f2 <remap_memory>
 1d8:	f8df 026e 	ldr.w	r0, [pc, #622]	; 44a <SF2_DDRB_NB_SIZE>
 1dc:	f8df 126e 	ldr.w	r1, [pc, #622]	; 44e <SF2_DDRB_CR>
 1e0:	6802      	ldr	r2, [r0, #0]
 1e2:	680b      	ldr	r3, [r1, #0]
 1e4:	b40f      	push	{r0, r1, r2, r3}
 1e6:	f04f 0200 	mov.w	r2, #0
 1ea:	f04f 03ff 	mov.w	r3, #255	; 0xff
 1ee:	6002      	str	r2, [r0, #0]
 1f0:	600b      	str	r3, [r1, #0]

000001f2 <remap_memory>:
 1f2:	489d      	ldr	r0, [pc, #628]	; (468 <SF2_MDDR_MODE_CR+0x12>)
 1f4:	4a9d      	ldr	r2, [pc, #628]	; (46c <SF2_MDDR_MODE_CR+0x16>)
 1f6:	4b9e      	ldr	r3, [pc, #632]	; (470 <SF2_MDDR_MODE_CR+0x1a>)
 1f8:	2802      	cmp	r0, #2
 1fa:	d108      	bne.n	20e <check_esram_remap>
 1fc:	f8df 123e 	ldr.w	r1, [pc, #574]	; 43e <SF2_ESRAM_CR>
 200:	600a      	str	r2, [r1, #0]
 202:	f8df 1242 	ldr.w	r1, [pc, #578]	; 446 <SF2_ENVM_REMAP_CR>
 206:	600a      	str	r2, [r1, #0]
 208:	f8df 1236 	ldr.w	r1, [pc, #566]	; 442 <SF2_DDR_CR>
 20c:	600b      	str	r3, [r1, #0]

0000020e <check_esram_remap>:
 20e:	2801      	cmp	r0, #1
 210:	d108      	bne.n	224 <check_mirrored_nvm>
 212:	f8df 122e 	ldr.w	r1, [pc, #558]	; 442 <SF2_DDR_CR>
 216:	600a      	str	r2, [r1, #0]
 218:	f8df 122a 	ldr.w	r1, [pc, #554]	; 446 <SF2_ENVM_REMAP_CR>
 21c:	600a      	str	r2, [r1, #0]
 21e:	f8df 121e 	ldr.w	r1, [pc, #542]	; 43e <SF2_ESRAM_CR>
 222:	600b      	str	r3, [r1, #0]

00000224 <check_mirrored_nvm>:
 224:	4893      	ldr	r0, [pc, #588]	; (474 <SF2_MDDR_MODE_CR+0x1e>)
 226:	2800      	cmp	r0, #0
 228:	d109      	bne.n	23e <copy_data>
 22a:	4893      	ldr	r0, [pc, #588]	; (478 <SF2_MDDR_MODE_CR+0x22>)
 22c:	4993      	ldr	r1, [pc, #588]	; (47c <SF2_MDDR_MODE_CR+0x26>)
 22e:	4a94      	ldr	r2, [pc, #592]	; (480 <SF2_MDDR_MODE_CR+0x2a>)
 230:	f000 f832 	bl	298 <block_copy>

00000234 <copy_text>:
 234:	4893      	ldr	r0, [pc, #588]	; (484 <SF2_MDDR_MODE_CR+0x2e>)
 236:	4994      	ldr	r1, [pc, #592]	; (488 <SF2_MDDR_MODE_CR+0x32>)
 238:	4a94      	ldr	r2, [pc, #592]	; (48c <SF2_MDDR_MODE_CR+0x36>)
 23a:	f000 f82d 	bl	298 <block_copy>

0000023e <copy_data>:
 23e:	4894      	ldr	r0, [pc, #592]	; (490 <SF2_MDDR_MODE_CR+0x3a>)
 240:	4994      	ldr	r1, [pc, #592]	; (494 <SF2_MDDR_MODE_CR+0x3e>)
 242:	4a95      	ldr	r2, [pc, #596]	; (498 <SF2_MDDR_MODE_CR+0x42>)
 244:	f000 f828 	bl	298 <block_copy>

00000248 <clear_bss>:
 248:	4894      	ldr	r0, [pc, #592]	; (49c <SF2_MDDR_MODE_CR+0x46>)
 24a:	4995      	ldr	r1, [pc, #596]	; (4a0 <SF2_MDDR_MODE_CR+0x4a>)
 24c:	f8df 21e6 	ldr.w	r2, [pc, #486]	; 436 <RAM_INIT_PATTERN>
 250:	f000 f85a 	bl	308 <fill_memory>

00000254 <clear_heap>:
 254:	f1bb 0f00 	cmp.w	fp, #0
 258:	d012      	beq.n	280 <call_glob_ctor>
 25a:	4892      	ldr	r0, [pc, #584]	; (4a4 <SF2_MDDR_MODE_CR+0x4e>)
 25c:	4992      	ldr	r1, [pc, #584]	; (4a8 <SF2_MDDR_MODE_CR+0x52>)
 25e:	f8df 21da 	ldr.w	r2, [pc, #474]	; 43a <HEAP_INIT_PATTERN>
 262:	f000 f851 	bl	308 <fill_memory>
 266:	f00b 0a02 	and.w	sl, fp, #2
 26a:	f1ba 0f00 	cmp.w	sl, #0
 26e:	d007      	beq.n	280 <call_glob_ctor>
 270:	bc0f      	pop	{r0, r1, r2, r3}
 272:	6002      	str	r2, [r0, #0]
 274:	600b      	str	r3, [r1, #0]
 276:	bf00      	nop
 278:	f3af 8000 	nop.w
 27c:	f3af 8000 	nop.w

00000280 <call_glob_ctor>:
 280:	f8df 0228 	ldr.w	r0, [pc, #552]	; 4ac <SF2_MDDR_MODE_CR+0x56>
 284:	f20f 0e03 	addw	lr, pc, #3
 288:	4700      	bx	r0

0000028a <branch_to_main>:
 28a:	f04f 0000 	mov.w	r0, #0
 28e:	f04f 0100 	mov.w	r1, #0
 292:	f8df f21c 	ldr.w	pc, [pc, #540]	; 4b0 <SF2_MDDR_MODE_CR+0x5a>

00000296 <ExitLoop>:
 296:	e7fe      	b.n	296 <ExitLoop>

00000298 <block_copy>:
 298:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 29c:	4288      	cmp	r0, r1
 29e:	d025      	beq.n	2ec <block_copy_exit>
 2a0:	ebb2 0201 	subs.w	r2, r2, r1
 2a4:	d500      	bpl.n	2a8 <block_copy_address_ok>
 2a6:	e7fe      	b.n	2a6 <block_copy+0xe>

000002a8 <block_copy_address_ok>:
 2a8:	ea40 0301 	orr.w	r3, r0, r1
 2ac:	f013 0303 	ands.w	r3, r3, #3
 2b0:	d002      	beq.n	2b8 <block_copy_continue>

000002b2 <block_copy_byte_copy>:
 2b2:	f000 f81d 	bl	2f0 <block_copy_byte>
 2b6:	e019      	b.n	2ec <block_copy_exit>

000002b8 <block_copy_continue>:
 2b8:	f04f 0300 	mov.w	r3, #0
 2bc:	4690      	mov	r8, r2
 2be:	1112      	asrs	r2, r2, #4
 2c0:	d0f7      	beq.n	2b2 <block_copy_byte_copy>

000002c2 <block_copy_loop>:
 2c2:	429a      	cmp	r2, r3
 2c4:	bf1c      	itt	ne
 2c6:	c8f0      	ldmiane	r0!, {r4, r5, r6, r7}
 2c8:	c1f0      	stmiane	r1!, {r4, r5, r6, r7}
 2ca:	f103 0301 	add.w	r3, r3, #1
 2ce:	d1f8      	bne.n	2c2 <block_copy_loop>
 2d0:	f008 080f 	and.w	r8, r8, #15
 2d4:	f1b8 0f00 	cmp.w	r8, #0
 2d8:	d008      	beq.n	2ec <block_copy_exit>

000002da <copy_spare_bytes>:
 2da:	7804      	ldrb	r4, [r0, #0]
 2dc:	700c      	strb	r4, [r1, #0]
 2de:	f100 0001 	add.w	r0, r0, #1
 2e2:	f101 0101 	add.w	r1, r1, #1
 2e6:	f1b8 0801 	subs.w	r8, r8, #1
 2ea:	d1f6      	bne.n	2da <copy_spare_bytes>

000002ec <block_copy_exit>:
 2ec:	e8bd 81f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, pc}

000002f0 <block_copy_byte>:
 2f0:	b508      	push	{r3, lr}
 2f2:	f04f 0300 	mov.w	r3, #0

000002f6 <block_copy_byte_loop>:
 2f6:	7803      	ldrb	r3, [r0, #0]
 2f8:	700b      	strb	r3, [r1, #0]
 2fa:	f100 0001 	add.w	r0, r0, #1
 2fe:	f101 0101 	add.w	r1, r1, #1
 302:	3a01      	subs	r2, #1
 304:	d1f7      	bne.n	2f6 <block_copy_byte_loop>
 306:	bd08      	pop	{r3, pc}

00000308 <fill_memory>:
 308:	4288      	cmp	r0, r1
 30a:	d037      	beq.n	37c <fill_memory_exit>
 30c:	f000 0603 	and.w	r6, r0, #3
 310:	2e00      	cmp	r6, #0
 312:	d014      	beq.n	33e <fill_memory_end_start>
 314:	f04f 0504 	mov.w	r5, #4
 318:	eba5 0406 	sub.w	r4, r5, r6
 31c:	f04f 0708 	mov.w	r7, #8
 320:	fb07 f806 	mul.w	r8, r7, r6
 324:	4691      	mov	r9, r2
 326:	fa69 f908 	ror.w	r9, r9, r8

0000032a <fill_memory_spare_bytes_start>:
 32a:	2c00      	cmp	r4, #0
 32c:	d007      	beq.n	33e <fill_memory_end_start>
 32e:	f880 9000 	strb.w	r9, [r0]
 332:	fa69 f907 	ror.w	r9, r9, r7
 336:	f100 0001 	add.w	r0, r0, #1
 33a:	3c01      	subs	r4, #1
 33c:	e7f5      	b.n	32a <fill_memory_spare_bytes_start>

0000033e <fill_memory_end_start>:
 33e:	f04f 0600 	mov.w	r6, #0
 342:	460f      	mov	r7, r1
 344:	1a09      	subs	r1, r1, r0
 346:	4688      	mov	r8, r1
 348:	1109      	asrs	r1, r1, #4
 34a:	4691      	mov	r9, r2
 34c:	4614      	mov	r4, r2
 34e:	4615      	mov	r5, r2
 350:	42b1      	cmp	r1, r6
 352:	d006      	beq.n	362 <fill_memory_spare_bytes_end>

00000354 <fill_memory_loop>:
 354:	bf18      	it	ne
 356:	e8a0 0234 	stmiane.w	r0!, {r2, r4, r5, r9}
 35a:	f106 0601 	add.w	r6, r6, #1
 35e:	42b1      	cmp	r1, r6
 360:	d1f8      	bne.n	354 <fill_memory_loop>

00000362 <fill_memory_spare_bytes_end>:
 362:	f008 080f 	and.w	r8, r8, #15

00000366 <fill_memory_spare_end_loop>:
 366:	f1b8 0f00 	cmp.w	r8, #0
 36a:	d007      	beq.n	37c <fill_memory_exit>
 36c:	7002      	strb	r2, [r0, #0]
 36e:	ea4f 2232 	mov.w	r2, r2, ror #8
 372:	f100 0001 	add.w	r0, r0, #1
 376:	f1b8 0801 	subs.w	r8, r8, #1
 37a:	e7f4      	b.n	366 <fill_memory_spare_end_loop>

0000037c <fill_memory_exit>:
 37c:	4770      	bx	lr

0000037e <NMI_Handler>:
 37e:	e7fe      	b.n	37e <NMI_Handler>

00000380 <HardFault_Handler>:
 380:	e7fe      	b.n	380 <HardFault_Handler>

00000382 <MemManage_Handler>:
 382:	e7fe      	b.n	382 <MemManage_Handler>

00000384 <BusFault_Handler>:
 384:	e7fe      	b.n	384 <BusFault_Handler>

00000386 <UsageFault_Handler>:
 386:	e7fe      	b.n	386 <UsageFault_Handler>

00000388 <SVC_Handler>:
 388:	e7fe      	b.n	388 <SVC_Handler>

0000038a <DebugMon_Handler>:
 38a:	e7fe      	b.n	38a <DebugMon_Handler>

0000038c <PendSV_Handler>:
 38c:	e7fe      	b.n	38c <PendSV_Handler>

0000038e <SysTick_Handler>:
 38e:	e7fe      	b.n	38e <SysTick_Handler>

00000390 <WdogWakeup_IRQHandler>:
 390:	e7fe      	b.n	390 <WdogWakeup_IRQHandler>

00000392 <RTC_Wakeup_IRQHandler>:
 392:	e7fe      	b.n	392 <RTC_Wakeup_IRQHandler>

00000394 <SPI0_IRQHandler>:
 394:	e7fe      	b.n	394 <SPI0_IRQHandler>

00000396 <SPI1_IRQHandler>:
 396:	e7fe      	b.n	396 <SPI1_IRQHandler>

00000398 <I2C0_IRQHandler>:
 398:	e7fe      	b.n	398 <I2C0_IRQHandler>

0000039a <I2C0_SMBAlert_IRQHandler>:
 39a:	e7fe      	b.n	39a <I2C0_SMBAlert_IRQHandler>

0000039c <I2C0_SMBus_IRQHandler>:
 39c:	e7fe      	b.n	39c <I2C0_SMBus_IRQHandler>

0000039e <I2C1_IRQHandler>:
 39e:	e7fe      	b.n	39e <I2C1_IRQHandler>

000003a0 <I2C1_SMBAlert_IRQHandler>:
 3a0:	e7fe      	b.n	3a0 <I2C1_SMBAlert_IRQHandler>

000003a2 <I2C1_SMBus_IRQHandler>:
 3a2:	e7fe      	b.n	3a2 <I2C1_SMBus_IRQHandler>
 3a4:	e7fe      	b.n	3a4 <I2C1_SMBus_IRQHandler+0x2>
 3a6:	e7fe      	b.n	3a6 <I2C1_SMBus_IRQHandler+0x4>

000003a8 <EthernetMAC_IRQHandler>:
 3a8:	e7fe      	b.n	3a8 <EthernetMAC_IRQHandler>

000003aa <DMA_IRQHandler>:
 3aa:	e7fe      	b.n	3aa <DMA_IRQHandler>

000003ac <Timer1_IRQHandler>:
 3ac:	e7fe      	b.n	3ac <Timer1_IRQHandler>

000003ae <Timer2_IRQHandler>:
 3ae:	e7fe      	b.n	3ae <Timer2_IRQHandler>

000003b0 <CAN_IRQHandler>:
 3b0:	e7fe      	b.n	3b0 <CAN_IRQHandler>

000003b2 <ENVM0_IRQHandler>:
 3b2:	e7fe      	b.n	3b2 <ENVM0_IRQHandler>

000003b4 <ENVM1_IRQHandler>:
 3b4:	e7fe      	b.n	3b4 <ENVM1_IRQHandler>

000003b6 <ComBlk_IRQHandler>:
 3b6:	e7fe      	b.n	3b6 <ComBlk_IRQHandler>

000003b8 <USB_IRQHandler>:
 3b8:	e7fe      	b.n	3b8 <USB_IRQHandler>

000003ba <USB_DMA_IRQHandler>:
 3ba:	e7fe      	b.n	3ba <USB_DMA_IRQHandler>

000003bc <PLL_Lock_IRQHandler>:
 3bc:	e7fe      	b.n	3bc <PLL_Lock_IRQHandler>

000003be <PLL_LockLost_IRQHandler>:
 3be:	e7fe      	b.n	3be <PLL_LockLost_IRQHandler>

000003c0 <CommSwitchError_IRQHandler>:
 3c0:	e7fe      	b.n	3c0 <CommSwitchError_IRQHandler>

000003c2 <CacheError_IRQHandler>:
 3c2:	e7fe      	b.n	3c2 <CacheError_IRQHandler>

000003c4 <DDR_IRQHandler>:
 3c4:	e7fe      	b.n	3c4 <DDR_IRQHandler>

000003c6 <HPDMA_Complete_IRQHandler>:
 3c6:	e7fe      	b.n	3c6 <HPDMA_Complete_IRQHandler>

000003c8 <HPDMA_Error_IRQHandler>:
 3c8:	e7fe      	b.n	3c8 <HPDMA_Error_IRQHandler>

000003ca <ECC_Error_IRQHandler>:
 3ca:	e7fe      	b.n	3ca <ECC_Error_IRQHandler>

000003cc <MDDR_IOCalib_IRQHandler>:
 3cc:	e7fe      	b.n	3cc <MDDR_IOCalib_IRQHandler>

000003ce <FAB_PLL_Lock_IRQHandler>:
 3ce:	e7fe      	b.n	3ce <FAB_PLL_Lock_IRQHandler>

000003d0 <FAB_PLL_LockLost_IRQHandler>:
 3d0:	e7fe      	b.n	3d0 <FAB_PLL_LockLost_IRQHandler>

000003d2 <FIC64_IRQHandler>:
 3d2:	e7fe      	b.n	3d2 <FIC64_IRQHandler>

000003d4 <FabricIrq0_IRQHandler>:
 3d4:	e7fe      	b.n	3d4 <FabricIrq0_IRQHandler>

000003d6 <FabricIrq1_IRQHandler>:
 3d6:	e7fe      	b.n	3d6 <FabricIrq1_IRQHandler>

000003d8 <FabricIrq2_IRQHandler>:
 3d8:	e7fe      	b.n	3d8 <FabricIrq2_IRQHandler>

000003da <FabricIrq3_IRQHandler>:
 3da:	e7fe      	b.n	3da <FabricIrq3_IRQHandler>

000003dc <FabricIrq4_IRQHandler>:
 3dc:	e7fe      	b.n	3dc <FabricIrq4_IRQHandler>

000003de <FabricIrq5_IRQHandler>:
 3de:	e7fe      	b.n	3de <FabricIrq5_IRQHandler>

000003e0 <FabricIrq6_IRQHandler>:
 3e0:	e7fe      	b.n	3e0 <FabricIrq6_IRQHandler>

000003e2 <FabricIrq7_IRQHandler>:
 3e2:	e7fe      	b.n	3e2 <FabricIrq7_IRQHandler>

000003e4 <FabricIrq8_IRQHandler>:
 3e4:	e7fe      	b.n	3e4 <FabricIrq8_IRQHandler>

000003e6 <FabricIrq9_IRQHandler>:
 3e6:	e7fe      	b.n	3e6 <FabricIrq9_IRQHandler>

000003e8 <FabricIrq10_IRQHandler>:
 3e8:	e7fe      	b.n	3e8 <FabricIrq10_IRQHandler>

000003ea <FabricIrq11_IRQHandler>:
 3ea:	e7fe      	b.n	3ea <FabricIrq11_IRQHandler>

000003ec <FabricIrq12_IRQHandler>:
 3ec:	e7fe      	b.n	3ec <FabricIrq12_IRQHandler>

000003ee <FabricIrq13_IRQHandler>:
 3ee:	e7fe      	b.n	3ee <FabricIrq13_IRQHandler>

000003f0 <FabricIrq14_IRQHandler>:
 3f0:	e7fe      	b.n	3f0 <FabricIrq14_IRQHandler>

000003f2 <FabricIrq15_IRQHandler>:
 3f2:	e7fe      	b.n	3f2 <FabricIrq15_IRQHandler>

000003f4 <GPIO0_IRQHandler>:
 3f4:	e7fe      	b.n	3f4 <GPIO0_IRQHandler>

000003f6 <GPIO1_IRQHandler>:
 3f6:	e7fe      	b.n	3f6 <GPIO1_IRQHandler>

000003f8 <GPIO2_IRQHandler>:
 3f8:	e7fe      	b.n	3f8 <GPIO2_IRQHandler>

000003fa <GPIO3_IRQHandler>:
 3fa:	e7fe      	b.n	3fa <GPIO3_IRQHandler>

000003fc <GPIO4_IRQHandler>:
 3fc:	e7fe      	b.n	3fc <GPIO4_IRQHandler>

000003fe <GPIO5_IRQHandler>:
 3fe:	e7fe      	b.n	3fe <GPIO5_IRQHandler>

00000400 <GPIO6_IRQHandler>:
 400:	e7fe      	b.n	400 <GPIO6_IRQHandler>

00000402 <GPIO7_IRQHandler>:
 402:	e7fe      	b.n	402 <GPIO7_IRQHandler>

00000404 <GPIO8_IRQHandler>:
 404:	e7fe      	b.n	404 <GPIO8_IRQHandler>

00000406 <GPIO9_IRQHandler>:
 406:	e7fe      	b.n	406 <GPIO9_IRQHandler>

00000408 <GPIO10_IRQHandler>:
 408:	e7fe      	b.n	408 <GPIO10_IRQHandler>

0000040a <GPIO11_IRQHandler>:
 40a:	e7fe      	b.n	40a <GPIO11_IRQHandler>

0000040c <GPIO12_IRQHandler>:
 40c:	e7fe      	b.n	40c <GPIO12_IRQHandler>

0000040e <GPIO13_IRQHandler>:
 40e:	e7fe      	b.n	40e <GPIO13_IRQHandler>

00000410 <GPIO14_IRQHandler>:
 410:	e7fe      	b.n	410 <GPIO14_IRQHandler>

00000412 <GPIO15_IRQHandler>:
 412:	e7fe      	b.n	412 <GPIO15_IRQHandler>

00000414 <GPIO16_IRQHandler>:
 414:	e7fe      	b.n	414 <GPIO16_IRQHandler>

00000416 <GPIO17_IRQHandler>:
 416:	e7fe      	b.n	416 <GPIO17_IRQHandler>

00000418 <GPIO18_IRQHandler>:
 418:	e7fe      	b.n	418 <GPIO18_IRQHandler>

0000041a <GPIO19_IRQHandler>:
 41a:	e7fe      	b.n	41a <GPIO19_IRQHandler>

0000041c <GPIO20_IRQHandler>:
 41c:	e7fe      	b.n	41c <GPIO20_IRQHandler>

0000041e <GPIO21_IRQHandler>:
 41e:	e7fe      	b.n	41e <GPIO21_IRQHandler>

00000420 <GPIO22_IRQHandler>:
 420:	e7fe      	b.n	420 <GPIO22_IRQHandler>

00000422 <GPIO23_IRQHandler>:
 422:	e7fe      	b.n	422 <GPIO23_IRQHandler>

00000424 <GPIO24_IRQHandler>:
 424:	e7fe      	b.n	424 <GPIO24_IRQHandler>

00000426 <GPIO25_IRQHandler>:
 426:	e7fe      	b.n	426 <GPIO25_IRQHandler>

00000428 <GPIO26_IRQHandler>:
 428:	e7fe      	b.n	428 <GPIO26_IRQHandler>

0000042a <GPIO27_IRQHandler>:
 42a:	e7fe      	b.n	42a <GPIO27_IRQHandler>

0000042c <GPIO28_IRQHandler>:
 42c:	e7fe      	b.n	42c <GPIO28_IRQHandler>

0000042e <GPIO29_IRQHandler>:
 42e:	e7fe      	b.n	42e <GPIO29_IRQHandler>

00000430 <GPIO30_IRQHandler>:
 430:	e7fe      	b.n	430 <GPIO30_IRQHandler>

00000432 <GPIO31_IRQHandler>:
 432:	e7fe      	b.n	432 <GPIO31_IRQHandler>

00000434 <mscc_post_hw_cfg_init>:
 434:	4770      	bx	lr

00000436 <RAM_INIT_PATTERN>:
 436:	0000      	.short	0x0000
	...

0000043a <HEAP_INIT_PATTERN>:
 43a:	a2a2      	.short	0xa2a2
 43c:	a2a2      	.short	0xa2a2

0000043e <SF2_ESRAM_CR>:
 43e:	8000      	.short	0x8000
 440:	4003      	.short	0x4003

00000442 <SF2_DDR_CR>:
 442:	8008      	.short	0x8008
 444:	4003      	.short	0x4003

00000446 <SF2_ENVM_REMAP_CR>:
 446:	8010      	.short	0x8010
 448:	4003      	.short	0x4003

0000044a <SF2_DDRB_NB_SIZE>:
 44a:	8030      	.short	0x8030
 44c:	4003      	.short	0x4003

0000044e <SF2_DDRB_CR>:
 44e:	8034      	.short	0x8034
 450:	4003      	.short	0x4003

00000452 <SF2_EDAC_CR>:
 452:	8038      	.short	0x8038
 454:	4003      	.short	0x4003

00000456 <SF2_MDDR_MODE_CR>:
 456:	0818      	.short	0x0818
 458:	00004002 	.word	0x00004002
 45c:	2000f000 	.word	0x2000f000
 460:	20010000 	.word	0x20010000
 464:	00002ba9 	.word	0x00002ba9
	...
 470:	00000001 	.word	0x00000001
	...
 480:	00000190 	.word	0x00000190
 484:	000004c0 	.word	0x000004c0
 488:	000004c0 	.word	0x000004c0
 48c:	00003670 	.word	0x00003670
 490:	00003670 	.word	0x00003670
 494:	20000000 	.word	0x20000000
 498:	20000020 	.word	0x20000020
 49c:	20000020 	.word	0x20000020
 4a0:	200000b0 	.word	0x200000b0
 4a4:	200000b0 	.word	0x200000b0
 4a8:	2000f000 	.word	0x2000f000
 4ac:	00002be9 	.word	0x00002be9
 4b0:	0000100d 	.word	0x0000100d
 4b4:	f3af 8000 	nop.w
 4b8:	f3af 8000 	nop.w
 4bc:	f3af 8000 	nop.w

Disassembly of section .text:

000004c0 <__do_global_dtors_aux>:
     4c0:	f240 0320 	movw	r3, #32
     4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c8:	781a      	ldrb	r2, [r3, #0]
     4ca:	b90a      	cbnz	r2, 4d0 <__do_global_dtors_aux+0x10>
     4cc:	2001      	movs	r0, #1
     4ce:	7018      	strb	r0, [r3, #0]
     4d0:	4770      	bx	lr
     4d2:	bf00      	nop

000004d4 <frame_dummy>:
     4d4:	f240 0000 	movw	r0, #0
     4d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4dc:	b508      	push	{r3, lr}
     4de:	6803      	ldr	r3, [r0, #0]
     4e0:	b12b      	cbz	r3, 4ee <frame_dummy+0x1a>
     4e2:	f240 0300 	movw	r3, #0
     4e6:	f2c0 0300 	movt	r3, #0
     4ea:	b103      	cbz	r3, 4ee <frame_dummy+0x1a>
     4ec:	4798      	blx	r3
     4ee:	bd08      	pop	{r3, pc}

000004f0 <T.38>:
     4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f4:	f240 0530 	movw	r5, #48	; 0x30
     4f8:	f2c5 0500 	movt	r5, #20480	; 0x5000
     4fc:	2602      	movs	r6, #2
     4fe:	f240 0434 	movw	r4, #52	; 0x34
     502:	602e      	str	r6, [r5, #0]
     504:	f2c5 0400 	movt	r4, #20480	; 0x5000
     508:	25a9      	movs	r5, #169	; 0xa9
     50a:	f240 0308 	movw	r3, #8
     50e:	6025      	str	r5, [r4, #0]
     510:	f2c5 0300 	movt	r3, #20480	; 0x5000
     514:	0a07      	lsrs	r7, r0, #8
     516:	25aa      	movs	r5, #170	; 0xaa
     518:	f64a 2440 	movw	r4, #43584	; 0xaa40
     51c:	f1b0 0c05 	subs.w	ip, r0, #5
     520:	601d      	str	r5, [r3, #0]
     522:	4692      	mov	sl, r2
     524:	601c      	str	r4, [r3, #0]
     526:	601f      	str	r7, [r3, #0]
     528:	6018      	str	r0, [r3, #0]
     52a:	d01e      	beq.n	56a <T.38+0x7a>
     52c:	2201      	movs	r2, #1
     52e:	3806      	subs	r0, #6
     530:	2700      	movs	r7, #0
     532:	4562      	cmp	r2, ip
     534:	601f      	str	r7, [r3, #0]
     536:	f000 0003 	and.w	r0, r0, #3
     53a:	d216      	bcs.n	56a <T.38+0x7a>
     53c:	b158      	cbz	r0, 556 <T.38+0x66>
     53e:	2801      	cmp	r0, #1
     540:	d005      	beq.n	54e <T.38+0x5e>
     542:	2802      	cmp	r0, #2
     544:	bf1c      	itt	ne
     546:	601a      	strne	r2, [r3, #0]
     548:	4632      	movne	r2, r6
     54a:	601a      	str	r2, [r3, #0]
     54c:	3201      	adds	r2, #1
     54e:	601a      	str	r2, [r3, #0]
     550:	3201      	adds	r2, #1
     552:	4562      	cmp	r2, ip
     554:	d209      	bcs.n	56a <T.38+0x7a>
     556:	1c55      	adds	r5, r2, #1
     558:	601a      	str	r2, [r3, #0]
     55a:	1cd6      	adds	r6, r2, #3
     55c:	3204      	adds	r2, #4
     55e:	1c6c      	adds	r4, r5, #1
     560:	4562      	cmp	r2, ip
     562:	601d      	str	r5, [r3, #0]
     564:	601c      	str	r4, [r3, #0]
     566:	601e      	str	r6, [r3, #0]
     568:	d3f5      	bcc.n	556 <T.38+0x66>
     56a:	2901      	cmp	r1, #1
     56c:	d074      	beq.n	658 <T.38+0x168>
     56e:	f240 0310 	movw	r3, #16
     572:	2902      	cmp	r1, #2
     574:	f2c5 0300 	movt	r3, #20480	; 0x5000
     578:	d075      	beq.n	666 <T.38+0x176>
     57a:	2020      	movs	r0, #32
     57c:	6018      	str	r0, [r3, #0]
     57e:	f240 0514 	movw	r5, #20
     582:	f240 0710 	movw	r7, #16
     586:	f2c5 0500 	movt	r5, #20480	; 0x5000
     58a:	f2c5 0700 	movt	r7, #20480	; 0x5000
     58e:	f04f 0b20 	mov.w	fp, #32
     592:	2610      	movs	r6, #16
     594:	f04f 0901 	mov.w	r9, #1
     598:	f04f 0880 	mov.w	r8, #128	; 0x80
     59c:	e00d      	b.n	5ba <T.38+0xca>
     59e:	f014 0f10 	tst.w	r4, #16
     5a2:	d11e      	bne.n	5e2 <T.38+0xf2>
     5a4:	f014 0f01 	tst.w	r4, #1
     5a8:	d12a      	bne.n	600 <T.38+0x110>
     5aa:	f014 0f80 	tst.w	r4, #128	; 0x80
     5ae:	bf18      	it	ne
     5b0:	f8c5 8000 	strne.w	r8, [r5]
     5b4:	f014 0fb1 	tst.w	r4, #177	; 0xb1
     5b8:	d136      	bne.n	628 <T.38+0x138>
     5ba:	682c      	ldr	r4, [r5, #0]
     5bc:	f014 0f20 	tst.w	r4, #32
     5c0:	d0ed      	beq.n	59e <T.38+0xae>
     5c2:	f240 0064 	movw	r0, #100	; 0x64
     5c6:	f642 4138 	movw	r1, #11320	; 0x2c38
     5ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5ce:	f2c0 0100 	movt	r1, #0
     5d2:	f8c5 b000 	str.w	fp, [r5]
     5d6:	f001 fe73 	bl	22c0 <MSS_UART_polled_tx_string>
     5da:	f014 0f10 	tst.w	r4, #16
     5de:	603e      	str	r6, [r7, #0]
     5e0:	d0e0      	beq.n	5a4 <T.38+0xb4>
     5e2:	f240 0064 	movw	r0, #100	; 0x64
     5e6:	f642 4158 	movw	r1, #11352	; 0x2c58
     5ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5ee:	f2c0 0100 	movt	r1, #0
     5f2:	602e      	str	r6, [r5, #0]
     5f4:	f001 fe64 	bl	22c0 <MSS_UART_polled_tx_string>
     5f8:	f014 0f01 	tst.w	r4, #1
     5fc:	603e      	str	r6, [r7, #0]
     5fe:	d0d4      	beq.n	5aa <T.38+0xba>
     600:	f240 0064 	movw	r0, #100	; 0x64
     604:	f642 4178 	movw	r1, #11384	; 0x2c78
     608:	f8c5 9000 	str.w	r9, [r5]
     60c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     610:	f2c0 0100 	movt	r1, #0
     614:	f001 fe54 	bl	22c0 <MSS_UART_polled_tx_string>
     618:	f014 0f80 	tst.w	r4, #128	; 0x80
     61c:	bf18      	it	ne
     61e:	f8c5 8000 	strne.w	r8, [r5]
     622:	f014 0fb1 	tst.w	r4, #177	; 0xb1
     626:	d0c8      	beq.n	5ba <T.38+0xca>
     628:	f1ba 0f00 	cmp.w	sl, #0
     62c:	d112      	bne.n	654 <T.38+0x164>
     62e:	f240 0314 	movw	r3, #20
     632:	f64f 72ff 	movw	r2, #65535	; 0xffff
     636:	f2c5 0300 	movt	r3, #20480	; 0x5000
     63a:	f2c0 0203 	movt	r2, #3
     63e:	f10a 0a07 	add.w	sl, sl, #7
     642:	4592      	cmp	sl, r2
     644:	6819      	ldr	r1, [r3, #0]
     646:	6819      	ldr	r1, [r3, #0]
     648:	6819      	ldr	r1, [r3, #0]
     64a:	6819      	ldr	r1, [r3, #0]
     64c:	6819      	ldr	r1, [r3, #0]
     64e:	6819      	ldr	r1, [r3, #0]
     650:	6819      	ldr	r1, [r3, #0]
     652:	d1f4      	bne.n	63e <T.38+0x14e>
     654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     658:	f240 0310 	movw	r3, #16
     65c:	f2c5 0300 	movt	r3, #20480	; 0x5000
     660:	2230      	movs	r2, #48	; 0x30
     662:	601a      	str	r2, [r3, #0]
     664:	e78b      	b.n	57e <T.38+0x8e>
     666:	2122      	movs	r1, #34	; 0x22
     668:	6019      	str	r1, [r3, #0]
     66a:	e788      	b.n	57e <T.38+0x8e>

0000066c <print_registers>:
     66c:	b510      	push	{r4, lr}
     66e:	f240 0064 	movw	r0, #100	; 0x64
     672:	f642 41e0 	movw	r1, #11488	; 0x2ce0
     676:	b082      	sub	sp, #8
     678:	f2c2 0000 	movt	r0, #8192	; 0x2000
     67c:	f2c0 0100 	movt	r1, #0
     680:	f001 fe1e 	bl	22c0 <MSS_UART_polled_tx_string>
     684:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     688:	681b      	ldr	r3, [r3, #0]
     68a:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
     68e:	9201      	str	r2, [sp, #4]
     690:	9200      	str	r2, [sp, #0]
     692:	466c      	mov	r4, sp
     694:	b173      	cbz	r3, 6b4 <print_registers+0x48>
     696:	2107      	movs	r1, #7
     698:	e004      	b.n	6a4 <print_registers+0x38>
     69a:	3230      	adds	r2, #48	; 0x30
     69c:	091b      	lsrs	r3, r3, #4
     69e:	5462      	strb	r2, [r4, r1]
     6a0:	d008      	beq.n	6b4 <print_registers+0x48>
     6a2:	3901      	subs	r1, #1
     6a4:	f003 020f 	and.w	r2, r3, #15
     6a8:	2a09      	cmp	r2, #9
     6aa:	d9f6      	bls.n	69a <print_registers+0x2e>
     6ac:	3237      	adds	r2, #55	; 0x37
     6ae:	091b      	lsrs	r3, r3, #4
     6b0:	5462      	strb	r2, [r4, r1]
     6b2:	d1f6      	bne.n	6a2 <print_registers+0x36>
     6b4:	f240 0064 	movw	r0, #100	; 0x64
     6b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     6bc:	4669      	mov	r1, sp
     6be:	2208      	movs	r2, #8
     6c0:	f001 fda8 	bl	2214 <MSS_UART_polled_tx>
     6c4:	f240 0064 	movw	r0, #100	; 0x64
     6c8:	f642 5108 	movw	r1, #11528	; 0x2d08
     6cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     6d0:	f2c0 0100 	movt	r1, #0
     6d4:	f001 fdf4 	bl	22c0 <MSS_UART_polled_tx_string>
     6d8:	f240 0104 	movw	r1, #4
     6dc:	f2c5 0100 	movt	r1, #20480	; 0x5000
     6e0:	680b      	ldr	r3, [r1, #0]
     6e2:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
     6e6:	6060      	str	r0, [r4, #4]
     6e8:	6020      	str	r0, [r4, #0]
     6ea:	b173      	cbz	r3, 70a <print_registers+0x9e>
     6ec:	2107      	movs	r1, #7
     6ee:	e004      	b.n	6fa <print_registers+0x8e>
     6f0:	3230      	adds	r2, #48	; 0x30
     6f2:	091b      	lsrs	r3, r3, #4
     6f4:	5462      	strb	r2, [r4, r1]
     6f6:	d008      	beq.n	70a <print_registers+0x9e>
     6f8:	3901      	subs	r1, #1
     6fa:	f003 020f 	and.w	r2, r3, #15
     6fe:	2a09      	cmp	r2, #9
     700:	d9f6      	bls.n	6f0 <print_registers+0x84>
     702:	3237      	adds	r2, #55	; 0x37
     704:	091b      	lsrs	r3, r3, #4
     706:	5462      	strb	r2, [r4, r1]
     708:	d1f6      	bne.n	6f8 <print_registers+0x8c>
     70a:	f240 0064 	movw	r0, #100	; 0x64
     70e:	2208      	movs	r2, #8
     710:	f2c2 0000 	movt	r0, #8192	; 0x2000
     714:	4669      	mov	r1, sp
     716:	f001 fd7d 	bl	2214 <MSS_UART_polled_tx>
     71a:	f240 0064 	movw	r0, #100	; 0x64
     71e:	f642 5130 	movw	r1, #11568	; 0x2d30
     722:	f2c2 0000 	movt	r0, #8192	; 0x2000
     726:	f2c0 0100 	movt	r1, #0
     72a:	f001 fdc9 	bl	22c0 <MSS_UART_polled_tx_string>
     72e:	f240 0310 	movw	r3, #16
     732:	f2c5 0300 	movt	r3, #20480	; 0x5000
     736:	681b      	ldr	r3, [r3, #0]
     738:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
     73c:	6062      	str	r2, [r4, #4]
     73e:	6022      	str	r2, [r4, #0]
     740:	b173      	cbz	r3, 760 <print_registers+0xf4>
     742:	2107      	movs	r1, #7
     744:	e004      	b.n	750 <print_registers+0xe4>
     746:	3230      	adds	r2, #48	; 0x30
     748:	091b      	lsrs	r3, r3, #4
     74a:	5462      	strb	r2, [r4, r1]
     74c:	d008      	beq.n	760 <print_registers+0xf4>
     74e:	3901      	subs	r1, #1
     750:	f003 020f 	and.w	r2, r3, #15
     754:	2a09      	cmp	r2, #9
     756:	d9f6      	bls.n	746 <print_registers+0xda>
     758:	3237      	adds	r2, #55	; 0x37
     75a:	091b      	lsrs	r3, r3, #4
     75c:	5462      	strb	r2, [r4, r1]
     75e:	d1f6      	bne.n	74e <print_registers+0xe2>
     760:	f240 0064 	movw	r0, #100	; 0x64
     764:	f2c2 0000 	movt	r0, #8192	; 0x2000
     768:	4669      	mov	r1, sp
     76a:	2208      	movs	r2, #8
     76c:	f001 fd52 	bl	2214 <MSS_UART_polled_tx>
     770:	f240 0064 	movw	r0, #100	; 0x64
     774:	f642 5158 	movw	r1, #11608	; 0x2d58
     778:	f2c2 0000 	movt	r0, #8192	; 0x2000
     77c:	f2c0 0100 	movt	r1, #0
     780:	f001 fd9e 	bl	22c0 <MSS_UART_polled_tx_string>
     784:	f240 0114 	movw	r1, #20
     788:	f2c5 0100 	movt	r1, #20480	; 0x5000
     78c:	680b      	ldr	r3, [r1, #0]
     78e:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
     792:	6060      	str	r0, [r4, #4]
     794:	6020      	str	r0, [r4, #0]
     796:	b173      	cbz	r3, 7b6 <print_registers+0x14a>
     798:	2107      	movs	r1, #7
     79a:	e004      	b.n	7a6 <print_registers+0x13a>
     79c:	3230      	adds	r2, #48	; 0x30
     79e:	091b      	lsrs	r3, r3, #4
     7a0:	5462      	strb	r2, [r4, r1]
     7a2:	d008      	beq.n	7b6 <print_registers+0x14a>
     7a4:	3901      	subs	r1, #1
     7a6:	f003 020f 	and.w	r2, r3, #15
     7aa:	2a09      	cmp	r2, #9
     7ac:	d9f6      	bls.n	79c <print_registers+0x130>
     7ae:	3237      	adds	r2, #55	; 0x37
     7b0:	091b      	lsrs	r3, r3, #4
     7b2:	5462      	strb	r2, [r4, r1]
     7b4:	d1f6      	bne.n	7a4 <print_registers+0x138>
     7b6:	f240 0064 	movw	r0, #100	; 0x64
     7ba:	2208      	movs	r2, #8
     7bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7c0:	4669      	mov	r1, sp
     7c2:	f001 fd27 	bl	2214 <MSS_UART_polled_tx>
     7c6:	f240 0064 	movw	r0, #100	; 0x64
     7ca:	f642 5180 	movw	r1, #11648	; 0x2d80
     7ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7d2:	f2c0 0100 	movt	r1, #0
     7d6:	f001 fd73 	bl	22c0 <MSS_UART_polled_tx_string>
     7da:	f240 0318 	movw	r3, #24
     7de:	f2c5 0300 	movt	r3, #20480	; 0x5000
     7e2:	681b      	ldr	r3, [r3, #0]
     7e4:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
     7e8:	6062      	str	r2, [r4, #4]
     7ea:	6022      	str	r2, [r4, #0]
     7ec:	b173      	cbz	r3, 80c <print_registers+0x1a0>
     7ee:	2107      	movs	r1, #7
     7f0:	e004      	b.n	7fc <print_registers+0x190>
     7f2:	3230      	adds	r2, #48	; 0x30
     7f4:	091b      	lsrs	r3, r3, #4
     7f6:	5462      	strb	r2, [r4, r1]
     7f8:	d008      	beq.n	80c <print_registers+0x1a0>
     7fa:	3901      	subs	r1, #1
     7fc:	f003 020f 	and.w	r2, r3, #15
     800:	2a09      	cmp	r2, #9
     802:	d9f6      	bls.n	7f2 <print_registers+0x186>
     804:	3237      	adds	r2, #55	; 0x37
     806:	091b      	lsrs	r3, r3, #4
     808:	5462      	strb	r2, [r4, r1]
     80a:	d1f6      	bne.n	7fa <print_registers+0x18e>
     80c:	f240 0064 	movw	r0, #100	; 0x64
     810:	f2c2 0000 	movt	r0, #8192	; 0x2000
     814:	4669      	mov	r1, sp
     816:	2208      	movs	r2, #8
     818:	f001 fcfc 	bl	2214 <MSS_UART_polled_tx>
     81c:	f240 0064 	movw	r0, #100	; 0x64
     820:	f642 51a8 	movw	r1, #11688	; 0x2da8
     824:	f2c2 0000 	movt	r0, #8192	; 0x2000
     828:	f2c0 0100 	movt	r1, #0
     82c:	f001 fd48 	bl	22c0 <MSS_UART_polled_tx_string>
     830:	f240 011c 	movw	r1, #28
     834:	f2c5 0100 	movt	r1, #20480	; 0x5000
     838:	680b      	ldr	r3, [r1, #0]
     83a:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
     83e:	6060      	str	r0, [r4, #4]
     840:	6020      	str	r0, [r4, #0]
     842:	b173      	cbz	r3, 862 <print_registers+0x1f6>
     844:	2107      	movs	r1, #7
     846:	e004      	b.n	852 <print_registers+0x1e6>
     848:	3230      	adds	r2, #48	; 0x30
     84a:	091b      	lsrs	r3, r3, #4
     84c:	5462      	strb	r2, [r4, r1]
     84e:	d008      	beq.n	862 <print_registers+0x1f6>
     850:	3901      	subs	r1, #1
     852:	f003 020f 	and.w	r2, r3, #15
     856:	2a09      	cmp	r2, #9
     858:	d9f6      	bls.n	848 <print_registers+0x1dc>
     85a:	3237      	adds	r2, #55	; 0x37
     85c:	091b      	lsrs	r3, r3, #4
     85e:	5462      	strb	r2, [r4, r1]
     860:	d1f6      	bne.n	850 <print_registers+0x1e4>
     862:	f240 0064 	movw	r0, #100	; 0x64
     866:	2208      	movs	r2, #8
     868:	f2c2 0000 	movt	r0, #8192	; 0x2000
     86c:	4669      	mov	r1, sp
     86e:	f001 fcd1 	bl	2214 <MSS_UART_polled_tx>
     872:	f240 0064 	movw	r0, #100	; 0x64
     876:	f642 51d0 	movw	r1, #11728	; 0x2dd0
     87a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     87e:	f2c0 0100 	movt	r1, #0
     882:	f001 fd1d 	bl	22c0 <MSS_UART_polled_tx_string>
     886:	f240 0330 	movw	r3, #48	; 0x30
     88a:	f2c5 0300 	movt	r3, #20480	; 0x5000
     88e:	681b      	ldr	r3, [r3, #0]
     890:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
     894:	6062      	str	r2, [r4, #4]
     896:	6022      	str	r2, [r4, #0]
     898:	b173      	cbz	r3, 8b8 <print_registers+0x24c>
     89a:	2107      	movs	r1, #7
     89c:	e004      	b.n	8a8 <print_registers+0x23c>
     89e:	3230      	adds	r2, #48	; 0x30
     8a0:	091b      	lsrs	r3, r3, #4
     8a2:	5462      	strb	r2, [r4, r1]
     8a4:	d008      	beq.n	8b8 <print_registers+0x24c>
     8a6:	3901      	subs	r1, #1
     8a8:	f003 020f 	and.w	r2, r3, #15
     8ac:	2a09      	cmp	r2, #9
     8ae:	d9f6      	bls.n	89e <print_registers+0x232>
     8b0:	3237      	adds	r2, #55	; 0x37
     8b2:	091b      	lsrs	r3, r3, #4
     8b4:	5462      	strb	r2, [r4, r1]
     8b6:	d1f6      	bne.n	8a6 <print_registers+0x23a>
     8b8:	f240 0064 	movw	r0, #100	; 0x64
     8bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8c0:	4669      	mov	r1, sp
     8c2:	2208      	movs	r2, #8
     8c4:	f001 fca6 	bl	2214 <MSS_UART_polled_tx>
     8c8:	f240 0064 	movw	r0, #100	; 0x64
     8cc:	f642 51f8 	movw	r1, #11768	; 0x2df8
     8d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8d4:	f2c0 0100 	movt	r1, #0
     8d8:	f001 fcf2 	bl	22c0 <MSS_UART_polled_tx_string>
     8dc:	f240 0134 	movw	r1, #52	; 0x34
     8e0:	f2c5 0100 	movt	r1, #20480	; 0x5000
     8e4:	680b      	ldr	r3, [r1, #0]
     8e6:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
     8ea:	6060      	str	r0, [r4, #4]
     8ec:	6020      	str	r0, [r4, #0]
     8ee:	b173      	cbz	r3, 90e <print_registers+0x2a2>
     8f0:	2107      	movs	r1, #7
     8f2:	e004      	b.n	8fe <print_registers+0x292>
     8f4:	3230      	adds	r2, #48	; 0x30
     8f6:	091b      	lsrs	r3, r3, #4
     8f8:	5462      	strb	r2, [r4, r1]
     8fa:	d008      	beq.n	90e <print_registers+0x2a2>
     8fc:	3901      	subs	r1, #1
     8fe:	f003 020f 	and.w	r2, r3, #15
     902:	2a09      	cmp	r2, #9
     904:	d9f6      	bls.n	8f4 <print_registers+0x288>
     906:	3237      	adds	r2, #55	; 0x37
     908:	091b      	lsrs	r3, r3, #4
     90a:	5462      	strb	r2, [r4, r1]
     90c:	d1f6      	bne.n	8fc <print_registers+0x290>
     90e:	f240 0064 	movw	r0, #100	; 0x64
     912:	f2c2 0000 	movt	r0, #8192	; 0x2000
     916:	4669      	mov	r1, sp
     918:	2208      	movs	r2, #8
     91a:	f001 fc7b 	bl	2214 <MSS_UART_polled_tx>
     91e:	b002      	add	sp, #8
     920:	bd10      	pop	{r4, pc}
     922:	bf00      	nop

00000924 <b2b_single_rx_message_check>:
     924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     928:	b08f      	sub	sp, #60	; 0x3c
     92a:	aa05      	add	r2, sp, #20
     92c:	9201      	str	r2, [sp, #4]
     92e:	f642 4b94 	movw	fp, #11412	; 0x2c94
     932:	9c01      	ldr	r4, [sp, #4]
     934:	f2c0 0b00 	movt	fp, #0
     938:	4680      	mov	r8, r0
     93a:	4689      	mov	r9, r1
     93c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
     940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     942:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
     946:	4623      	mov	r3, r4
     948:	c403      	stmia	r4!, {r0, r1}
     94a:	ea4f 1788 	mov.w	r7, r8, lsl #6
     94e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     952:	9703      	str	r7, [sp, #12]
     954:	f883 c00a 	strb.w	ip, [r3, #10]
     958:	4620      	mov	r0, r4
     95a:	f240 0114 	movw	r1, #20
     95e:	f240 0630 	movw	r6, #48	; 0x30
     962:	f240 0534 	movw	r5, #52	; 0x34
     966:	f240 0410 	movw	r4, #16
     96a:	f8dd c00c 	ldr.w	ip, [sp, #12]
     96e:	8002      	strh	r2, [r0, #0]
     970:	f2c5 0600 	movt	r6, #20480	; 0x5000
     974:	f2c5 0500 	movt	r5, #20480	; 0x5000
     978:	f2c5 0400 	movt	r4, #20480	; 0x5000
     97c:	ea4f 2a18 	mov.w	sl, r8, lsr #8
     980:	f008 0bff 	and.w	fp, r8, #255	; 0xff
     984:	f2c5 0100 	movt	r1, #20480	; 0x5000
     988:	f240 071c 	movw	r7, #28
     98c:	20ff      	movs	r0, #255	; 0xff
     98e:	2300      	movs	r3, #0
     990:	6008      	str	r0, [r1, #0]
     992:	f2c5 0700 	movt	r7, #20480	; 0x5000
     996:	f8c6 a000 	str.w	sl, [r6]
     99a:	ea4f 0898 	mov.w	r8, r8, lsr #2
     99e:	f8c5 b000 	str.w	fp, [r5]
     9a2:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
     9a6:	6023      	str	r3, [r4, #0]
     9a8:	ea4f 2519 	mov.w	r5, r9, lsr #8
     9ac:	f009 04ff 	and.w	r4, r9, #255	; 0xff
     9b0:	6839      	ldr	r1, [r7, #0]
     9b2:	f011 0f10 	tst.w	r1, #16
     9b6:	d0fb      	beq.n	9b0 <b2b_single_rx_message_check+0x8c>
     9b8:	f240 0a14 	movw	sl, #20
     9bc:	2340      	movs	r3, #64	; 0x40
     9be:	f2c5 0a00 	movt	sl, #20480	; 0x5000
     9c2:	f240 000c 	movw	r0, #12
     9c6:	f8ca 3000 	str.w	r3, [sl]
     9ca:	f2c5 0000 	movt	r0, #20480	; 0x5000
     9ce:	6807      	ldr	r7, [r0, #0]
     9d0:	4547      	cmp	r7, r8
     9d2:	bf08      	it	eq
     9d4:	f04f 0b00 	moveq.w	fp, #0
     9d8:	f000 8090 	beq.w	afc <b2b_single_rx_message_check+0x1d8>
     9dc:	f240 0064 	movw	r0, #100	; 0x64
     9e0:	f642 6120 	movw	r1, #11808	; 0x2e20
     9e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     9e8:	f2c0 0100 	movt	r1, #0
     9ec:	f001 fc68 	bl	22c0 <MSS_UART_polled_tx_string>
     9f0:	f240 0064 	movw	r0, #100	; 0x64
     9f4:	f642 6138 	movw	r1, #11832	; 0x2e38
     9f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     9fc:	f2c0 0100 	movt	r1, #0
     a00:	f001 fc5e 	bl	22c0 <MSS_UART_polled_tx_string>
     a04:	f8da 3000 	ldr.w	r3, [sl]
     a08:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
     a0c:	920d      	str	r2, [sp, #52]	; 0x34
     a0e:	920c      	str	r2, [sp, #48]	; 0x30
     a10:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
     a14:	b183      	cbz	r3, a38 <b2b_single_rx_message_check+0x114>
     a16:	2107      	movs	r1, #7
     a18:	e005      	b.n	a26 <b2b_single_rx_message_check+0x102>
     a1a:	3230      	adds	r2, #48	; 0x30
     a1c:	091b      	lsrs	r3, r3, #4
     a1e:	f80a 2001 	strb.w	r2, [sl, r1]
     a22:	d009      	beq.n	a38 <b2b_single_rx_message_check+0x114>
     a24:	3901      	subs	r1, #1
     a26:	f003 020f 	and.w	r2, r3, #15
     a2a:	2a09      	cmp	r2, #9
     a2c:	d9f5      	bls.n	a1a <b2b_single_rx_message_check+0xf6>
     a2e:	3237      	adds	r2, #55	; 0x37
     a30:	091b      	lsrs	r3, r3, #4
     a32:	f80a 2001 	strb.w	r2, [sl, r1]
     a36:	d1f5      	bne.n	a24 <b2b_single_rx_message_check+0x100>
     a38:	f240 0064 	movw	r0, #100	; 0x64
     a3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a40:	4651      	mov	r1, sl
     a42:	2208      	movs	r2, #8
     a44:	f001 fbe6 	bl	2214 <MSS_UART_polled_tx>
     a48:	f240 0064 	movw	r0, #100	; 0x64
     a4c:	f642 6158 	movw	r1, #11864	; 0x2e58
     a50:	f2c0 0100 	movt	r1, #0
     a54:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a58:	f001 fc32 	bl	22c0 <MSS_UART_polled_tx_string>
     a5c:	f04f 3130 	mov.w	r1, #808464432	; 0x30303030
     a60:	f8ca 1004 	str.w	r1, [sl, #4]
     a64:	f8ca 1000 	str.w	r1, [sl]
     a68:	f1b8 0f00 	cmp.w	r8, #0
     a6c:	d012      	beq.n	a94 <b2b_single_rx_message_check+0x170>
     a6e:	2207      	movs	r2, #7
     a70:	e006      	b.n	a80 <b2b_single_rx_message_check+0x15c>
     a72:	3330      	adds	r3, #48	; 0x30
     a74:	ea5f 1818 	movs.w	r8, r8, lsr #4
     a78:	f80a 3002 	strb.w	r3, [sl, r2]
     a7c:	d00a      	beq.n	a94 <b2b_single_rx_message_check+0x170>
     a7e:	3a01      	subs	r2, #1
     a80:	f008 030f 	and.w	r3, r8, #15
     a84:	2b09      	cmp	r3, #9
     a86:	d9f4      	bls.n	a72 <b2b_single_rx_message_check+0x14e>
     a88:	3337      	adds	r3, #55	; 0x37
     a8a:	ea5f 1818 	movs.w	r8, r8, lsr #4
     a8e:	f80a 3002 	strb.w	r3, [sl, r2]
     a92:	d1f4      	bne.n	a7e <b2b_single_rx_message_check+0x15a>
     a94:	f240 0064 	movw	r0, #100	; 0x64
     a98:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a9c:	4651      	mov	r1, sl
     a9e:	2208      	movs	r2, #8
     aa0:	f001 fbb8 	bl	2214 <MSS_UART_polled_tx>
     aa4:	f240 0064 	movw	r0, #100	; 0x64
     aa8:	f642 616c 	movw	r1, #11884	; 0x2e6c
     aac:	f2c2 0000 	movt	r0, #8192	; 0x2000
     ab0:	f2c0 0100 	movt	r1, #0
     ab4:	f001 fc04 	bl	22c0 <MSS_UART_polled_tx_string>
     ab8:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
     abc:	f8ca 0004 	str.w	r0, [sl, #4]
     ac0:	f8ca 0000 	str.w	r0, [sl]
     ac4:	b187      	cbz	r7, ae8 <b2b_single_rx_message_check+0x1c4>
     ac6:	2207      	movs	r2, #7
     ac8:	e005      	b.n	ad6 <b2b_single_rx_message_check+0x1b2>
     aca:	3330      	adds	r3, #48	; 0x30
     acc:	093f      	lsrs	r7, r7, #4
     ace:	f80a 3002 	strb.w	r3, [sl, r2]
     ad2:	d009      	beq.n	ae8 <b2b_single_rx_message_check+0x1c4>
     ad4:	3a01      	subs	r2, #1
     ad6:	f007 030f 	and.w	r3, r7, #15
     ada:	2b09      	cmp	r3, #9
     adc:	d9f5      	bls.n	aca <b2b_single_rx_message_check+0x1a6>
     ade:	3337      	adds	r3, #55	; 0x37
     ae0:	093f      	lsrs	r7, r7, #4
     ae2:	f80a 3002 	strb.w	r3, [sl, r2]
     ae6:	d1f5      	bne.n	ad4 <b2b_single_rx_message_check+0x1b0>
     ae8:	f240 0064 	movw	r0, #100	; 0x64
     aec:	f2c2 0000 	movt	r0, #8192	; 0x2000
     af0:	4651      	mov	r1, sl
     af2:	2208      	movs	r2, #8
     af4:	f001 fb8e 	bl	2214 <MSS_UART_polled_tx>
     af8:	f04f 0b01 	mov.w	fp, #1
     afc:	f240 030c 	movw	r3, #12
     b00:	f2c5 0300 	movt	r3, #20480	; 0x5000
     b04:	681f      	ldr	r7, [r3, #0]
     b06:	42b7      	cmp	r7, r6
     b08:	f000 808f 	beq.w	c2a <b2b_single_rx_message_check+0x306>
     b0c:	f240 0064 	movw	r0, #100	; 0x64
     b10:	f642 6180 	movw	r1, #11904	; 0x2e80
     b14:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b18:	f2c0 0100 	movt	r1, #0
     b1c:	f001 fbd0 	bl	22c0 <MSS_UART_polled_tx_string>
     b20:	f240 0064 	movw	r0, #100	; 0x64
     b24:	f642 6138 	movw	r1, #11832	; 0x2e38
     b28:	f2c0 0100 	movt	r1, #0
     b2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b30:	f001 fbc6 	bl	22c0 <MSS_UART_polled_tx_string>
     b34:	f240 0114 	movw	r1, #20
     b38:	f2c5 0100 	movt	r1, #20480	; 0x5000
     b3c:	680b      	ldr	r3, [r1, #0]
     b3e:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
     b42:	920d      	str	r2, [sp, #52]	; 0x34
     b44:	920c      	str	r2, [sp, #48]	; 0x30
     b46:	f10d 0830 	add.w	r8, sp, #48	; 0x30
     b4a:	b183      	cbz	r3, b6e <b2b_single_rx_message_check+0x24a>
     b4c:	2107      	movs	r1, #7
     b4e:	e005      	b.n	b5c <b2b_single_rx_message_check+0x238>
     b50:	3230      	adds	r2, #48	; 0x30
     b52:	091b      	lsrs	r3, r3, #4
     b54:	f808 2001 	strb.w	r2, [r8, r1]
     b58:	d009      	beq.n	b6e <b2b_single_rx_message_check+0x24a>
     b5a:	3901      	subs	r1, #1
     b5c:	f003 020f 	and.w	r2, r3, #15
     b60:	2a09      	cmp	r2, #9
     b62:	d9f5      	bls.n	b50 <b2b_single_rx_message_check+0x22c>
     b64:	3237      	adds	r2, #55	; 0x37
     b66:	091b      	lsrs	r3, r3, #4
     b68:	f808 2001 	strb.w	r2, [r8, r1]
     b6c:	d1f5      	bne.n	b5a <b2b_single_rx_message_check+0x236>
     b6e:	f240 0064 	movw	r0, #100	; 0x64
     b72:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b76:	4641      	mov	r1, r8
     b78:	2208      	movs	r2, #8
     b7a:	f001 fb4b 	bl	2214 <MSS_UART_polled_tx>
     b7e:	f240 0064 	movw	r0, #100	; 0x64
     b82:	f642 6158 	movw	r1, #11864	; 0x2e58
     b86:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b8a:	f2c0 0100 	movt	r1, #0
     b8e:	f001 fb97 	bl	22c0 <MSS_UART_polled_tx_string>
     b92:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
     b96:	f8c8 0004 	str.w	r0, [r8, #4]
     b9a:	f8c8 0000 	str.w	r0, [r8]
     b9e:	b186      	cbz	r6, bc2 <b2b_single_rx_message_check+0x29e>
     ba0:	2207      	movs	r2, #7
     ba2:	e005      	b.n	bb0 <b2b_single_rx_message_check+0x28c>
     ba4:	3330      	adds	r3, #48	; 0x30
     ba6:	0936      	lsrs	r6, r6, #4
     ba8:	f808 3002 	strb.w	r3, [r8, r2]
     bac:	d009      	beq.n	bc2 <b2b_single_rx_message_check+0x29e>
     bae:	3a01      	subs	r2, #1
     bb0:	f006 030f 	and.w	r3, r6, #15
     bb4:	2b09      	cmp	r3, #9
     bb6:	d9f5      	bls.n	ba4 <b2b_single_rx_message_check+0x280>
     bb8:	3337      	adds	r3, #55	; 0x37
     bba:	0936      	lsrs	r6, r6, #4
     bbc:	f808 3002 	strb.w	r3, [r8, r2]
     bc0:	d1f5      	bne.n	bae <b2b_single_rx_message_check+0x28a>
     bc2:	f240 0064 	movw	r0, #100	; 0x64
     bc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     bca:	4641      	mov	r1, r8
     bcc:	2208      	movs	r2, #8
     bce:	f001 fb21 	bl	2214 <MSS_UART_polled_tx>
     bd2:	f240 0064 	movw	r0, #100	; 0x64
     bd6:	f642 616c 	movw	r1, #11884	; 0x2e6c
     bda:	f04f 3630 	mov.w	r6, #808464432	; 0x30303030
     bde:	f2c2 0000 	movt	r0, #8192	; 0x2000
     be2:	f2c0 0100 	movt	r1, #0
     be6:	f001 fb6b 	bl	22c0 <MSS_UART_polled_tx_string>
     bea:	f8c8 6004 	str.w	r6, [r8, #4]
     bee:	f8c8 6000 	str.w	r6, [r8]
     bf2:	b187      	cbz	r7, c16 <b2b_single_rx_message_check+0x2f2>
     bf4:	2207      	movs	r2, #7
     bf6:	e005      	b.n	c04 <b2b_single_rx_message_check+0x2e0>
     bf8:	3330      	adds	r3, #48	; 0x30
     bfa:	093f      	lsrs	r7, r7, #4
     bfc:	f808 3002 	strb.w	r3, [r8, r2]
     c00:	d009      	beq.n	c16 <b2b_single_rx_message_check+0x2f2>
     c02:	3a01      	subs	r2, #1
     c04:	f007 030f 	and.w	r3, r7, #15
     c08:	2b09      	cmp	r3, #9
     c0a:	d9f5      	bls.n	bf8 <b2b_single_rx_message_check+0x2d4>
     c0c:	3337      	adds	r3, #55	; 0x37
     c0e:	093f      	lsrs	r7, r7, #4
     c10:	f808 3002 	strb.w	r3, [r8, r2]
     c14:	d1f5      	bne.n	c02 <b2b_single_rx_message_check+0x2de>
     c16:	f240 0064 	movw	r0, #100	; 0x64
     c1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     c1e:	4641      	mov	r1, r8
     c20:	2208      	movs	r2, #8
     c22:	f001 faf7 	bl	2214 <MSS_UART_polled_tx>
     c26:	f04f 0b01 	mov.w	fp, #1
     c2a:	f240 030c 	movw	r3, #12
     c2e:	f2c5 0300 	movt	r3, #20480	; 0x5000
     c32:	681e      	ldr	r6, [r3, #0]
     c34:	42ae      	cmp	r6, r5
     c36:	f000 8084 	beq.w	d42 <b2b_single_rx_message_check+0x41e>
     c3a:	f240 0064 	movw	r0, #100	; 0x64
     c3e:	f642 6198 	movw	r1, #11928	; 0x2e98
     c42:	f2c2 0000 	movt	r0, #8192	; 0x2000
     c46:	f2c0 0100 	movt	r1, #0
     c4a:	f001 fb39 	bl	22c0 <MSS_UART_polled_tx_string>
     c4e:	f240 0064 	movw	r0, #100	; 0x64
     c52:	f642 6138 	movw	r1, #11832	; 0x2e38
     c56:	f2c2 0000 	movt	r0, #8192	; 0x2000
     c5a:	f2c0 0100 	movt	r1, #0
     c5e:	f001 fb2f 	bl	22c0 <MSS_UART_polled_tx_string>
     c62:	f240 0214 	movw	r2, #20
     c66:	f2c5 0200 	movt	r2, #20480	; 0x5000
     c6a:	6813      	ldr	r3, [r2, #0]
     c6c:	f04f 3730 	mov.w	r7, #808464432	; 0x30303030
     c70:	970d      	str	r7, [sp, #52]	; 0x34
     c72:	970c      	str	r7, [sp, #48]	; 0x30
     c74:	af0c      	add	r7, sp, #48	; 0x30
     c76:	b173      	cbz	r3, c96 <b2b_single_rx_message_check+0x372>
     c78:	2107      	movs	r1, #7
     c7a:	e004      	b.n	c86 <b2b_single_rx_message_check+0x362>
     c7c:	3230      	adds	r2, #48	; 0x30
     c7e:	091b      	lsrs	r3, r3, #4
     c80:	547a      	strb	r2, [r7, r1]
     c82:	d008      	beq.n	c96 <b2b_single_rx_message_check+0x372>
     c84:	3901      	subs	r1, #1
     c86:	f003 020f 	and.w	r2, r3, #15
     c8a:	2a09      	cmp	r2, #9
     c8c:	d9f6      	bls.n	c7c <b2b_single_rx_message_check+0x358>
     c8e:	3237      	adds	r2, #55	; 0x37
     c90:	091b      	lsrs	r3, r3, #4
     c92:	547a      	strb	r2, [r7, r1]
     c94:	d1f6      	bne.n	c84 <b2b_single_rx_message_check+0x360>
     c96:	f240 0064 	movw	r0, #100	; 0x64
     c9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     c9e:	4639      	mov	r1, r7
     ca0:	2208      	movs	r2, #8
     ca2:	f001 fab7 	bl	2214 <MSS_UART_polled_tx>
     ca6:	f240 0064 	movw	r0, #100	; 0x64
     caa:	f642 6158 	movw	r1, #11864	; 0x2e58
     cae:	f2c0 0100 	movt	r1, #0
     cb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     cb6:	f001 fb03 	bl	22c0 <MSS_UART_polled_tx_string>
     cba:	f04f 3130 	mov.w	r1, #808464432	; 0x30303030
     cbe:	6079      	str	r1, [r7, #4]
     cc0:	6039      	str	r1, [r7, #0]
     cc2:	b175      	cbz	r5, ce2 <b2b_single_rx_message_check+0x3be>
     cc4:	2207      	movs	r2, #7
     cc6:	e004      	b.n	cd2 <b2b_single_rx_message_check+0x3ae>
     cc8:	3330      	adds	r3, #48	; 0x30
     cca:	092d      	lsrs	r5, r5, #4
     ccc:	54bb      	strb	r3, [r7, r2]
     cce:	d008      	beq.n	ce2 <b2b_single_rx_message_check+0x3be>
     cd0:	3a01      	subs	r2, #1
     cd2:	f005 030f 	and.w	r3, r5, #15
     cd6:	2b09      	cmp	r3, #9
     cd8:	d9f6      	bls.n	cc8 <b2b_single_rx_message_check+0x3a4>
     cda:	3337      	adds	r3, #55	; 0x37
     cdc:	092d      	lsrs	r5, r5, #4
     cde:	54bb      	strb	r3, [r7, r2]
     ce0:	d1f6      	bne.n	cd0 <b2b_single_rx_message_check+0x3ac>
     ce2:	f240 0064 	movw	r0, #100	; 0x64
     ce6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     cea:	4639      	mov	r1, r7
     cec:	2208      	movs	r2, #8
     cee:	f001 fa91 	bl	2214 <MSS_UART_polled_tx>
     cf2:	f240 0064 	movw	r0, #100	; 0x64
     cf6:	f642 616c 	movw	r1, #11884	; 0x2e6c
     cfa:	f04f 3530 	mov.w	r5, #808464432	; 0x30303030
     cfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d02:	f2c0 0100 	movt	r1, #0
     d06:	f001 fadb 	bl	22c0 <MSS_UART_polled_tx_string>
     d0a:	607d      	str	r5, [r7, #4]
     d0c:	603d      	str	r5, [r7, #0]
     d0e:	b176      	cbz	r6, d2e <b2b_single_rx_message_check+0x40a>
     d10:	2207      	movs	r2, #7
     d12:	e004      	b.n	d1e <b2b_single_rx_message_check+0x3fa>
     d14:	3330      	adds	r3, #48	; 0x30
     d16:	0936      	lsrs	r6, r6, #4
     d18:	54bb      	strb	r3, [r7, r2]
     d1a:	d008      	beq.n	d2e <b2b_single_rx_message_check+0x40a>
     d1c:	3a01      	subs	r2, #1
     d1e:	f006 030f 	and.w	r3, r6, #15
     d22:	2b09      	cmp	r3, #9
     d24:	d9f6      	bls.n	d14 <b2b_single_rx_message_check+0x3f0>
     d26:	3337      	adds	r3, #55	; 0x37
     d28:	0936      	lsrs	r6, r6, #4
     d2a:	54bb      	strb	r3, [r7, r2]
     d2c:	d1f6      	bne.n	d1c <b2b_single_rx_message_check+0x3f8>
     d2e:	f240 0064 	movw	r0, #100	; 0x64
     d32:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d36:	4639      	mov	r1, r7
     d38:	2208      	movs	r2, #8
     d3a:	f001 fa6b 	bl	2214 <MSS_UART_polled_tx>
     d3e:	f04f 0b01 	mov.w	fp, #1
     d42:	f240 000c 	movw	r0, #12
     d46:	f2c5 0000 	movt	r0, #20480	; 0x5000
     d4a:	6805      	ldr	r5, [r0, #0]
     d4c:	42a5      	cmp	r5, r4
     d4e:	f000 8084 	beq.w	e5a <b2b_single_rx_message_check+0x536>
     d52:	f240 0064 	movw	r0, #100	; 0x64
     d56:	f642 61b0 	movw	r1, #11952	; 0x2eb0
     d5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d5e:	f2c0 0100 	movt	r1, #0
     d62:	f001 faad 	bl	22c0 <MSS_UART_polled_tx_string>
     d66:	f240 0064 	movw	r0, #100	; 0x64
     d6a:	f642 6138 	movw	r1, #11832	; 0x2e38
     d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d72:	f2c0 0100 	movt	r1, #0
     d76:	f001 faa3 	bl	22c0 <MSS_UART_polled_tx_string>
     d7a:	f240 0314 	movw	r3, #20
     d7e:	f2c5 0300 	movt	r3, #20480	; 0x5000
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	f04f 3630 	mov.w	r6, #808464432	; 0x30303030
     d88:	960d      	str	r6, [sp, #52]	; 0x34
     d8a:	960c      	str	r6, [sp, #48]	; 0x30
     d8c:	ae0c      	add	r6, sp, #48	; 0x30
     d8e:	b173      	cbz	r3, dae <b2b_single_rx_message_check+0x48a>
     d90:	2107      	movs	r1, #7
     d92:	e004      	b.n	d9e <b2b_single_rx_message_check+0x47a>
     d94:	3230      	adds	r2, #48	; 0x30
     d96:	091b      	lsrs	r3, r3, #4
     d98:	5472      	strb	r2, [r6, r1]
     d9a:	d008      	beq.n	dae <b2b_single_rx_message_check+0x48a>
     d9c:	3901      	subs	r1, #1
     d9e:	f003 020f 	and.w	r2, r3, #15
     da2:	2a09      	cmp	r2, #9
     da4:	d9f6      	bls.n	d94 <b2b_single_rx_message_check+0x470>
     da6:	3237      	adds	r2, #55	; 0x37
     da8:	091b      	lsrs	r3, r3, #4
     daa:	5472      	strb	r2, [r6, r1]
     dac:	d1f6      	bne.n	d9c <b2b_single_rx_message_check+0x478>
     dae:	f240 0064 	movw	r0, #100	; 0x64
     db2:	2208      	movs	r2, #8
     db4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     db8:	4631      	mov	r1, r6
     dba:	f001 fa2b 	bl	2214 <MSS_UART_polled_tx>
     dbe:	f240 0064 	movw	r0, #100	; 0x64
     dc2:	f642 6158 	movw	r1, #11864	; 0x2e58
     dc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     dca:	f2c0 0100 	movt	r1, #0
     dce:	f001 fa77 	bl	22c0 <MSS_UART_polled_tx_string>
     dd2:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
     dd6:	6072      	str	r2, [r6, #4]
     dd8:	6032      	str	r2, [r6, #0]
     dda:	b174      	cbz	r4, dfa <b2b_single_rx_message_check+0x4d6>
     ddc:	2207      	movs	r2, #7
     dde:	e004      	b.n	dea <b2b_single_rx_message_check+0x4c6>
     de0:	3330      	adds	r3, #48	; 0x30
     de2:	0924      	lsrs	r4, r4, #4
     de4:	54b3      	strb	r3, [r6, r2]
     de6:	d008      	beq.n	dfa <b2b_single_rx_message_check+0x4d6>
     de8:	3a01      	subs	r2, #1
     dea:	f004 030f 	and.w	r3, r4, #15
     dee:	2b09      	cmp	r3, #9
     df0:	d9f6      	bls.n	de0 <b2b_single_rx_message_check+0x4bc>
     df2:	3337      	adds	r3, #55	; 0x37
     df4:	0924      	lsrs	r4, r4, #4
     df6:	54b3      	strb	r3, [r6, r2]
     df8:	d1f6      	bne.n	de8 <b2b_single_rx_message_check+0x4c4>
     dfa:	f240 0064 	movw	r0, #100	; 0x64
     dfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e02:	4631      	mov	r1, r6
     e04:	2208      	movs	r2, #8
     e06:	f001 fa05 	bl	2214 <MSS_UART_polled_tx>
     e0a:	f240 0064 	movw	r0, #100	; 0x64
     e0e:	f642 616c 	movw	r1, #11884	; 0x2e6c
     e12:	f2c0 0100 	movt	r1, #0
     e16:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e1a:	f001 fa51 	bl	22c0 <MSS_UART_polled_tx_string>
     e1e:	f04f 3130 	mov.w	r1, #808464432	; 0x30303030
     e22:	6071      	str	r1, [r6, #4]
     e24:	6031      	str	r1, [r6, #0]
     e26:	b175      	cbz	r5, e46 <b2b_single_rx_message_check+0x522>
     e28:	2207      	movs	r2, #7
     e2a:	e004      	b.n	e36 <b2b_single_rx_message_check+0x512>
     e2c:	3330      	adds	r3, #48	; 0x30
     e2e:	092d      	lsrs	r5, r5, #4
     e30:	54b3      	strb	r3, [r6, r2]
     e32:	d008      	beq.n	e46 <b2b_single_rx_message_check+0x522>
     e34:	3a01      	subs	r2, #1
     e36:	f005 030f 	and.w	r3, r5, #15
     e3a:	2b09      	cmp	r3, #9
     e3c:	d9f6      	bls.n	e2c <b2b_single_rx_message_check+0x508>
     e3e:	3337      	adds	r3, #55	; 0x37
     e40:	092d      	lsrs	r5, r5, #4
     e42:	54b3      	strb	r3, [r6, r2]
     e44:	d1f6      	bne.n	e34 <b2b_single_rx_message_check+0x510>
     e46:	f240 0064 	movw	r0, #100	; 0x64
     e4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e4e:	4631      	mov	r1, r6
     e50:	2208      	movs	r2, #8
     e52:	f001 f9df 	bl	2214 <MSS_UART_polled_tx>
     e56:	f04f 0b01 	mov.w	fp, #1
     e5a:	f1b9 0905 	subs.w	r9, r9, #5
     e5e:	f000 80bf 	beq.w	fe0 <b2b_single_rx_message_check+0x6bc>
     e62:	f240 0c14 	movw	ip, #20
     e66:	f240 0a0c 	movw	sl, #12
     e6a:	f2c5 0c00 	movt	ip, #20480	; 0x5000
     e6e:	2730      	movs	r7, #48	; 0x30
     e70:	465b      	mov	r3, fp
     e72:	f2c5 0a00 	movt	sl, #20480	; 0x5000
     e76:	f04f 0800 	mov.w	r8, #0
     e7a:	eb0d 0607 	add.w	r6, sp, r7
     e7e:	46e3      	mov	fp, ip
     e80:	f8da 4000 	ldr.w	r4, [sl]
     e84:	f008 05ff 	and.w	r5, r8, #255	; 0xff
     e88:	42ac      	cmp	r4, r5
     e8a:	f000 80a3 	beq.w	fd4 <b2b_single_rx_message_check+0x6b0>
     e8e:	f240 0064 	movw	r0, #100	; 0x64
     e92:	f642 61c8 	movw	r1, #11976	; 0x2ec8
     e96:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e9a:	f2c0 0100 	movt	r1, #0
     e9e:	f001 fa0f 	bl	22c0 <MSS_UART_polled_tx_string>
     ea2:	f240 0064 	movw	r0, #100	; 0x64
     ea6:	f642 6138 	movw	r1, #11832	; 0x2e38
     eaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
     eae:	f2c0 0100 	movt	r1, #0
     eb2:	f001 fa05 	bl	22c0 <MSS_UART_polled_tx_string>
     eb6:	f8db 3000 	ldr.w	r3, [fp]
     eba:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
     ebe:	f88d 7031 	strb.w	r7, [sp, #49]	; 0x31
     ec2:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
     ec6:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
     eca:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
     ece:	f88d 7035 	strb.w	r7, [sp, #53]	; 0x35
     ed2:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
     ed6:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
     eda:	b173      	cbz	r3, efa <b2b_single_rx_message_check+0x5d6>
     edc:	2107      	movs	r1, #7
     ede:	e004      	b.n	eea <b2b_single_rx_message_check+0x5c6>
     ee0:	3230      	adds	r2, #48	; 0x30
     ee2:	091b      	lsrs	r3, r3, #4
     ee4:	5472      	strb	r2, [r6, r1]
     ee6:	d008      	beq.n	efa <b2b_single_rx_message_check+0x5d6>
     ee8:	3901      	subs	r1, #1
     eea:	f003 020f 	and.w	r2, r3, #15
     eee:	2a09      	cmp	r2, #9
     ef0:	d9f6      	bls.n	ee0 <b2b_single_rx_message_check+0x5bc>
     ef2:	3237      	adds	r2, #55	; 0x37
     ef4:	091b      	lsrs	r3, r3, #4
     ef6:	5472      	strb	r2, [r6, r1]
     ef8:	d1f6      	bne.n	ee8 <b2b_single_rx_message_check+0x5c4>
     efa:	f240 0064 	movw	r0, #100	; 0x64
     efe:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f02:	4631      	mov	r1, r6
     f04:	2208      	movs	r2, #8
     f06:	f001 f985 	bl	2214 <MSS_UART_polled_tx>
     f0a:	f240 0064 	movw	r0, #100	; 0x64
     f0e:	f642 6158 	movw	r1, #11864	; 0x2e58
     f12:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f16:	f2c0 0100 	movt	r1, #0
     f1a:	f001 f9d1 	bl	22c0 <MSS_UART_polled_tx_string>
     f1e:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
     f22:	f88d 7031 	strb.w	r7, [sp, #49]	; 0x31
     f26:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
     f2a:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
     f2e:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
     f32:	f88d 7035 	strb.w	r7, [sp, #53]	; 0x35
     f36:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
     f3a:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
     f3e:	b175      	cbz	r5, f5e <b2b_single_rx_message_check+0x63a>
     f40:	2207      	movs	r2, #7
     f42:	e004      	b.n	f4e <b2b_single_rx_message_check+0x62a>
     f44:	3330      	adds	r3, #48	; 0x30
     f46:	092d      	lsrs	r5, r5, #4
     f48:	54b3      	strb	r3, [r6, r2]
     f4a:	d008      	beq.n	f5e <b2b_single_rx_message_check+0x63a>
     f4c:	3a01      	subs	r2, #1
     f4e:	f005 030f 	and.w	r3, r5, #15
     f52:	2b09      	cmp	r3, #9
     f54:	d9f6      	bls.n	f44 <b2b_single_rx_message_check+0x620>
     f56:	3337      	adds	r3, #55	; 0x37
     f58:	092d      	lsrs	r5, r5, #4
     f5a:	54b3      	strb	r3, [r6, r2]
     f5c:	d1f6      	bne.n	f4c <b2b_single_rx_message_check+0x628>
     f5e:	f240 0064 	movw	r0, #100	; 0x64
     f62:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f66:	4631      	mov	r1, r6
     f68:	2208      	movs	r2, #8
     f6a:	f001 f953 	bl	2214 <MSS_UART_polled_tx>
     f6e:	f240 0064 	movw	r0, #100	; 0x64
     f72:	f642 616c 	movw	r1, #11884	; 0x2e6c
     f76:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f7a:	f2c0 0100 	movt	r1, #0
     f7e:	f001 f99f 	bl	22c0 <MSS_UART_polled_tx_string>
     f82:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
     f86:	f88d 7031 	strb.w	r7, [sp, #49]	; 0x31
     f8a:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
     f8e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
     f92:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
     f96:	f88d 7035 	strb.w	r7, [sp, #53]	; 0x35
     f9a:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
     f9e:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
     fa2:	b174      	cbz	r4, fc2 <b2b_single_rx_message_check+0x69e>
     fa4:	2207      	movs	r2, #7
     fa6:	e004      	b.n	fb2 <b2b_single_rx_message_check+0x68e>
     fa8:	3330      	adds	r3, #48	; 0x30
     faa:	0924      	lsrs	r4, r4, #4
     fac:	54b3      	strb	r3, [r6, r2]
     fae:	d008      	beq.n	fc2 <b2b_single_rx_message_check+0x69e>
     fb0:	3a01      	subs	r2, #1
     fb2:	f004 030f 	and.w	r3, r4, #15
     fb6:	2b09      	cmp	r3, #9
     fb8:	d9f6      	bls.n	fa8 <b2b_single_rx_message_check+0x684>
     fba:	3337      	adds	r3, #55	; 0x37
     fbc:	0924      	lsrs	r4, r4, #4
     fbe:	54b3      	strb	r3, [r6, r2]
     fc0:	d1f6      	bne.n	fb0 <b2b_single_rx_message_check+0x68c>
     fc2:	f240 0064 	movw	r0, #100	; 0x64
     fc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     fca:	4631      	mov	r1, r6
     fcc:	2208      	movs	r2, #8
     fce:	f001 f921 	bl	2214 <MSS_UART_polled_tx>
     fd2:	2301      	movs	r3, #1
     fd4:	f108 0801 	add.w	r8, r8, #1
     fd8:	45c8      	cmp	r8, r9
     fda:	f4ff af51 	bcc.w	e80 <b2b_single_rx_message_check+0x55c>
     fde:	469b      	mov	fp, r3
     fe0:	f240 010c 	movw	r1, #12
     fe4:	f2c5 0100 	movt	r1, #20480	; 0x5000
     fe8:	680a      	ldr	r2, [r1, #0]
     fea:	680b      	ldr	r3, [r1, #0]
     fec:	f1bb 0f00 	cmp.w	fp, #0
     ff0:	d102      	bne.n	ff8 <b2b_single_rx_message_check+0x6d4>
     ff2:	b00f      	add	sp, #60	; 0x3c
     ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ff8:	f240 0064 	movw	r0, #100	; 0x64
     ffc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1000:	a905      	add	r1, sp, #20
    1002:	221b      	movs	r2, #27
    1004:	f001 f906 	bl	2214 <MSS_UART_polled_tx>
    1008:	4658      	mov	r0, fp
    100a:	e7f2      	b.n	ff2 <b2b_single_rx_message_check+0x6ce>

0000100c <main>:
    100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1010:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
    1014:	b083      	sub	sp, #12
    1016:	f50d 628e 	add.w	r2, sp, #1136	; 0x470
    101a:	320c      	adds	r2, #12
    101c:	9201      	str	r2, [sp, #4]
    101e:	9b01      	ldr	r3, [sp, #4]
    1020:	f243 549c 	movw	r4, #13724	; 0x359c
    1024:	f2c0 0400 	movt	r4, #0
    1028:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    102c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1030:	f001 fc9a 	bl	2968 <MSS_GPIO_init>
    1034:	2000      	movs	r0, #0
    1036:	2103      	movs	r1, #3
    1038:	f001 fce2 	bl	2a00 <MSS_GPIO_config>
    103c:	2001      	movs	r0, #1
    103e:	2105      	movs	r1, #5
    1040:	f001 fcde 	bl	2a00 <MSS_GPIO_config>
    1044:	2002      	movs	r0, #2
    1046:	4601      	mov	r1, r0
    1048:	f001 fcda 	bl	2a00 <MSS_GPIO_config>
    104c:	2003      	movs	r0, #3
    104e:	4601      	mov	r1, r0
    1050:	f001 fcd6 	bl	2a00 <MSS_GPIO_config>
    1054:	2004      	movs	r0, #4
    1056:	2103      	movs	r1, #3
    1058:	f001 fcd2 	bl	2a00 <MSS_GPIO_config>
    105c:	2005      	movs	r0, #5
    105e:	4601      	mov	r1, r0
    1060:	f001 fcce 	bl	2a00 <MSS_GPIO_config>
    1064:	2006      	movs	r0, #6
    1066:	2105      	movs	r1, #5
    1068:	f001 fcca 	bl	2a00 <MSS_GPIO_config>
    106c:	2007      	movs	r0, #7
    106e:	2105      	movs	r1, #5
    1070:	f001 fcc6 	bl	2a00 <MSS_GPIO_config>
    1074:	2008      	movs	r0, #8
    1076:	2105      	movs	r1, #5
    1078:	f001 fcc2 	bl	2a00 <MSS_GPIO_config>
    107c:	2009      	movs	r0, #9
    107e:	2102      	movs	r1, #2
    1080:	f001 fcbe 	bl	2a00 <MSS_GPIO_config>
    1084:	200a      	movs	r0, #10
    1086:	2102      	movs	r1, #2
    1088:	f001 fcba 	bl	2a00 <MSS_GPIO_config>
    108c:	200b      	movs	r0, #11
    108e:	2105      	movs	r1, #5
    1090:	f001 fcb6 	bl	2a00 <MSS_GPIO_config>
    1094:	200c      	movs	r0, #12
    1096:	2103      	movs	r1, #3
    1098:	f001 fcb2 	bl	2a00 <MSS_GPIO_config>
    109c:	200d      	movs	r0, #13
    109e:	2105      	movs	r1, #5
    10a0:	f001 fcae 	bl	2a00 <MSS_GPIO_config>
    10a4:	200e      	movs	r0, #14
    10a6:	2103      	movs	r1, #3
    10a8:	f001 fcaa 	bl	2a00 <MSS_GPIO_config>
    10ac:	200f      	movs	r0, #15
    10ae:	2103      	movs	r1, #3
    10b0:	f001 fca6 	bl	2a00 <MSS_GPIO_config>
    10b4:	2010      	movs	r0, #16
    10b6:	2103      	movs	r1, #3
    10b8:	f001 fca2 	bl	2a00 <MSS_GPIO_config>
    10bc:	2011      	movs	r0, #17
    10be:	2103      	movs	r1, #3
    10c0:	f001 fc9e 	bl	2a00 <MSS_GPIO_config>
    10c4:	2012      	movs	r0, #18
    10c6:	2103      	movs	r1, #3
    10c8:	f001 fc9a 	bl	2a00 <MSS_GPIO_config>
    10cc:	2013      	movs	r0, #19
    10ce:	2102      	movs	r1, #2
    10d0:	f001 fc96 	bl	2a00 <MSS_GPIO_config>
    10d4:	2014      	movs	r0, #20
    10d6:	2105      	movs	r1, #5
    10d8:	f001 fc92 	bl	2a00 <MSS_GPIO_config>
    10dc:	2015      	movs	r0, #21
    10de:	2105      	movs	r1, #5
    10e0:	f001 fc8e 	bl	2a00 <MSS_GPIO_config>
    10e4:	2016      	movs	r0, #22
    10e6:	2105      	movs	r1, #5
    10e8:	f001 fc8a 	bl	2a00 <MSS_GPIO_config>
    10ec:	2018      	movs	r0, #24
    10ee:	2105      	movs	r1, #5
    10f0:	f001 fc86 	bl	2a00 <MSS_GPIO_config>
    10f4:	2019      	movs	r0, #25
    10f6:	2103      	movs	r1, #3
    10f8:	f001 fc82 	bl	2a00 <MSS_GPIO_config>
    10fc:	201a      	movs	r0, #26
    10fe:	2103      	movs	r1, #3
    1100:	f001 fc7e 	bl	2a00 <MSS_GPIO_config>
    1104:	201c      	movs	r0, #28
    1106:	2105      	movs	r1, #5
    1108:	f001 fc7a 	bl	2a00 <MSS_GPIO_config>
    110c:	201f      	movs	r0, #31
    110e:	2103      	movs	r1, #3
    1110:	f001 fc76 	bl	2a00 <MSS_GPIO_config>
    1114:	f240 0064 	movw	r0, #100	; 0x64
    1118:	2203      	movs	r2, #3
    111a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    111e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    1122:	f001 fbf1 	bl	2908 <MSS_UART_init>
    1126:	f240 0064 	movw	r0, #100	; 0x64
    112a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    112e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1132:	f2c0 0100 	movt	r1, #0
    1136:	f001 f8c3 	bl	22c0 <MSS_UART_polled_tx_string>
    113a:	f243 0500 	movw	r5, #12288	; 0x3000
    113e:	f240 0064 	movw	r0, #100	; 0x64
    1142:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    1146:	310c      	adds	r1, #12
    1148:	220c      	movs	r2, #12
    114a:	f2c4 0501 	movt	r5, #16385	; 0x4001
    114e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1152:	f001 f85f 	bl	2214 <MSS_UART_polled_tx>
    1156:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
    115a:	f640 0300 	movw	r3, #2048	; 0x800
    115e:	f021 5b80 	bic.w	fp, r1, #268435456	; 0x10000000
    1162:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1166:	f8c5 b088 	str.w	fp, [r5, #136]	; 0x88
    116a:	2200      	movs	r2, #0
    116c:	f242 75de 	movw	r5, #10206	; 0x27de
    1170:	601a      	str	r2, [r3, #0]
    1172:	609d      	str	r5, [r3, #8]
    1174:	f240 350f 	movw	r5, #783	; 0x30f
    1178:	60dd      	str	r5, [r3, #12]
    117a:	f04f 0a02 	mov.w	sl, #2
    117e:	25c1      	movs	r5, #193	; 0xc1
    1180:	f8c3 a010 	str.w	sl, [r3, #16]
    1184:	615a      	str	r2, [r3, #20]
    1186:	619d      	str	r5, [r3, #24]
    1188:	f640 159f 	movw	r5, #2463	; 0x99f
    118c:	61dd      	str	r5, [r3, #28]
    118e:	f243 3533 	movw	r5, #13107	; 0x3333
    1192:	621a      	str	r2, [r3, #32]
    1194:	625d      	str	r5, [r3, #36]	; 0x24
    1196:	f64f 75ff 	movw	r5, #65535	; 0xffff
    119a:	629d      	str	r5, [r3, #40]	; 0x28
    119c:	f247 7577 	movw	r5, #30583	; 0x7777
    11a0:	62dd      	str	r5, [r3, #44]	; 0x2c
    11a2:	f640 75ff 	movw	r5, #4095	; 0xfff
    11a6:	631d      	str	r5, [r3, #48]	; 0x30
    11a8:	2101      	movs	r1, #1
    11aa:	f244 2542 	movw	r5, #16962	; 0x4242
    11ae:	6359      	str	r1, [r3, #52]	; 0x34
    11b0:	639d      	str	r5, [r3, #56]	; 0x38
    11b2:	2508      	movs	r5, #8
    11b4:	63dd      	str	r5, [r3, #60]	; 0x3c
    11b6:	f04f 0933 	mov.w	r9, #51	; 0x33
    11ba:	3518      	adds	r5, #24
    11bc:	f8c3 9040 	str.w	r9, [r3, #64]	; 0x40
    11c0:	645d      	str	r5, [r3, #68]	; 0x44
    11c2:	35a0      	adds	r5, #160	; 0xa0
    11c4:	649a      	str	r2, [r3, #72]	; 0x48
    11c6:	64da      	str	r2, [r3, #76]	; 0x4c
    11c8:	651d      	str	r5, [r3, #80]	; 0x50
    11ca:	3d9d      	subs	r5, #157	; 0x9d
    11cc:	655d      	str	r5, [r3, #84]	; 0x54
    11ce:	f240 2535 	movw	r5, #565	; 0x235
    11d2:	659d      	str	r5, [r3, #88]	; 0x58
    11d4:	2564      	movs	r5, #100	; 0x64
    11d6:	65dd      	str	r5, [r3, #92]	; 0x5c
    11d8:	2040      	movs	r0, #64	; 0x40
    11da:	2403      	movs	r4, #3
    11dc:	35a4      	adds	r5, #164	; 0xa4
    11de:	661d      	str	r5, [r3, #96]	; 0x60
    11e0:	3570      	adds	r5, #112	; 0x70
    11e2:	665d      	str	r5, [r3, #100]	; 0x64
    11e4:	f641 1547 	movw	r5, #6471	; 0x1947
    11e8:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68
    11ec:	66dd      	str	r5, [r3, #108]	; 0x6c
    11ee:	2510      	movs	r5, #16
    11f0:	671d      	str	r5, [r3, #112]	; 0x70
    11f2:	f44f 554c 	mov.w	r5, #13056	; 0x3300
    11f6:	675a      	str	r2, [r3, #116]	; 0x74
    11f8:	679d      	str	r5, [r3, #120]	; 0x78
    11fa:	f240 5514 	movw	r5, #1300	; 0x514
    11fe:	f44f 7c00 	mov.w	ip, #512	; 0x200
    1202:	67da      	str	r2, [r3, #124]	; 0x7c
    1204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1208:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
    120c:	2512      	movs	r5, #18
    120e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1212:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
    1216:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
    121a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
    121e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    1222:	f8c3 a098 	str.w	sl, [r3, #152]	; 0x98
    1226:	f248 08f8 	movw	r8, #33016	; 0x80f8
    122a:	f8c3 509c 	str.w	r5, [r3, #156]	; 0x9c
    122e:	f04f 0e07 	mov.w	lr, #7
    1232:	f240 3509 	movw	r5, #777	; 0x309
    1236:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
    123a:	f8c3 e0a4 	str.w	lr, [r3, #164]	; 0xa4
    123e:	f8c3 80a8 	str.w	r8, [r3, #168]	; 0xa8
    1242:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
    1246:	f8c3 c0b0 	str.w	ip, [r3, #176]	; 0xb0
    124a:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
    124e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    1252:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    1256:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
    125a:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
    125e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    1262:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    1266:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    126a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    126e:	f8c3 50d8 	str.w	r5, [r3, #216]	; 0xd8
    1272:	2580      	movs	r5, #128	; 0x80
    1274:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    1278:	f240 4701 	movw	r7, #1025	; 0x401
    127c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    1280:	f244 0610 	movw	r6, #16400	; 0x4010
    1284:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    1288:	f8c3 5224 	str.w	r5, [r3, #548]	; 0x224
    128c:	3d75      	subs	r5, #117	; 0x75
    128e:	f8c3 4230 	str.w	r4, [r3, #560]	; 0x230
    1292:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    1296:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    129a:	f8c3 5248 	str.w	r5, [r3, #584]	; 0x248
    129e:	f8c3 025c 	str.w	r0, [r3, #604]	; 0x25c
    12a2:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
    12a6:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
    12aa:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    12ae:	3221      	adds	r2, #33	; 0x21
    12b0:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    12b4:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
    12b8:	f8c3 729c 	str.w	r7, [r3, #668]	; 0x29c
    12bc:	f8c3 62a0 	str.w	r6, [r3, #672]	; 0x2a0
    12c0:	f8c3 02d8 	str.w	r0, [r3, #728]	; 0x2d8
    12c4:	f8c3 72dc 	str.w	r7, [r3, #732]	; 0x2dc
    12c8:	f8c3 62e0 	str.w	r6, [r3, #736]	; 0x2e0
    12cc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    12d0:	3a18      	subs	r2, #24
    12d2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    12d6:	469b      	mov	fp, r3
    12d8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    12dc:	f8c3 130c 	str.w	r1, [r3, #780]	; 0x30c
    12e0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
    12e4:	f8c3 131c 	str.w	r1, [r3, #796]	; 0x31c
    12e8:	6019      	str	r1, [r3, #0]
    12ea:	f8db 60e4 	ldr.w	r6, [fp, #228]	; 0xe4
    12ee:	2e00      	cmp	r6, #0
    12f0:	d0fb      	beq.n	12ea <main+0x2de>
    12f2:	f240 0310 	movw	r3, #16
    12f6:	f2c5 0300 	movt	r3, #20480	; 0x5000
    12fa:	2710      	movs	r7, #16
    12fc:	f240 0014 	movw	r0, #20
    1300:	f240 0130 	movw	r1, #48	; 0x30
    1304:	601f      	str	r7, [r3, #0]
    1306:	f642 44b0 	movw	r4, #11440	; 0x2cb0
    130a:	2602      	movs	r6, #2
    130c:	f240 0234 	movw	r2, #52	; 0x34
    1310:	f2c5 0000 	movt	r0, #20480	; 0x5000
    1314:	f2c5 0100 	movt	r1, #20480	; 0x5000
    1318:	f642 4eb0 	movw	lr, #11440	; 0x2cb0
    131c:	6800      	ldr	r0, [r0, #0]
    131e:	9404      	str	r4, [sp, #16]
    1320:	600e      	str	r6, [r1, #0]
    1322:	2500      	movs	r5, #0
    1324:	f2c5 0200 	movt	r2, #20480	; 0x5000
    1328:	f642 4794 	movw	r7, #11412	; 0x2c94
    132c:	f240 040c 	movw	r4, #12
    1330:	20a9      	movs	r0, #169	; 0xa9
    1332:	f2c0 0e00 	movt	lr, #0
    1336:	f50d 6688 	add.w	r6, sp, #1088	; 0x440
    133a:	f50d 6c8d 	add.w	ip, sp, #1128	; 0x468
    133e:	6010      	str	r0, [r2, #0]
    1340:	f2c0 0700 	movt	r7, #0
    1344:	601d      	str	r5, [r3, #0]
    1346:	f8cd e010 	str.w	lr, [sp, #16]
    134a:	f2c5 0400 	movt	r4, #20480	; 0x5000
    134e:	f04f 0a08 	mov.w	sl, #8
    1352:	360c      	adds	r6, #12
    1354:	f8cd c000 	str.w	ip, [sp]
    1358:	ad13      	add	r5, sp, #76	; 0x4c
    135a:	f240 0064 	movw	r0, #100	; 0x64
    135e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1362:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1366:	4629      	mov	r1, r5
    1368:	f000 ffe8 	bl	233c <MSS_UART_get_rx>
    136c:	f895 8000 	ldrb.w	r8, [r5]
    1370:	4602      	mov	r2, r0
    1372:	2800      	cmp	r0, #0
    1374:	d0f0      	beq.n	1358 <main+0x34c>
    1376:	f240 0064 	movw	r0, #100	; 0x64
    137a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    137e:	4629      	mov	r1, r5
    1380:	f1a8 0831 	sub.w	r8, r8, #49	; 0x31
    1384:	f000 ff46 	bl	2214 <MSS_UART_polled_tx>
    1388:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
    138c:	f200 8440 	bhi.w	1c10 <main+0xc04>
    1390:	e8df f018 	tbh	[pc, r8, lsl #1]
    1394:	0424042d 	.word	0x0424042d
    1398:	03fb040f 	.word	0x03fb040f
    139c:	02ce0368 	.word	0x02ce0368
    13a0:	055902ba 	.word	0x055902ba
    13a4:	043e04ce 	.word	0x043e04ce
    13a8:	043e043e 	.word	0x043e043e
    13ac:	043e043e 	.word	0x043e043e
    13b0:	043e043e 	.word	0x043e043e
    13b4:	043e043e 	.word	0x043e043e
    13b8:	043e043e 	.word	0x043e043e
    13bc:	043e043e 	.word	0x043e043e
    13c0:	043e043e 	.word	0x043e043e
    13c4:	043e043e 	.word	0x043e043e
    13c8:	043e043e 	.word	0x043e043e
    13cc:	043e043e 	.word	0x043e043e
    13d0:	043e043e 	.word	0x043e043e
    13d4:	043e043e 	.word	0x043e043e
    13d8:	043e043e 	.word	0x043e043e
    13dc:	043e043e 	.word	0x043e043e
    13e0:	043e043e 	.word	0x043e043e
    13e4:	043e043e 	.word	0x043e043e
    13e8:	043e043e 	.word	0x043e043e
    13ec:	043e043e 	.word	0x043e043e
    13f0:	043e043e 	.word	0x043e043e
    13f4:	04490471 	.word	0x04490471
    13f8:	05df0618 	.word	0x05df0618
    13fc:	029d0682 	.word	0x029d0682
    1400:	043e0181 	.word	0x043e0181
    1404:	003a0115 	.word	0x003a0115
    1408:	f240 0064 	movw	r0, #100	; 0x64
    140c:	f243 5158 	movw	r1, #13656	; 0x3558
    1410:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1414:	f2c0 0100 	movt	r1, #0
    1418:	f000 ff52 	bl	22c0 <MSS_UART_polled_tx_string>
    141c:	f240 0130 	movw	r1, #48	; 0x30
    1420:	f240 0234 	movw	r2, #52	; 0x34
    1424:	f2c5 0200 	movt	r2, #20480	; 0x5000
    1428:	2302      	movs	r3, #2
    142a:	f240 0510 	movw	r5, #16
    142e:	f2c5 0100 	movt	r1, #20480	; 0x5000
    1432:	20a9      	movs	r0, #169	; 0xa9
    1434:	f2c5 0500 	movt	r5, #20480	; 0x5000
    1438:	600b      	str	r3, [r1, #0]
    143a:	f8dd a010 	ldr.w	sl, [sp, #16]
    143e:	6010      	str	r0, [r2, #0]
    1440:	1e9a      	subs	r2, r3, #2
    1442:	602a      	str	r2, [r5, #0]
    1444:	4690      	mov	r8, r2
    1446:	2503      	movs	r5, #3
    1448:	46bb      	mov	fp, r7
    144a:	46b1      	mov	r9, r6
    144c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    1450:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    1454:	464b      	mov	r3, r9
    1456:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
    145a:	c303      	stmia	r3!, {r0, r1}
    145c:	f8dd c000 	ldr.w	ip, [sp]
    1460:	801a      	strh	r2, [r3, #0]
    1462:	46d6      	mov	lr, sl
    1464:	ea4f 4b12 	mov.w	fp, r2, lsr #16
    1468:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    146c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1470:	f8be 9000 	ldrh.w	r9, [lr]
    1474:	4660      	mov	r0, ip
    1476:	f8a0 9000 	strh.w	r9, [r0]
    147a:	f886 b01a 	strb.w	fp, [r6, #26]
    147e:	6820      	ldr	r0, [r4, #0]
    1480:	6823      	ldr	r3, [r4, #0]
    1482:	1d69      	adds	r1, r5, #5
    1484:	2b40      	cmp	r3, #64	; 0x40
    1486:	f000 8679 	beq.w	217c <main+0x1170>
    148a:	2001      	movs	r0, #1
    148c:	6823      	ldr	r3, [r4, #0]
    148e:	6822      	ldr	r2, [r4, #0]
    1490:	2b00      	cmp	r3, #0
    1492:	bf0c      	ite	eq
    1494:	4684      	moveq	ip, r0
    1496:	f04f 0c01 	movne.w	ip, #1
    149a:	f001 0eff 	and.w	lr, r1, #255	; 0xff
    149e:	6820      	ldr	r0, [r4, #0]
    14a0:	4596      	cmp	lr, r2
    14a2:	bf0c      	ite	eq
    14a4:	4662      	moveq	r2, ip
    14a6:	2201      	movne	r2, #1
    14a8:	2301      	movs	r3, #1
    14aa:	1e69      	subs	r1, r5, #1
    14ac:	2800      	cmp	r0, #0
    14ae:	bf18      	it	ne
    14b0:	461a      	movne	r2, r3
    14b2:	42ab      	cmp	r3, r5
    14b4:	f001 0103 	and.w	r1, r1, #3
    14b8:	d23f      	bcs.n	153a <main+0x52e>
    14ba:	b1c1      	cbz	r1, 14ee <main+0x4e2>
    14bc:	2901      	cmp	r1, #1
    14be:	d00d      	beq.n	14dc <main+0x4d0>
    14c0:	2902      	cmp	r1, #2
    14c2:	d004      	beq.n	14ce <main+0x4c2>
    14c4:	6821      	ldr	r1, [r4, #0]
    14c6:	4299      	cmp	r1, r3
    14c8:	bf18      	it	ne
    14ca:	2201      	movne	r2, #1
    14cc:	2302      	movs	r3, #2
    14ce:	6820      	ldr	r0, [r4, #0]
    14d0:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    14d4:	4558      	cmp	r0, fp
    14d6:	bf18      	it	ne
    14d8:	2201      	movne	r2, #1
    14da:	3301      	adds	r3, #1
    14dc:	6820      	ldr	r0, [r4, #0]
    14de:	f003 09ff 	and.w	r9, r3, #255	; 0xff
    14e2:	3301      	adds	r3, #1
    14e4:	4548      	cmp	r0, r9
    14e6:	bf18      	it	ne
    14e8:	2201      	movne	r2, #1
    14ea:	42ab      	cmp	r3, r5
    14ec:	d225      	bcs.n	153a <main+0x52e>
    14ee:	f8d4 e000 	ldr.w	lr, [r4]
    14f2:	1c59      	adds	r1, r3, #1
    14f4:	f8d4 b000 	ldr.w	fp, [r4]
    14f8:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    14fc:	45e6      	cmp	lr, ip
    14fe:	bf18      	it	ne
    1500:	2201      	movne	r2, #1
    1502:	1c48      	adds	r0, r1, #1
    1504:	f001 09ff 	and.w	r9, r1, #255	; 0xff
    1508:	f8d4 e000 	ldr.w	lr, [r4]
    150c:	45cb      	cmp	fp, r9
    150e:	bf0c      	ite	eq
    1510:	4694      	moveq	ip, r2
    1512:	f04f 0c01 	movne.w	ip, #1
    1516:	f000 01ff 	and.w	r1, r0, #255	; 0xff
    151a:	1cda      	adds	r2, r3, #3
    151c:	6820      	ldr	r0, [r4, #0]
    151e:	458e      	cmp	lr, r1
    1520:	bf0c      	ite	eq
    1522:	46e1      	moveq	r9, ip
    1524:	f04f 0901 	movne.w	r9, #1
    1528:	f002 0bff 	and.w	fp, r2, #255	; 0xff
    152c:	3304      	adds	r3, #4
    152e:	4558      	cmp	r0, fp
    1530:	bf0c      	ite	eq
    1532:	464a      	moveq	r2, r9
    1534:	2201      	movne	r2, #1
    1536:	42ab      	cmp	r3, r5
    1538:	d3d9      	bcc.n	14ee <main+0x4e2>
    153a:	f240 0064 	movw	r0, #100	; 0x64
    153e:	2a01      	cmp	r2, #1
    1540:	6823      	ldr	r3, [r4, #0]
    1542:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1546:	6823      	ldr	r3, [r4, #0]
    1548:	f000 8642 	beq.w	21d0 <main+0x11c4>
    154c:	f50d 618d 	add.w	r1, sp, #1128	; 0x468
    1550:	2212      	movs	r2, #18
    1552:	f000 fe5f 	bl	2214 <MSS_UART_polled_tx>
    1556:	3501      	adds	r5, #1
    1558:	2d12      	cmp	r5, #18
    155a:	f47f af75 	bne.w	1448 <main+0x43c>
    155e:	f1b8 0f00 	cmp.w	r8, #0
    1562:	d109      	bne.n	1578 <main+0x56c>
    1564:	f240 0064 	movw	r0, #100	; 0x64
    1568:	f642 41c4 	movw	r1, #11460	; 0x2cc4
    156c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1570:	f2c0 0100 	movt	r1, #0
    1574:	f000 fea4 	bl	22c0 <MSS_UART_polled_tx_string>
    1578:	f240 0064 	movw	r0, #100	; 0x64
    157c:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1584:	f2c0 0100 	movt	r1, #0
    1588:	f000 fe9a 	bl	22c0 <MSS_UART_polled_tx_string>
    158c:	f240 0064 	movw	r0, #100	; 0x64
    1590:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    1594:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1598:	220c      	movs	r2, #12
    159a:	310c      	adds	r1, #12
    159c:	f000 fe3a 	bl	2214 <MSS_UART_polled_tx>
    15a0:	f240 0230 	movw	r2, #48	; 0x30
    15a4:	f240 0334 	movw	r3, #52	; 0x34
    15a8:	f2c5 0200 	movt	r2, #20480	; 0x5000
    15ac:	f2c5 0300 	movt	r3, #20480	; 0x5000
    15b0:	2002      	movs	r0, #2
    15b2:	25a9      	movs	r5, #169	; 0xa9
    15b4:	6010      	str	r0, [r2, #0]
    15b6:	f04f 0a08 	mov.w	sl, #8
    15ba:	601d      	str	r5, [r3, #0]
    15bc:	e6cc      	b.n	1358 <main+0x34c>
    15be:	f240 0064 	movw	r0, #100	; 0x64
    15c2:	f243 5134 	movw	r1, #13620	; 0x3534
    15c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    15ca:	f2c0 0100 	movt	r1, #0
    15ce:	f000 fe77 	bl	22c0 <MSS_UART_polled_tx_string>
    15d2:	2008      	movs	r0, #8
    15d4:	2100      	movs	r1, #0
    15d6:	2201      	movs	r2, #1
    15d8:	f7fe ff8a 	bl	4f0 <T.38>
    15dc:	2009      	movs	r0, #9
    15de:	2100      	movs	r1, #0
    15e0:	2201      	movs	r2, #1
    15e2:	f7fe ff85 	bl	4f0 <T.38>
    15e6:	200a      	movs	r0, #10
    15e8:	2100      	movs	r1, #0
    15ea:	2201      	movs	r2, #1
    15ec:	f7fe ff80 	bl	4f0 <T.38>
    15f0:	200b      	movs	r0, #11
    15f2:	2100      	movs	r1, #0
    15f4:	2201      	movs	r2, #1
    15f6:	f7fe ff7b 	bl	4f0 <T.38>
    15fa:	200c      	movs	r0, #12
    15fc:	2100      	movs	r1, #0
    15fe:	2201      	movs	r2, #1
    1600:	f7fe ff76 	bl	4f0 <T.38>
    1604:	200d      	movs	r0, #13
    1606:	2100      	movs	r1, #0
    1608:	2201      	movs	r2, #1
    160a:	f7fe ff71 	bl	4f0 <T.38>
    160e:	200e      	movs	r0, #14
    1610:	2100      	movs	r1, #0
    1612:	2201      	movs	r2, #1
    1614:	f7fe ff6c 	bl	4f0 <T.38>
    1618:	2100      	movs	r1, #0
    161a:	2201      	movs	r2, #1
    161c:	200f      	movs	r0, #15
    161e:	f7fe ff67 	bl	4f0 <T.38>
    1622:	2010      	movs	r0, #16
    1624:	2100      	movs	r1, #0
    1626:	2201      	movs	r2, #1
    1628:	f7fe ff62 	bl	4f0 <T.38>
    162c:	2011      	movs	r0, #17
    162e:	2100      	movs	r1, #0
    1630:	2201      	movs	r2, #1
    1632:	f7fe ff5d 	bl	4f0 <T.38>
    1636:	2012      	movs	r0, #18
    1638:	2100      	movs	r1, #0
    163a:	2201      	movs	r2, #1
    163c:	f7fe ff58 	bl	4f0 <T.38>
    1640:	2013      	movs	r0, #19
    1642:	2100      	movs	r1, #0
    1644:	2201      	movs	r2, #1
    1646:	f7fe ff53 	bl	4f0 <T.38>
    164a:	2014      	movs	r0, #20
    164c:	2100      	movs	r1, #0
    164e:	2201      	movs	r2, #1
    1650:	f7fe ff4e 	bl	4f0 <T.38>
    1654:	2015      	movs	r0, #21
    1656:	2100      	movs	r1, #0
    1658:	2201      	movs	r2, #1
    165a:	f7fe ff49 	bl	4f0 <T.38>
    165e:	2201      	movs	r2, #1
    1660:	2016      	movs	r0, #22
    1662:	2100      	movs	r1, #0
    1664:	f7fe ff44 	bl	4f0 <T.38>
    1668:	f240 0064 	movw	r0, #100	; 0x64
    166c:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1670:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1674:	f2c0 0100 	movt	r1, #0
    1678:	f000 fe22 	bl	22c0 <MSS_UART_polled_tx_string>
    167c:	f240 0064 	movw	r0, #100	; 0x64
    1680:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    1684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1688:	310c      	adds	r1, #12
    168a:	220c      	movs	r2, #12
    168c:	f000 fdc2 	bl	2214 <MSS_UART_polled_tx>
    1690:	f04f 0a08 	mov.w	sl, #8
    1694:	e660      	b.n	1358 <main+0x34c>
    1696:	f240 0064 	movw	r0, #100	; 0x64
    169a:	f243 5114 	movw	r1, #13588	; 0x3514
    169e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    16a2:	f2c0 0100 	movt	r1, #0
    16a6:	f000 fe0b 	bl	22c0 <MSS_UART_polled_tx_string>
    16aa:	f10a 0505 	add.w	r5, sl, #5
    16ae:	f10a 0c01 	add.w	ip, sl, #1
    16b2:	f10a 0e02 	add.w	lr, sl, #2
    16b6:	f10a 0303 	add.w	r3, sl, #3
    16ba:	f10a 0204 	add.w	r2, sl, #4
    16be:	f10a 0b07 	add.w	fp, sl, #7
    16c2:	f10a 0808 	add.w	r8, sl, #8
    16c6:	f04f 0900 	mov.w	r9, #0
    16ca:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    16ce:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    16d2:	930e      	str	r3, [sp, #56]	; 0x38
    16d4:	920d      	str	r2, [sp, #52]	; 0x34
    16d6:	950c      	str	r5, [sp, #48]	; 0x30
    16d8:	f10a 0006 	add.w	r0, sl, #6
    16dc:	f10a 0109 	add.w	r1, sl, #9
    16e0:	f10a 030b 	add.w	r3, sl, #11
    16e4:	f10a 020c 	add.w	r2, sl, #12
    16e8:	f10a 050d 	add.w	r5, sl, #13
    16ec:	f10a 0c0e 	add.w	ip, sl, #14
    16f0:	f1aa 0e05 	sub.w	lr, sl, #5
    16f4:	f8cd b020 	str.w	fp, [sp, #32]
    16f8:	f8cd 801c 	str.w	r8, [sp, #28]
    16fc:	900b      	str	r0, [sp, #44]	; 0x2c
    16fe:	910a      	str	r1, [sp, #40]	; 0x28
    1700:	f10a 080a 	add.w	r8, sl, #10
    1704:	9305      	str	r3, [sp, #20]
    1706:	9206      	str	r2, [sp, #24]
    1708:	9503      	str	r5, [sp, #12]
    170a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    170e:	46cb      	mov	fp, r9
    1710:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    1714:	2102      	movs	r1, #2
    1716:	2201      	movs	r2, #1
    1718:	4650      	mov	r0, sl
    171a:	f7fe fee9 	bl	4f0 <T.38>
    171e:	2102      	movs	r1, #2
    1720:	2201      	movs	r2, #1
    1722:	9810      	ldr	r0, [sp, #64]	; 0x40
    1724:	f7fe fee4 	bl	4f0 <T.38>
    1728:	2102      	movs	r1, #2
    172a:	2201      	movs	r2, #1
    172c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    172e:	f7fe fedf 	bl	4f0 <T.38>
    1732:	2102      	movs	r1, #2
    1734:	2201      	movs	r2, #1
    1736:	980e      	ldr	r0, [sp, #56]	; 0x38
    1738:	f7fe feda 	bl	4f0 <T.38>
    173c:	2102      	movs	r1, #2
    173e:	2201      	movs	r2, #1
    1740:	980d      	ldr	r0, [sp, #52]	; 0x34
    1742:	f7fe fed5 	bl	4f0 <T.38>
    1746:	2102      	movs	r1, #2
    1748:	2201      	movs	r2, #1
    174a:	980c      	ldr	r0, [sp, #48]	; 0x30
    174c:	f7fe fed0 	bl	4f0 <T.38>
    1750:	2102      	movs	r1, #2
    1752:	2201      	movs	r2, #1
    1754:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1756:	f7fe fecb 	bl	4f0 <T.38>
    175a:	2102      	movs	r1, #2
    175c:	2201      	movs	r2, #1
    175e:	9808      	ldr	r0, [sp, #32]
    1760:	f7fe fec6 	bl	4f0 <T.38>
    1764:	2102      	movs	r1, #2
    1766:	2201      	movs	r2, #1
    1768:	9807      	ldr	r0, [sp, #28]
    176a:	f7fe fec1 	bl	4f0 <T.38>
    176e:	2102      	movs	r1, #2
    1770:	2201      	movs	r2, #1
    1772:	980a      	ldr	r0, [sp, #40]	; 0x28
    1774:	f7fe febc 	bl	4f0 <T.38>
    1778:	2201      	movs	r2, #1
    177a:	4640      	mov	r0, r8
    177c:	2102      	movs	r1, #2
    177e:	f7fe feb7 	bl	4f0 <T.38>
    1782:	2102      	movs	r1, #2
    1784:	9805      	ldr	r0, [sp, #20]
    1786:	2201      	movs	r2, #1
    1788:	f7fe feb2 	bl	4f0 <T.38>
    178c:	9806      	ldr	r0, [sp, #24]
    178e:	2102      	movs	r1, #2
    1790:	2201      	movs	r2, #1
    1792:	f7fe fead 	bl	4f0 <T.38>
    1796:	9803      	ldr	r0, [sp, #12]
    1798:	2102      	movs	r1, #2
    179a:	2201      	movs	r2, #1
    179c:	f7fe fea8 	bl	4f0 <T.38>
    17a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    17a2:	2102      	movs	r1, #2
    17a4:	2201      	movs	r2, #1
    17a6:	f7fe fea3 	bl	4f0 <T.38>
    17aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
    17ac:	46bc      	mov	ip, r7
    17ae:	46b6      	mov	lr, r6
    17b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    17b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    17b8:	4673      	mov	r3, lr
    17ba:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    17be:	c303      	stmia	r3!, {r0, r1}
    17c0:	0c10      	lsrs	r0, r2, #16
    17c2:	801a      	strh	r2, [r3, #0]
    17c4:	76b0      	strb	r0, [r6, #26]
    17c6:	6822      	ldr	r2, [r4, #0]
    17c8:	6821      	ldr	r1, [r4, #0]
    17ca:	1d6b      	adds	r3, r5, #5
    17cc:	2940      	cmp	r1, #64	; 0x40
    17ce:	f000 84c4 	beq.w	215a <main+0x114e>
    17d2:	2201      	movs	r2, #1
    17d4:	6820      	ldr	r0, [r4, #0]
    17d6:	6821      	ldr	r1, [r4, #0]
    17d8:	ebb0 2f13 	cmp.w	r0, r3, lsr #8
    17dc:	bf18      	it	ne
    17de:	2201      	movne	r2, #1
    17e0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    17e4:	4288      	cmp	r0, r1
    17e6:	bf18      	it	ne
    17e8:	2201      	movne	r2, #1
    17ea:	2d00      	cmp	r5, #0
    17ec:	d048      	beq.n	1880 <main+0x874>
    17ee:	6820      	ldr	r0, [r4, #0]
    17f0:	2301      	movs	r3, #1
    17f2:	1e69      	subs	r1, r5, #1
    17f4:	2800      	cmp	r0, #0
    17f6:	bf18      	it	ne
    17f8:	461a      	movne	r2, r3
    17fa:	42ab      	cmp	r3, r5
    17fc:	f001 0103 	and.w	r1, r1, #3
    1800:	d23e      	bcs.n	1880 <main+0x874>
    1802:	b1c1      	cbz	r1, 1836 <main+0x82a>
    1804:	2901      	cmp	r1, #1
    1806:	d00d      	beq.n	1824 <main+0x818>
    1808:	2902      	cmp	r1, #2
    180a:	d004      	beq.n	1816 <main+0x80a>
    180c:	6821      	ldr	r1, [r4, #0]
    180e:	4299      	cmp	r1, r3
    1810:	bf18      	it	ne
    1812:	2201      	movne	r2, #1
    1814:	2302      	movs	r3, #2
    1816:	6820      	ldr	r0, [r4, #0]
    1818:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    181c:	4560      	cmp	r0, ip
    181e:	bf18      	it	ne
    1820:	2201      	movne	r2, #1
    1822:	3301      	adds	r3, #1
    1824:	6820      	ldr	r0, [r4, #0]
    1826:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    182a:	3301      	adds	r3, #1
    182c:	4570      	cmp	r0, lr
    182e:	bf18      	it	ne
    1830:	2201      	movne	r2, #1
    1832:	42ab      	cmp	r3, r5
    1834:	d224      	bcs.n	1880 <main+0x874>
    1836:	f8d4 e000 	ldr.w	lr, [r4]
    183a:	1c59      	adds	r1, r3, #1
    183c:	6820      	ldr	r0, [r4, #0]
    183e:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    1842:	45e6      	cmp	lr, ip
    1844:	bf0c      	ite	eq
    1846:	4694      	moveq	ip, r2
    1848:	f04f 0c01 	movne.w	ip, #1
    184c:	f101 0e01 	add.w	lr, r1, #1
    1850:	6822      	ldr	r2, [r4, #0]
    1852:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1856:	4288      	cmp	r0, r1
    1858:	bf0c      	ite	eq
    185a:	4661      	moveq	r1, ip
    185c:	2101      	movne	r1, #1
    185e:	f00e 0eff 	and.w	lr, lr, #255	; 0xff
    1862:	f103 0c03 	add.w	ip, r3, #3
    1866:	6820      	ldr	r0, [r4, #0]
    1868:	4572      	cmp	r2, lr
    186a:	bf0c      	ite	eq
    186c:	460a      	moveq	r2, r1
    186e:	2201      	movne	r2, #1
    1870:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    1874:	3304      	adds	r3, #4
    1876:	4560      	cmp	r0, ip
    1878:	bf18      	it	ne
    187a:	2201      	movne	r2, #1
    187c:	42ab      	cmp	r3, r5
    187e:	d3da      	bcc.n	1836 <main+0x82a>
    1880:	2a01      	cmp	r2, #1
    1882:	6823      	ldr	r3, [r4, #0]
    1884:	6823      	ldr	r3, [r4, #0]
    1886:	f000 846d 	beq.w	2164 <main+0x1158>
    188a:	3501      	adds	r5, #1
    188c:	4545      	cmp	r5, r8
    188e:	d18d      	bne.n	17ac <main+0x7a0>
    1890:	f109 0901 	add.w	r9, r9, #1
    1894:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
    1898:	f47f af3c 	bne.w	1714 <main+0x708>
    189c:	f1bb 0f00 	cmp.w	fp, #0
    18a0:	f000 80d5 	beq.w	1a4e <main+0xa42>
    18a4:	f240 0064 	movw	r0, #100	; 0x64
    18a8:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    18ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    18b0:	f2c0 0100 	movt	r1, #0
    18b4:	f000 fd04 	bl	22c0 <MSS_UART_polled_tx_string>
    18b8:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    18bc:	f240 0064 	movw	r0, #100	; 0x64
    18c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    18c4:	310c      	adds	r1, #12
    18c6:	220c      	movs	r2, #12
    18c8:	f000 fca4 	bl	2214 <MSS_UART_polled_tx>
    18cc:	e544      	b.n	1358 <main+0x34c>
    18ce:	f240 0064 	movw	r0, #100	; 0x64
    18d2:	f243 41f8 	movw	r1, #13560	; 0x34f8
    18d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    18da:	f2c0 0100 	movt	r1, #0
    18de:	f000 fcef 	bl	22c0 <MSS_UART_polled_tx_string>
    18e2:	f243 0300 	movw	r3, #12288	; 0x3000
    18e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    18ea:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    18ee:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    18f2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    18f6:	f240 0064 	movw	r0, #100	; 0x64
    18fa:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
    18fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1902:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1906:	e7d1      	b.n	18ac <main+0x8a0>
    1908:	f240 0064 	movw	r0, #100	; 0x64
    190c:	f243 312c 	movw	r1, #13100	; 0x332c
    1910:	f2c0 0100 	movt	r1, #0
    1914:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1918:	f000 fcd2 	bl	22c0 <MSS_UART_polled_tx_string>
    191c:	4650      	mov	r0, sl
    191e:	2102      	movs	r1, #2
    1920:	2201      	movs	r2, #1
    1922:	f7fe fde5 	bl	4f0 <T.38>
    1926:	f240 0064 	movw	r0, #100	; 0x64
    192a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    192e:	e7bd      	b.n	18ac <main+0x8a0>
    1930:	f240 0064 	movw	r0, #100	; 0x64
    1934:	f243 21cc 	movw	r1, #13004	; 0x32cc
    1938:	f2c2 0000 	movt	r0, #8192	; 0x2000
    193c:	f2c0 0100 	movt	r1, #0
    1940:	f000 fcbe 	bl	22c0 <MSS_UART_polled_tx_string>
    1944:	f50a 63f8 	add.w	r3, sl, #1984	; 0x7c0
    1948:	f103 090b 	add.w	r9, r3, #11
    194c:	f1aa 0505 	sub.w	r5, sl, #5
    1950:	f04f 0b00 	mov.w	fp, #0
    1954:	46b8      	mov	r8, r7
    1956:	2101      	movs	r1, #1
    1958:	1d6f      	adds	r7, r5, #5
    195a:	4638      	mov	r0, r7
    195c:	460a      	mov	r2, r1
    195e:	f7fe fdc7 	bl	4f0 <T.38>
    1962:	46c4      	mov	ip, r8
    1964:	46b6      	mov	lr, r6
    1966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    196a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    196e:	4673      	mov	r3, lr
    1970:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    1974:	c303      	stmia	r3!, {r0, r1}
    1976:	0c10      	lsrs	r0, r2, #16
    1978:	801a      	strh	r2, [r3, #0]
    197a:	76b0      	strb	r0, [r6, #26]
    197c:	6822      	ldr	r2, [r4, #0]
    197e:	6821      	ldr	r1, [r4, #0]
    1980:	2940      	cmp	r1, #64	; 0x40
    1982:	f000 8405 	beq.w	2190 <main+0x1184>
    1986:	2301      	movs	r3, #1
    1988:	6820      	ldr	r0, [r4, #0]
    198a:	6822      	ldr	r2, [r4, #0]
    198c:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
    1990:	bf18      	it	ne
    1992:	2301      	movne	r3, #1
    1994:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    1998:	4297      	cmp	r7, r2
    199a:	bf0c      	ite	eq
    199c:	461a      	moveq	r2, r3
    199e:	2201      	movne	r2, #1
    19a0:	2d00      	cmp	r5, #0
    19a2:	d047      	beq.n	1a34 <main+0xa28>
    19a4:	6827      	ldr	r7, [r4, #0]
    19a6:	2301      	movs	r3, #1
    19a8:	1e69      	subs	r1, r5, #1
    19aa:	2f00      	cmp	r7, #0
    19ac:	bf18      	it	ne
    19ae:	461a      	movne	r2, r3
    19b0:	42ab      	cmp	r3, r5
    19b2:	f001 0103 	and.w	r1, r1, #3
    19b6:	d23d      	bcs.n	1a34 <main+0xa28>
    19b8:	b1c1      	cbz	r1, 19ec <main+0x9e0>
    19ba:	2901      	cmp	r1, #1
    19bc:	d00d      	beq.n	19da <main+0x9ce>
    19be:	2902      	cmp	r1, #2
    19c0:	d004      	beq.n	19cc <main+0x9c0>
    19c2:	6827      	ldr	r7, [r4, #0]
    19c4:	429f      	cmp	r7, r3
    19c6:	bf18      	it	ne
    19c8:	2201      	movne	r2, #1
    19ca:	2302      	movs	r3, #2
    19cc:	6820      	ldr	r0, [r4, #0]
    19ce:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    19d2:	4288      	cmp	r0, r1
    19d4:	bf18      	it	ne
    19d6:	2201      	movne	r2, #1
    19d8:	3301      	adds	r3, #1
    19da:	6827      	ldr	r7, [r4, #0]
    19dc:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    19e0:	3301      	adds	r3, #1
    19e2:	4567      	cmp	r7, ip
    19e4:	bf18      	it	ne
    19e6:	2201      	movne	r2, #1
    19e8:	42ab      	cmp	r3, r5
    19ea:	d223      	bcs.n	1a34 <main+0xa28>
    19ec:	6827      	ldr	r7, [r4, #0]
    19ee:	1c59      	adds	r1, r3, #1
    19f0:	f8d4 e000 	ldr.w	lr, [r4]
    19f4:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    19f8:	4567      	cmp	r7, ip
    19fa:	bf18      	it	ne
    19fc:	2201      	movne	r2, #1
    19fe:	1c48      	adds	r0, r1, #1
    1a00:	6827      	ldr	r7, [r4, #0]
    1a02:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1a06:	458e      	cmp	lr, r1
    1a08:	bf0c      	ite	eq
    1a0a:	4694      	moveq	ip, r2
    1a0c:	f04f 0c01 	movne.w	ip, #1
    1a10:	1cda      	adds	r2, r3, #3
    1a12:	f000 01ff 	and.w	r1, r0, #255	; 0xff
    1a16:	6820      	ldr	r0, [r4, #0]
    1a18:	428f      	cmp	r7, r1
    1a1a:	bf0c      	ite	eq
    1a1c:	46e6      	moveq	lr, ip
    1a1e:	f04f 0e01 	movne.w	lr, #1
    1a22:	3304      	adds	r3, #4
    1a24:	f002 0cff 	and.w	ip, r2, #255	; 0xff
    1a28:	4560      	cmp	r0, ip
    1a2a:	bf0c      	ite	eq
    1a2c:	4672      	moveq	r2, lr
    1a2e:	2201      	movne	r2, #1
    1a30:	42ab      	cmp	r3, r5
    1a32:	d3db      	bcc.n	19ec <main+0x9e0>
    1a34:	2a01      	cmp	r2, #1
    1a36:	6823      	ldr	r3, [r4, #0]
    1a38:	6823      	ldr	r3, [r4, #0]
    1a3a:	f000 83af 	beq.w	219c <main+0x1190>
    1a3e:	3501      	adds	r5, #1
    1a40:	454d      	cmp	r5, r9
    1a42:	d188      	bne.n	1956 <main+0x94a>
    1a44:	4647      	mov	r7, r8
    1a46:	f1bb 0f00 	cmp.w	fp, #0
    1a4a:	f47f af2b 	bne.w	18a4 <main+0x898>
    1a4e:	f240 0064 	movw	r0, #100	; 0x64
    1a52:	f642 41c4 	movw	r1, #11460	; 0x2cc4
    1a56:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1a5a:	f2c0 0100 	movt	r1, #0
    1a5e:	f000 fc2f 	bl	22c0 <MSS_UART_polled_tx_string>
    1a62:	e71f      	b.n	18a4 <main+0x898>
    1a64:	f240 0064 	movw	r0, #100	; 0x64
    1a68:	f243 218c 	movw	r1, #12940	; 0x328c
    1a6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1a70:	f2c0 0100 	movt	r1, #0
    1a74:	46bb      	mov	fp, r7
    1a76:	46b1      	mov	r9, r6
    1a78:	f000 fc22 	bl	22c0 <MSS_UART_polled_tx_string>
    1a7c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    1a80:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    1a84:	46c8      	mov	r8, r9
    1a86:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
    1a8a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
    1a8e:	9d04      	ldr	r5, [sp, #16]
    1a90:	4640      	mov	r0, r8
    1a92:	f8dd c000 	ldr.w	ip, [sp]
    1a96:	8002      	strh	r2, [r0, #0]
    1a98:	ea4f 4912 	mov.w	r9, r2, lsr #16
    1a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1aa2:	f8b5 b000 	ldrh.w	fp, [r5]
    1aa6:	4661      	mov	r1, ip
    1aa8:	f8a1 b000 	strh.w	fp, [r1]
    1aac:	f886 901a 	strb.w	r9, [r6, #26]
    1ab0:	6823      	ldr	r3, [r4, #0]
    1ab2:	6822      	ldr	r2, [r4, #0]
    1ab4:	2a40      	cmp	r2, #64	; 0x40
    1ab6:	f000 83a4 	beq.w	2202 <main+0x11f6>
    1aba:	2301      	movs	r3, #1
    1abc:	6821      	ldr	r1, [r4, #0]
    1abe:	6822      	ldr	r2, [r4, #0]
    1ac0:	ebb1 2f1a 	cmp.w	r1, sl, lsr #8
    1ac4:	bf18      	it	ne
    1ac6:	2301      	movne	r3, #1
    1ac8:	f00a 0eff 	and.w	lr, sl, #255	; 0xff
    1acc:	4596      	cmp	lr, r2
    1ace:	bf0c      	ite	eq
    1ad0:	461a      	moveq	r2, r3
    1ad2:	2201      	movne	r2, #1
    1ad4:	f1ba 0105 	subs.w	r1, sl, #5
    1ad8:	d048      	beq.n	1b6c <main+0xb60>
    1ada:	6825      	ldr	r5, [r4, #0]
    1adc:	2301      	movs	r3, #1
    1ade:	f1aa 0c06 	sub.w	ip, sl, #6
    1ae2:	2d00      	cmp	r5, #0
    1ae4:	bf18      	it	ne
    1ae6:	461a      	movne	r2, r3
    1ae8:	428b      	cmp	r3, r1
    1aea:	f00c 0003 	and.w	r0, ip, #3
    1aee:	d23d      	bcs.n	1b6c <main+0xb60>
    1af0:	b1c0      	cbz	r0, 1b24 <main+0xb18>
    1af2:	2801      	cmp	r0, #1
    1af4:	d00d      	beq.n	1b12 <main+0xb06>
    1af6:	2802      	cmp	r0, #2
    1af8:	d004      	beq.n	1b04 <main+0xaf8>
    1afa:	6825      	ldr	r5, [r4, #0]
    1afc:	2302      	movs	r3, #2
    1afe:	2d01      	cmp	r5, #1
    1b00:	bf18      	it	ne
    1b02:	2201      	movne	r2, #1
    1b04:	6820      	ldr	r0, [r4, #0]
    1b06:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    1b0a:	4540      	cmp	r0, r8
    1b0c:	bf18      	it	ne
    1b0e:	2201      	movne	r2, #1
    1b10:	3301      	adds	r3, #1
    1b12:	6825      	ldr	r5, [r4, #0]
    1b14:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    1b18:	3301      	adds	r3, #1
    1b1a:	455d      	cmp	r5, fp
    1b1c:	bf18      	it	ne
    1b1e:	2201      	movne	r2, #1
    1b20:	428b      	cmp	r3, r1
    1b22:	d223      	bcs.n	1b6c <main+0xb60>
    1b24:	6825      	ldr	r5, [r4, #0]
    1b26:	1c58      	adds	r0, r3, #1
    1b28:	f8d4 c000 	ldr.w	ip, [r4]
    1b2c:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    1b30:	455d      	cmp	r5, fp
    1b32:	bf18      	it	ne
    1b34:	2201      	movne	r2, #1
    1b36:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    1b3a:	1c45      	adds	r5, r0, #1
    1b3c:	f8d4 e000 	ldr.w	lr, [r4]
    1b40:	45c4      	cmp	ip, r8
    1b42:	bf0c      	ite	eq
    1b44:	4691      	moveq	r9, r2
    1b46:	f04f 0901 	movne.w	r9, #1
    1b4a:	f005 0bff 	and.w	fp, r5, #255	; 0xff
    1b4e:	1cda      	adds	r2, r3, #3
    1b50:	6825      	ldr	r5, [r4, #0]
    1b52:	45de      	cmp	lr, fp
    1b54:	bf0c      	ite	eq
    1b56:	4648      	moveq	r0, r9
    1b58:	2001      	movne	r0, #1
    1b5a:	f002 08ff 	and.w	r8, r2, #255	; 0xff
    1b5e:	3304      	adds	r3, #4
    1b60:	4545      	cmp	r5, r8
    1b62:	bf0c      	ite	eq
    1b64:	4602      	moveq	r2, r0
    1b66:	2201      	movne	r2, #1
    1b68:	428b      	cmp	r3, r1
    1b6a:	d3db      	bcc.n	1b24 <main+0xb18>
    1b6c:	f240 0064 	movw	r0, #100	; 0x64
    1b70:	2a01      	cmp	r2, #1
    1b72:	6823      	ldr	r3, [r4, #0]
    1b74:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1b78:	6823      	ldr	r3, [r4, #0]
    1b7a:	f000 833c 	beq.w	21f6 <main+0x11ea>
    1b7e:	f50d 618d 	add.w	r1, sp, #1128	; 0x468
    1b82:	2212      	movs	r2, #18
    1b84:	f000 fb46 	bl	2214 <MSS_UART_polled_tx>
    1b88:	e68c      	b.n	18a4 <main+0x898>
    1b8a:	f240 0064 	movw	r0, #100	; 0x64
    1b8e:	f243 2150 	movw	r1, #12880	; 0x3250
    1b92:	f2c0 0100 	movt	r1, #0
    1b96:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1b9a:	f000 fb91 	bl	22c0 <MSS_UART_polled_tx_string>
    1b9e:	4650      	mov	r0, sl
    1ba0:	2101      	movs	r1, #1
    1ba2:	2200      	movs	r2, #0
    1ba4:	f7fe fca4 	bl	4f0 <T.38>
    1ba8:	f240 0064 	movw	r0, #100	; 0x64
    1bac:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1bb0:	e67c      	b.n	18ac <main+0x8a0>
    1bb2:	f240 0064 	movw	r0, #100	; 0x64
    1bb6:	f243 2130 	movw	r1, #12848	; 0x3230
    1bba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1bbe:	f2c0 0100 	movt	r1, #0
    1bc2:	f000 fb7d 	bl	22c0 <MSS_UART_polled_tx_string>
    1bc6:	f240 0310 	movw	r3, #16
    1bca:	f2c5 0300 	movt	r3, #20480	; 0x5000
    1bce:	2510      	movs	r5, #16
    1bd0:	f240 0064 	movw	r0, #100	; 0x64
    1bd4:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1bd8:	601d      	str	r5, [r3, #0]
    1bda:	e667      	b.n	18ac <main+0x8a0>
    1bdc:	f240 0064 	movw	r0, #100	; 0x64
    1be0:	f243 2110 	movw	r1, #12816	; 0x3210
    1be4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1be8:	f2c0 0100 	movt	r1, #0
    1bec:	e7e9      	b.n	1bc2 <main+0xbb6>
    1bee:	f7fe fd3d 	bl	66c <print_registers>
    1bf2:	f240 0064 	movw	r0, #100	; 0x64
    1bf6:	f243 2108 	movw	r1, #12808	; 0x3208
    1bfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1bfe:	f2c0 0100 	movt	r1, #0
    1c02:	f000 fb5d 	bl	22c0 <MSS_UART_polled_tx_string>
    1c06:	f240 0064 	movw	r0, #100	; 0x64
    1c0a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1c0e:	e64d      	b.n	18ac <main+0x8a0>
    1c10:	f240 0064 	movw	r0, #100	; 0x64
    1c14:	f243 517c 	movw	r1, #13692	; 0x357c
    1c18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c1c:	f2c0 0100 	movt	r1, #0
    1c20:	f000 fb4e 	bl	22c0 <MSS_UART_polled_tx_string>
    1c24:	e63e      	b.n	18a4 <main+0x898>
    1c26:	f240 0064 	movw	r0, #100	; 0x64
    1c2a:	f243 4128 	movw	r1, #13352	; 0x3428
    1c2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c32:	f2c0 0100 	movt	r1, #0
    1c36:	f000 fb43 	bl	22c0 <MSS_UART_polled_tx_string>
    1c3a:	f240 31f9 	movw	r1, #1017	; 0x3f9
    1c3e:	f44f 702a 	mov.w	r0, #680	; 0x2a8
    1c42:	f7fe fe6f 	bl	924 <b2b_single_rx_message_check>
    1c46:	f240 0064 	movw	r0, #100	; 0x64
    1c4a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1c4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c52:	f2c0 0100 	movt	r1, #0
    1c56:	f000 fb33 	bl	22c0 <MSS_UART_polled_tx_string>
    1c5a:	f240 0064 	movw	r0, #100	; 0x64
    1c5e:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    1c62:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c66:	310c      	adds	r1, #12
    1c68:	220c      	movs	r2, #12
    1c6a:	f000 fad3 	bl	2214 <MSS_UART_polled_tx>
    1c6e:	f240 3af9 	movw	sl, #1017	; 0x3f9
    1c72:	f7ff bb71 	b.w	1358 <main+0x34c>
    1c76:	f240 0064 	movw	r0, #100	; 0x64
    1c7a:	f243 31f4 	movw	r1, #13300	; 0x33f4
    1c7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c82:	f2c0 0100 	movt	r1, #0
    1c86:	f000 fb1b 	bl	22c0 <MSS_UART_polled_tx_string>
    1c8a:	f240 0530 	movw	r5, #48	; 0x30
    1c8e:	f240 0c14 	movw	ip, #20
    1c92:	f04f 0a02 	mov.w	sl, #2
    1c96:	f2c5 0500 	movt	r5, #20480	; 0x5000
    1c9a:	20ff      	movs	r0, #255	; 0xff
    1c9c:	f240 0108 	movw	r1, #8
    1ca0:	f240 0834 	movw	r8, #52	; 0x34
    1ca4:	f2c5 0c00 	movt	ip, #20480	; 0x5000
    1ca8:	f8cc 0000 	str.w	r0, [ip]
    1cac:	f2c5 0100 	movt	r1, #20480	; 0x5000
    1cb0:	f8c5 a000 	str.w	sl, [r5]
    1cb4:	3855      	subs	r0, #85	; 0x55
    1cb6:	25a8      	movs	r5, #168	; 0xa8
    1cb8:	f2c5 0800 	movt	r8, #20480	; 0x5000
    1cbc:	f8c8 5000 	str.w	r5, [r8]
    1cc0:	6008      	str	r0, [r1, #0]
    1cc2:	f44f 452a 	mov.w	r5, #43520	; 0xaa00
    1cc6:	2003      	movs	r0, #3
    1cc8:	600d      	str	r5, [r1, #0]
    1cca:	2301      	movs	r3, #1
    1ccc:	6008      	str	r0, [r1, #0]
    1cce:	f240 35f9 	movw	r5, #1017	; 0x3f9
    1cd2:	2000      	movs	r0, #0
    1cd4:	600d      	str	r5, [r1, #0]
    1cd6:	6008      	str	r0, [r1, #0]
    1cd8:	600b      	str	r3, [r1, #0]
    1cda:	4653      	mov	r3, sl
    1cdc:	1c5d      	adds	r5, r3, #1
    1cde:	460a      	mov	r2, r1
    1ce0:	f8c2 a000 	str.w	sl, [r2]
    1ce4:	1c6b      	adds	r3, r5, #1
    1ce6:	600d      	str	r5, [r1, #0]
    1ce8:	1c59      	adds	r1, r3, #1
    1cea:	6013      	str	r3, [r2, #0]
    1cec:	1cd8      	adds	r0, r3, #3
    1cee:	3304      	adds	r3, #4
    1cf0:	1c4d      	adds	r5, r1, #1
    1cf2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
    1cf6:	6011      	str	r1, [r2, #0]
    1cf8:	6015      	str	r5, [r2, #0]
    1cfa:	6010      	str	r0, [r2, #0]
    1cfc:	d1f4      	bne.n	1ce8 <main+0xcdc>
    1cfe:	f240 0310 	movw	r3, #16
    1d02:	f2c5 0300 	movt	r3, #20480	; 0x5000
    1d06:	f240 0114 	movw	r1, #20
    1d0a:	2220      	movs	r2, #32
    1d0c:	601a      	str	r2, [r3, #0]
    1d0e:	f2c5 0100 	movt	r1, #20480	; 0x5000
    1d12:	6808      	ldr	r0, [r1, #0]
    1d14:	f240 0314 	movw	r3, #20
    1d18:	f010 0f80 	tst.w	r0, #128	; 0x80
    1d1c:	f2c5 0300 	movt	r3, #20480	; 0x5000
    1d20:	d0f7      	beq.n	1d12 <main+0xd06>
    1d22:	2580      	movs	r5, #128	; 0x80
    1d24:	f240 0064 	movw	r0, #100	; 0x64
    1d28:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    1d2c:	601d      	str	r5, [r3, #0]
    1d2e:	e78e      	b.n	1c4e <main+0xc42>
    1d30:	f240 0064 	movw	r0, #100	; 0x64
    1d34:	f243 31a8 	movw	r1, #13224	; 0x33a8
    1d38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d3c:	f2c0 0100 	movt	r1, #0
    1d40:	f000 fabe 	bl	22c0 <MSS_UART_polled_tx_string>
    1d44:	f50a 63f8 	add.w	r3, sl, #1984	; 0x7c0
    1d48:	f103 090b 	add.w	r9, r3, #11
    1d4c:	f1aa 0505 	sub.w	r5, sl, #5
    1d50:	f04f 0b00 	mov.w	fp, #0
    1d54:	46b8      	mov	r8, r7
    1d56:	1d6f      	adds	r7, r5, #5
    1d58:	2102      	movs	r1, #2
    1d5a:	2201      	movs	r2, #1
    1d5c:	4638      	mov	r0, r7
    1d5e:	f7fe fbc7 	bl	4f0 <T.38>
    1d62:	46c4      	mov	ip, r8
    1d64:	46b6      	mov	lr, r6
    1d66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    1d6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    1d6e:	4673      	mov	r3, lr
    1d70:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    1d74:	c303      	stmia	r3!, {r0, r1}
    1d76:	0c10      	lsrs	r0, r2, #16
    1d78:	801a      	strh	r2, [r3, #0]
    1d7a:	76b0      	strb	r0, [r6, #26]
    1d7c:	6822      	ldr	r2, [r4, #0]
    1d7e:	6821      	ldr	r1, [r4, #0]
    1d80:	2940      	cmp	r1, #64	; 0x40
    1d82:	f000 8200 	beq.w	2186 <main+0x117a>
    1d86:	2301      	movs	r3, #1
    1d88:	6820      	ldr	r0, [r4, #0]
    1d8a:	6822      	ldr	r2, [r4, #0]
    1d8c:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
    1d90:	bf18      	it	ne
    1d92:	2301      	movne	r3, #1
    1d94:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    1d98:	4297      	cmp	r7, r2
    1d9a:	bf0c      	ite	eq
    1d9c:	461a      	moveq	r2, r3
    1d9e:	2201      	movne	r2, #1
    1da0:	2d00      	cmp	r5, #0
    1da2:	d047      	beq.n	1e34 <main+0xe28>
    1da4:	6827      	ldr	r7, [r4, #0]
    1da6:	2301      	movs	r3, #1
    1da8:	1e69      	subs	r1, r5, #1
    1daa:	2f00      	cmp	r7, #0
    1dac:	bf18      	it	ne
    1dae:	461a      	movne	r2, r3
    1db0:	42ab      	cmp	r3, r5
    1db2:	f001 0103 	and.w	r1, r1, #3
    1db6:	d23d      	bcs.n	1e34 <main+0xe28>
    1db8:	b1c1      	cbz	r1, 1dec <main+0xde0>
    1dba:	2901      	cmp	r1, #1
    1dbc:	d00d      	beq.n	1dda <main+0xdce>
    1dbe:	2902      	cmp	r1, #2
    1dc0:	d004      	beq.n	1dcc <main+0xdc0>
    1dc2:	6821      	ldr	r1, [r4, #0]
    1dc4:	4299      	cmp	r1, r3
    1dc6:	bf18      	it	ne
    1dc8:	2201      	movne	r2, #1
    1dca:	2302      	movs	r3, #2
    1dcc:	6827      	ldr	r7, [r4, #0]
    1dce:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    1dd2:	4567      	cmp	r7, ip
    1dd4:	bf18      	it	ne
    1dd6:	2201      	movne	r2, #1
    1dd8:	3301      	adds	r3, #1
    1dda:	6820      	ldr	r0, [r4, #0]
    1ddc:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    1de0:	3301      	adds	r3, #1
    1de2:	4570      	cmp	r0, lr
    1de4:	bf18      	it	ne
    1de6:	2201      	movne	r2, #1
    1de8:	42ab      	cmp	r3, r5
    1dea:	d223      	bcs.n	1e34 <main+0xe28>
    1dec:	6827      	ldr	r7, [r4, #0]
    1dee:	1c59      	adds	r1, r3, #1
    1df0:	f8d4 e000 	ldr.w	lr, [r4]
    1df4:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    1df8:	4567      	cmp	r7, ip
    1dfa:	bf18      	it	ne
    1dfc:	2201      	movne	r2, #1
    1dfe:	1c48      	adds	r0, r1, #1
    1e00:	6827      	ldr	r7, [r4, #0]
    1e02:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1e06:	458e      	cmp	lr, r1
    1e08:	bf0c      	ite	eq
    1e0a:	4694      	moveq	ip, r2
    1e0c:	f04f 0c01 	movne.w	ip, #1
    1e10:	1cda      	adds	r2, r3, #3
    1e12:	f000 01ff 	and.w	r1, r0, #255	; 0xff
    1e16:	6820      	ldr	r0, [r4, #0]
    1e18:	428f      	cmp	r7, r1
    1e1a:	bf0c      	ite	eq
    1e1c:	46e6      	moveq	lr, ip
    1e1e:	f04f 0e01 	movne.w	lr, #1
    1e22:	3304      	adds	r3, #4
    1e24:	f002 0cff 	and.w	ip, r2, #255	; 0xff
    1e28:	4560      	cmp	r0, ip
    1e2a:	bf0c      	ite	eq
    1e2c:	4672      	moveq	r2, lr
    1e2e:	2201      	movne	r2, #1
    1e30:	42ab      	cmp	r3, r5
    1e32:	d3db      	bcc.n	1dec <main+0xde0>
    1e34:	2a01      	cmp	r2, #1
    1e36:	6823      	ldr	r3, [r4, #0]
    1e38:	6823      	ldr	r3, [r4, #0]
    1e3a:	f000 81d1 	beq.w	21e0 <main+0x11d4>
    1e3e:	3501      	adds	r5, #1
    1e40:	454d      	cmp	r5, r9
    1e42:	d188      	bne.n	1d56 <main+0xd4a>
    1e44:	e5fe      	b.n	1a44 <main+0xa38>
    1e46:	f240 0064 	movw	r0, #100	; 0x64
    1e4a:	f243 3168 	movw	r1, #13160	; 0x3368
    1e4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1e52:	f2c0 0100 	movt	r1, #0
    1e56:	f000 fa33 	bl	22c0 <MSS_UART_polled_tx_string>
    1e5a:	46b1      	mov	r9, r6
    1e5c:	46bc      	mov	ip, r7
    1e5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    1e62:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    1e66:	464b      	mov	r3, r9
    1e68:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    1e6c:	c303      	stmia	r3!, {r0, r1}
    1e6e:	9d04      	ldr	r5, [sp, #16]
    1e70:	f8dd b000 	ldr.w	fp, [sp]
    1e74:	801a      	strh	r2, [r3, #0]
    1e76:	ea4f 4912 	mov.w	r9, r2, lsr #16
    1e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1e7c:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
    1e80:	f8b5 8000 	ldrh.w	r8, [r5]
    1e84:	465b      	mov	r3, fp
    1e86:	f8a3 8000 	strh.w	r8, [r3]
    1e8a:	f886 901a 	strb.w	r9, [r6, #26]
    1e8e:	6823      	ldr	r3, [r4, #0]
    1e90:	6825      	ldr	r5, [r4, #0]
    1e92:	2d40      	cmp	r5, #64	; 0x40
    1e94:	f000 81b9 	beq.w	220a <main+0x11fe>
    1e98:	2301      	movs	r3, #1
    1e9a:	6821      	ldr	r1, [r4, #0]
    1e9c:	6822      	ldr	r2, [r4, #0]
    1e9e:	ebb1 2f1a 	cmp.w	r1, sl, lsr #8
    1ea2:	bf18      	it	ne
    1ea4:	2301      	movne	r3, #1
    1ea6:	f00a 0eff 	and.w	lr, sl, #255	; 0xff
    1eaa:	4596      	cmp	lr, r2
    1eac:	bf0c      	ite	eq
    1eae:	461a      	moveq	r2, r3
    1eb0:	2201      	movne	r2, #1
    1eb2:	f1ba 0105 	subs.w	r1, sl, #5
    1eb6:	f43f ae59 	beq.w	1b6c <main+0xb60>
    1eba:	6825      	ldr	r5, [r4, #0]
    1ebc:	2301      	movs	r3, #1
    1ebe:	f1aa 0806 	sub.w	r8, sl, #6
    1ec2:	2d00      	cmp	r5, #0
    1ec4:	bf18      	it	ne
    1ec6:	461a      	movne	r2, r3
    1ec8:	428b      	cmp	r3, r1
    1eca:	f008 0003 	and.w	r0, r8, #3
    1ece:	f4bf ae4d 	bcs.w	1b6c <main+0xb60>
    1ed2:	b1c8      	cbz	r0, 1f08 <main+0xefc>
    1ed4:	2801      	cmp	r0, #1
    1ed6:	d00d      	beq.n	1ef4 <main+0xee8>
    1ed8:	2802      	cmp	r0, #2
    1eda:	d004      	beq.n	1ee6 <main+0xeda>
    1edc:	6825      	ldr	r5, [r4, #0]
    1ede:	2302      	movs	r3, #2
    1ee0:	2d01      	cmp	r5, #1
    1ee2:	bf18      	it	ne
    1ee4:	2201      	movne	r2, #1
    1ee6:	6820      	ldr	r0, [r4, #0]
    1ee8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
    1eec:	4548      	cmp	r0, r9
    1eee:	bf18      	it	ne
    1ef0:	2201      	movne	r2, #1
    1ef2:	3301      	adds	r3, #1
    1ef4:	6825      	ldr	r5, [r4, #0]
    1ef6:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    1efa:	3301      	adds	r3, #1
    1efc:	4575      	cmp	r5, lr
    1efe:	bf18      	it	ne
    1f00:	2201      	movne	r2, #1
    1f02:	428b      	cmp	r3, r1
    1f04:	f4bf ae32 	bcs.w	1b6c <main+0xb60>
    1f08:	6825      	ldr	r5, [r4, #0]
    1f0a:	1c58      	adds	r0, r3, #1
    1f0c:	f8d4 8000 	ldr.w	r8, [r4]
    1f10:	f003 09ff 	and.w	r9, r3, #255	; 0xff
    1f14:	454d      	cmp	r5, r9
    1f16:	bf18      	it	ne
    1f18:	2201      	movne	r2, #1
    1f1a:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    1f1e:	1c45      	adds	r5, r0, #1
    1f20:	f8d4 e000 	ldr.w	lr, [r4]
    1f24:	45d8      	cmp	r8, fp
    1f26:	bf0c      	ite	eq
    1f28:	4694      	moveq	ip, r2
    1f2a:	f04f 0c01 	movne.w	ip, #1
    1f2e:	f005 09ff 	and.w	r9, r5, #255	; 0xff
    1f32:	1cda      	adds	r2, r3, #3
    1f34:	6825      	ldr	r5, [r4, #0]
    1f36:	45ce      	cmp	lr, r9
    1f38:	bf0c      	ite	eq
    1f3a:	4660      	moveq	r0, ip
    1f3c:	2001      	movne	r0, #1
    1f3e:	f002 0bff 	and.w	fp, r2, #255	; 0xff
    1f42:	3304      	adds	r3, #4
    1f44:	455d      	cmp	r5, fp
    1f46:	bf0c      	ite	eq
    1f48:	4602      	moveq	r2, r0
    1f4a:	2201      	movne	r2, #1
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d3db      	bcc.n	1f08 <main+0xefc>
    1f50:	e60c      	b.n	1b6c <main+0xb60>
    1f52:	f240 0064 	movw	r0, #100	; 0x64
    1f56:	f243 419c 	movw	r1, #13468	; 0x349c
    1f5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f5e:	f2c0 0100 	movt	r1, #0
    1f62:	f000 f9ad 	bl	22c0 <MSS_UART_polled_tx_string>
    1f66:	f04f 0808 	mov.w	r8, #8
    1f6a:	2500      	movs	r5, #0
    1f6c:	e017      	b.n	1f9e <main+0xf92>
    1f6e:	f10a 0101 	add.w	r1, sl, #1
    1f72:	f44f 702a 	mov.w	r0, #680	; 0x2a8
    1f76:	f7fe fcd5 	bl	924 <b2b_single_rx_message_check>
    1f7a:	f10a 0102 	add.w	r1, sl, #2
    1f7e:	2801      	cmp	r0, #1
    1f80:	f44f 702a 	mov.w	r0, #680	; 0x2a8
    1f84:	bf08      	it	eq
    1f86:	3501      	addeq	r5, #1
    1f88:	f7fe fccc 	bl	924 <b2b_single_rx_message_check>
    1f8c:	f10a 0803 	add.w	r8, sl, #3
    1f90:	2801      	cmp	r0, #1
    1f92:	bf08      	it	eq
    1f94:	3501      	addeq	r5, #1
    1f96:	f5b8 6ffb 	cmp.w	r8, #2008	; 0x7d8
    1f9a:	f000 810a 	beq.w	21b2 <main+0x11a6>
    1f9e:	4641      	mov	r1, r8
    1fa0:	f44f 702a 	mov.w	r0, #680	; 0x2a8
    1fa4:	f7fe fcbe 	bl	924 <b2b_single_rx_message_check>
    1fa8:	f108 0a01 	add.w	sl, r8, #1
    1fac:	2801      	cmp	r0, #1
    1fae:	4651      	mov	r1, sl
    1fb0:	f44f 702a 	mov.w	r0, #680	; 0x2a8
    1fb4:	bf08      	it	eq
    1fb6:	3501      	addeq	r5, #1
    1fb8:	f7fe fcb4 	bl	924 <b2b_single_rx_message_check>
    1fbc:	2801      	cmp	r0, #1
    1fbe:	d1d6      	bne.n	1f6e <main+0xf62>
    1fc0:	3501      	adds	r5, #1
    1fc2:	e7d4      	b.n	1f6e <main+0xf62>
    1fc4:	f240 0064 	movw	r0, #100	; 0x64
    1fc8:	f243 4164 	movw	r1, #13412	; 0x3464
    1fcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1fd0:	f2c0 0100 	movt	r1, #0
    1fd4:	f000 f974 	bl	22c0 <MSS_UART_polled_tx_string>
    1fd8:	f240 0b30 	movw	fp, #48	; 0x30
    1fdc:	f240 0114 	movw	r1, #20
    1fe0:	f240 0934 	movw	r9, #52	; 0x34
    1fe4:	f240 0208 	movw	r2, #8
    1fe8:	f240 0a10 	movw	sl, #16
    1fec:	f2c5 0100 	movt	r1, #20480	; 0x5000
    1ff0:	f2c5 0b00 	movt	fp, #20480	; 0x5000
    1ff4:	f2c5 0900 	movt	r9, #20480	; 0x5000
    1ff8:	f2c5 0200 	movt	r2, #20480	; 0x5000
    1ffc:	f2c5 0a00 	movt	sl, #20480	; 0x5000
    2000:	2003      	movs	r0, #3
    2002:	f04f 0802 	mov.w	r8, #2
    2006:	46bc      	mov	ip, r7
    2008:	46a6      	mov	lr, r4
    200a:	27ff      	movs	r7, #255	; 0xff
    200c:	600f      	str	r7, [r1, #0]
    200e:	1d44      	adds	r4, r0, #5
    2010:	27a8      	movs	r7, #168	; 0xa8
    2012:	f8cb 8000 	str.w	r8, [fp]
    2016:	0a23      	lsrs	r3, r4, #8
    2018:	f8c9 7000 	str.w	r7, [r9]
    201c:	27aa      	movs	r7, #170	; 0xaa
    201e:	6017      	str	r7, [r2, #0]
    2020:	9303      	str	r3, [sp, #12]
    2022:	f44f 472a 	mov.w	r7, #43520	; 0xaa00
    2026:	6017      	str	r7, [r2, #0]
    2028:	9f03      	ldr	r7, [sp, #12]
    202a:	2301      	movs	r3, #1
    202c:	1e45      	subs	r5, r0, #1
    202e:	6017      	str	r7, [r2, #0]
    2030:	6014      	str	r4, [r2, #0]
    2032:	2400      	movs	r4, #0
    2034:	4283      	cmp	r3, r0
    2036:	f005 0503 	and.w	r5, r5, #3
    203a:	6014      	str	r4, [r2, #0]
    203c:	d216      	bcs.n	206c <main+0x1060>
    203e:	b15d      	cbz	r5, 2058 <main+0x104c>
    2040:	2d01      	cmp	r5, #1
    2042:	d005      	beq.n	2050 <main+0x1044>
    2044:	2d02      	cmp	r5, #2
    2046:	bf1c      	itt	ne
    2048:	6013      	strne	r3, [r2, #0]
    204a:	4643      	movne	r3, r8
    204c:	6013      	str	r3, [r2, #0]
    204e:	3301      	adds	r3, #1
    2050:	6013      	str	r3, [r2, #0]
    2052:	3301      	adds	r3, #1
    2054:	4283      	cmp	r3, r0
    2056:	d209      	bcs.n	206c <main+0x1060>
    2058:	1c5c      	adds	r4, r3, #1
    205a:	6013      	str	r3, [r2, #0]
    205c:	1cdd      	adds	r5, r3, #3
    205e:	3304      	adds	r3, #4
    2060:	1c67      	adds	r7, r4, #1
    2062:	4283      	cmp	r3, r0
    2064:	6014      	str	r4, [r2, #0]
    2066:	6017      	str	r7, [r2, #0]
    2068:	6015      	str	r5, [r2, #0]
    206a:	d3f5      	bcc.n	2058 <main+0x104c>
    206c:	2320      	movs	r3, #32
    206e:	f8ca 3000 	str.w	r3, [sl]
    2072:	680d      	ldr	r5, [r1, #0]
    2074:	f015 0f80 	tst.w	r5, #128	; 0x80
    2078:	d0fb      	beq.n	2072 <main+0x1066>
    207a:	3001      	adds	r0, #1
    207c:	f240 0314 	movw	r3, #20
    2080:	f240 77d3 	movw	r7, #2003	; 0x7d3
    2084:	2480      	movs	r4, #128	; 0x80
    2086:	f2c5 0300 	movt	r3, #20480	; 0x5000
    208a:	42b8      	cmp	r0, r7
    208c:	601c      	str	r4, [r3, #0]
    208e:	d1bc      	bne.n	200a <main+0xffe>
    2090:	4667      	mov	r7, ip
    2092:	4674      	mov	r4, lr
    2094:	f7ff bae8 	b.w	1668 <main+0x65c>
    2098:	f240 0064 	movw	r0, #100	; 0x64
    209c:	f243 41d4 	movw	r1, #13524	; 0x34d4
    20a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    20a4:	f2c0 0100 	movt	r1, #0
    20a8:	f000 f90a 	bl	22c0 <MSS_UART_polled_tx_string>
    20ac:	f240 0b30 	movw	fp, #48	; 0x30
    20b0:	f240 0010 	movw	r0, #16
    20b4:	f2c5 0b00 	movt	fp, #20480	; 0x5000
    20b8:	f240 0114 	movw	r1, #20
    20bc:	f240 0934 	movw	r9, #52	; 0x34
    20c0:	f240 0208 	movw	r2, #8
    20c4:	f2c5 0000 	movt	r0, #20480	; 0x5000
    20c8:	46bc      	mov	ip, r7
    20ca:	f2c5 0100 	movt	r1, #20480	; 0x5000
    20ce:	465f      	mov	r7, fp
    20d0:	f2c5 0900 	movt	r9, #20480	; 0x5000
    20d4:	f2c5 0200 	movt	r2, #20480	; 0x5000
    20d8:	9003      	str	r0, [sp, #12]
    20da:	f04f 0e00 	mov.w	lr, #0
    20de:	f04f 0a80 	mov.w	sl, #128	; 0x80
    20e2:	f240 38f7 	movw	r8, #1015	; 0x3f7
    20e6:	46a3      	mov	fp, r4
    20e8:	20ff      	movs	r0, #255	; 0xff
    20ea:	2502      	movs	r5, #2
    20ec:	6008      	str	r0, [r1, #0]
    20ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    20f2:	603d      	str	r5, [r7, #0]
    20f4:	2500      	movs	r5, #0
    20f6:	f8c9 5000 	str.w	r5, [r9]
    20fa:	2403      	movs	r4, #3
    20fc:	f8c2 a000 	str.w	sl, [r2]
    2100:	6013      	str	r3, [r2, #0]
    2102:	2301      	movs	r3, #1
    2104:	6014      	str	r4, [r2, #0]
    2106:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
    210a:	18dc      	adds	r4, r3, r3
    210c:	6010      	str	r0, [r2, #0]
    210e:	6015      	str	r5, [r2, #0]
    2110:	6013      	str	r3, [r2, #0]
    2112:	1c63      	adds	r3, r4, #1
    2114:	4543      	cmp	r3, r8
    2116:	6014      	str	r4, [r2, #0]
    2118:	d009      	beq.n	212e <main+0x1122>
    211a:	1c58      	adds	r0, r3, #1
    211c:	6013      	str	r3, [r2, #0]
    211e:	1cdc      	adds	r4, r3, #3
    2120:	3304      	adds	r3, #4
    2122:	1c45      	adds	r5, r0, #1
    2124:	4543      	cmp	r3, r8
    2126:	6010      	str	r0, [r2, #0]
    2128:	6015      	str	r5, [r2, #0]
    212a:	6014      	str	r4, [r2, #0]
    212c:	d1f5      	bne.n	211a <main+0x110e>
    212e:	9b03      	ldr	r3, [sp, #12]
    2130:	2420      	movs	r4, #32
    2132:	601c      	str	r4, [r3, #0]
    2134:	680d      	ldr	r5, [r1, #0]
    2136:	f240 0314 	movw	r3, #20
    213a:	f015 0f80 	tst.w	r5, #128	; 0x80
    213e:	f2c5 0300 	movt	r3, #20480	; 0x5000
    2142:	d0f7      	beq.n	2134 <main+0x1128>
    2144:	f10e 0e01 	add.w	lr, lr, #1
    2148:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    214c:	f8c3 a000 	str.w	sl, [r3]
    2150:	d1ca      	bne.n	20e8 <main+0x10dc>
    2152:	4667      	mov	r7, ip
    2154:	465c      	mov	r4, fp
    2156:	f7ff ba87 	b.w	1668 <main+0x65c>
    215a:	3aaa      	subs	r2, #170	; 0xaa
    215c:	bf18      	it	ne
    215e:	2201      	movne	r2, #1
    2160:	f7ff bb38 	b.w	17d4 <main+0x7c8>
    2164:	f240 0064 	movw	r0, #100	; 0x64
    2168:	f2c2 0000 	movt	r0, #8192	; 0x2000
    216c:	4631      	mov	r1, r6
    216e:	221b      	movs	r2, #27
    2170:	f000 f850 	bl	2214 <MSS_UART_polled_tx>
    2174:	f10b 0b01 	add.w	fp, fp, #1
    2178:	f7ff bb87 	b.w	188a <main+0x87e>
    217c:	38aa      	subs	r0, #170	; 0xaa
    217e:	bf18      	it	ne
    2180:	2001      	movne	r0, #1
    2182:	f7ff b983 	b.w	148c <main+0x480>
    2186:	f1b2 03aa 	subs.w	r3, r2, #170	; 0xaa
    218a:	bf18      	it	ne
    218c:	2301      	movne	r3, #1
    218e:	e5fb      	b.n	1d88 <main+0xd7c>
    2190:	f1b2 03aa 	subs.w	r3, r2, #170	; 0xaa
    2194:	bf18      	it	ne
    2196:	2301      	movne	r3, #1
    2198:	f7ff bbf6 	b.w	1988 <main+0x97c>
    219c:	f240 0064 	movw	r0, #100	; 0x64
    21a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    21a4:	4631      	mov	r1, r6
    21a6:	321a      	adds	r2, #26
    21a8:	f000 f834 	bl	2214 <MSS_UART_polled_tx>
    21ac:	f10b 0b01 	add.w	fp, fp, #1
    21b0:	e445      	b.n	1a3e <main+0xa32>
    21b2:	2d00      	cmp	r5, #0
    21b4:	f47f aa58 	bne.w	1668 <main+0x65c>
    21b8:	f240 0064 	movw	r0, #100	; 0x64
    21bc:	f642 41c4 	movw	r1, #11460	; 0x2cc4
    21c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    21c4:	f2c0 0100 	movt	r1, #0
    21c8:	f000 f87a 	bl	22c0 <MSS_UART_polled_tx_string>
    21cc:	f7ff ba4c 	b.w	1668 <main+0x65c>
    21d0:	4631      	mov	r1, r6
    21d2:	321a      	adds	r2, #26
    21d4:	f000 f81e 	bl	2214 <MSS_UART_polled_tx>
    21d8:	f108 0801 	add.w	r8, r8, #1
    21dc:	f7ff b9bb 	b.w	1556 <main+0x54a>
    21e0:	f240 0064 	movw	r0, #100	; 0x64
    21e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    21e8:	4631      	mov	r1, r6
    21ea:	321a      	adds	r2, #26
    21ec:	f000 f812 	bl	2214 <MSS_UART_polled_tx>
    21f0:	f10b 0b01 	add.w	fp, fp, #1
    21f4:	e623      	b.n	1e3e <main+0xe32>
    21f6:	4631      	mov	r1, r6
    21f8:	321a      	adds	r2, #26
    21fa:	f000 f80b 	bl	2214 <MSS_UART_polled_tx>
    21fe:	f7ff bb51 	b.w	18a4 <main+0x898>
    2202:	3baa      	subs	r3, #170	; 0xaa
    2204:	bf18      	it	ne
    2206:	2301      	movne	r3, #1
    2208:	e458      	b.n	1abc <main+0xab0>
    220a:	3baa      	subs	r3, #170	; 0xaa
    220c:	bf18      	it	ne
    220e:	2301      	movne	r3, #1
    2210:	e643      	b.n	1e9a <main+0xe8e>
    2212:	bf00      	nop

00002214 <MSS_UART_polled_tx>:

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ( (uint8_t *)0));
    ASSERT(tx_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    2214:	f240 0364 	movw	r3, #100	; 0x64
    2218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    221c:	4298      	cmp	r0, r3
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
    221e:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ( (uint8_t *)0));
    ASSERT(tx_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    2222:	d008      	beq.n	2236 <MSS_UART_polled_tx+0x22>
    2224:	f240 0c24 	movw	ip, #36	; 0x24
    2228:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    222c:	4560      	cmp	r0, ip
    222e:	d002      	beq.n	2236 <MSS_UART_polled_tx+0x22>
                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
            }
        } while(tx_size);
    }
}
    2230:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
    2234:	4770      	bx	lr

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ( (uint8_t *)0));
    ASSERT(tx_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    2236:	1e0b      	subs	r3, r1, #0
    2238:	bf18      	it	ne
    223a:	2301      	movne	r3, #1
    223c:	2a00      	cmp	r2, #0
    223e:	bf0c      	ite	eq
    2240:	2300      	moveq	r3, #0
    2242:	f003 0301 	andne.w	r3, r3, #1
    2246:	2b00      	cmp	r3, #0
    2248:	d0f2      	beq.n	2230 <MSS_UART_polled_tx+0x1c>
    224a:	f890 800d 	ldrb.w	r8, [r0, #13]
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
    224e:	f8d0 a000 	ldr.w	sl, [r0]
    2252:	2500      	movs	r5, #0
    2254:	f89a c014 	ldrb.w	ip, [sl, #20]
            this_uart->status |= status;
    2258:	ea48 080c 	orr.w	r8, r8, ip

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
    225c:	f01c 0f20 	tst.w	ip, #32
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
    2260:	f880 800d 	strb.w	r8, [r0, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
    2264:	d023      	beq.n	22ae <MSS_UART_polled_tx+0x9a>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
    2266:	2a0f      	cmp	r2, #15
    2268:	d924      	bls.n	22b4 <MSS_UART_polled_tx+0xa0>
    226a:	2710      	movs	r7, #16

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
    226c:	5d4e      	ldrb	r6, [r1, r5]
            if(status & MSS_UART_THRE)
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
    226e:	6804      	ldr	r4, [r0, #0]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    2270:	2301      	movs	r3, #1
    2272:	f107 3cff 	add.w	ip, r7, #4294967295
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
    2276:	7026      	strb	r6, [r4, #0]
    2278:	ea0c 0603 	and.w	r6, ip, r3
                    char_idx++;
    227c:	eb05 0c03 	add.w	ip, r5, r3
    2280:	194d      	adds	r5, r1, r5
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    2282:	42bb      	cmp	r3, r7
    2284:	d211      	bcs.n	22aa <MSS_UART_polled_tx+0x96>
    2286:	b136      	cbz	r6, 2296 <MSS_UART_polled_tx+0x82>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
    2288:	5cee      	ldrb	r6, [r5, r3]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    228a:	2302      	movs	r3, #2
    228c:	42bb      	cmp	r3, r7
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
    228e:	7026      	strb	r6, [r4, #0]
                    char_idx++;
    2290:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    2294:	d209      	bcs.n	22aa <MSS_UART_polled_tx+0x96>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
    2296:	5cee      	ldrb	r6, [r5, r3]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    2298:	3301      	adds	r3, #1
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
    229a:	7026      	strb	r6, [r4, #0]
    229c:	5cee      	ldrb	r6, [r5, r3]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    229e:	3301      	adds	r3, #1
    22a0:	42bb      	cmp	r3, r7
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
    22a2:	7026      	strb	r6, [r4, #0]
                    char_idx++;
    22a4:	f10c 0c02 	add.w	ip, ip, #2
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    22a8:	d3f5      	bcc.n	2296 <MSS_UART_polled_tx+0x82>
    22aa:	4665      	mov	r5, ip
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
    22ac:	1ad2      	subs	r2, r2, r3
            }
        } while(tx_size);
    22ae:	2a00      	cmp	r2, #0
    22b0:	d1d0      	bne.n	2254 <MSS_UART_polled_tx+0x40>
    22b2:	e7bd      	b.n	2230 <MSS_UART_polled_tx+0x1c>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
    22b4:	b10a      	cbz	r2, 22ba <MSS_UART_polled_tx+0xa6>
    22b6:	4617      	mov	r7, r2
    22b8:	e7d8      	b.n	226c <MSS_UART_polled_tx+0x58>
    22ba:	4613      	mov	r3, r2
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
    22bc:	1ad2      	subs	r2, r2, r3
    22be:	e7f6      	b.n	22ae <MSS_UART_polled_tx+0x9a>

000022c0 <MSS_UART_polled_tx_string>:
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(p_sz_string != ((uint8_t *)0));

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    22c0:	f240 0364 	movw	r3, #100	; 0x64
    22c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    22c8:	4298      	cmp	r0, r3
MSS_UART_polled_tx_string
(
    mss_uart_instance_t * this_uart,
    const uint8_t * p_sz_string
)
{
    22ca:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(p_sz_string != ((uint8_t *)0));

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    22ce:	d008      	beq.n	22e2 <MSS_UART_polled_tx_string+0x22>
    22d0:	f240 0224 	movw	r2, #36	; 0x24
    22d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    22d8:	4290      	cmp	r0, r2
    22da:	d002      	beq.n	22e2 <MSS_UART_polled_tx_string+0x22>
                /* Get the next data byte from the input buffer */
                data_byte = p_sz_string[char_idx];
            }
        }
    }
}
    22dc:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
    22e0:	4770      	bx	lr
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(p_sz_string != ((uint8_t *)0));

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    22e2:	2900      	cmp	r1, #0
    22e4:	d0fa      	beq.n	22dc <MSS_UART_polled_tx_string+0x1c>
       (p_sz_string != ((uint8_t *)0)))
    {
        /* Get the first data byte from the input buffer */
        data_byte = p_sz_string[char_idx];
    22e6:	780d      	ldrb	r5, [r1, #0]

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while(0u != data_byte)
    22e8:	2d00      	cmp	r5, #0
    22ea:	d0f7      	beq.n	22dc <MSS_UART_polled_tx_string+0x1c>
    22ec:	7b42      	ldrb	r2, [r0, #13]
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
    22ee:	6804      	ldr	r4, [r0, #0]
    22f0:	f04f 0c00 	mov.w	ip, #0
    22f4:	7d23      	ldrb	r3, [r4, #20]
                this_uart->status |= status;
    22f6:	431a      	orrs	r2, r3
            } while (0u == (status & MSS_UART_THRE));
    22f8:	f013 0f20 	tst.w	r3, #32
    22fc:	d0fa      	beq.n	22f4 <MSS_UART_polled_tx_string+0x34>
    22fe:	7342      	strb	r2, [r0, #13]

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
    2300:	b925      	cbnz	r5, 230c <MSS_UART_polled_tx_string+0x4c>
    2302:	4663      	mov	r3, ip

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while(0u != data_byte)
    2304:	2d00      	cmp	r5, #0
    2306:	d0e9      	beq.n	22dc <MSS_UART_polled_tx_string+0x1c>
    2308:	469c      	mov	ip, r3
    230a:	e7f3      	b.n	22f4 <MSS_UART_polled_tx_string+0x34>

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
    230c:	f8d0 a000 	ldr.w	sl, [r0]
    2310:	2600      	movs	r6, #0
    2312:	eb01 080c 	add.w	r8, r1, ip
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
    2316:	3601      	adds	r6, #1
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
    2318:	f88a 5000 	strb.w	r5, [sl]
                ++fill_size;
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = p_sz_string[char_idx];
    231c:	f818 5006 	ldrb.w	r5, [r8, r6]
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
    2320:	eb06 030c 	add.w	r3, r6, ip

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
    2324:	1e2f      	subs	r7, r5, #0
    2326:	bf18      	it	ne
    2328:	2701      	movne	r7, #1
    232a:	2e0f      	cmp	r6, #15
    232c:	bf8c      	ite	hi
    232e:	2700      	movhi	r7, #0
    2330:	f007 0701 	andls.w	r7, r7, #1
    2334:	2f00      	cmp	r7, #0
    2336:	d0e5      	beq.n	2304 <MSS_UART_polled_tx_string+0x44>
    2338:	e7ed      	b.n	2316 <MSS_UART_polled_tx_string+0x56>
    233a:	bf00      	nop

0000233c <MSS_UART_get_rx>:

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(rx_buff != ((uint8_t *)0));
    ASSERT(buff_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    233c:	f240 0364 	movw	r3, #100	; 0x64
    2340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2344:	4298      	cmp	r0, r3
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
    2346:	b470      	push	{r4, r5, r6}

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(rx_buff != ((uint8_t *)0));
    ASSERT(buff_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    2348:	d009      	beq.n	235e <MSS_UART_get_rx+0x22>
    234a:	f240 0c24 	movw	ip, #36	; 0x24
    234e:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    2352:	4560      	cmp	r0, ip
    2354:	d003      	beq.n	235e <MSS_UART_get_rx+0x22>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
    2356:	2300      	movs	r3, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
    2358:	4618      	mov	r0, r3
    235a:	bc70      	pop	{r4, r5, r6}
    235c:	4770      	bx	lr

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(rx_buff != ((uint8_t *)0));
    ASSERT(buff_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    235e:	1e0b      	subs	r3, r1, #0
    2360:	bf18      	it	ne
    2362:	2301      	movne	r3, #1
    2364:	2a00      	cmp	r2, #0
    2366:	bf0c      	ite	eq
    2368:	2300      	moveq	r3, #0
    236a:	f003 0301 	andne.w	r3, r3, #1
    236e:	2b00      	cmp	r3, #0
    2370:	d0f1      	beq.n	2356 <MSS_UART_get_rx+0x1a>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
    2372:	6804      	ldr	r4, [r0, #0]
        this_uart->status |= status;
    2374:	f890 c00d 	ldrb.w	ip, [r0, #13]
    ASSERT(buff_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
    2378:	7d23      	ldrb	r3, [r4, #20]
        this_uart->status |= status;
    237a:	ea43 0c0c 	orr.w	ip, r3, ip

        while(((status & MSS_UART_DATA_READY) != 0u) &&
    237e:	f013 0f01 	tst.w	r3, #1

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;
    2382:	f880 c00d 	strb.w	ip, [r0, #13]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
    2386:	d0e6      	beq.n	2356 <MSS_UART_get_rx+0x1a>
    2388:	2300      	movs	r3, #0
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
    238a:	7825      	ldrb	r5, [r4, #0]
    238c:	54cd      	strb	r5, [r1, r3]
            ++rx_size;
            status = this_uart->hw_reg->LSR;
    238e:	6804      	ldr	r4, [r0, #0]
            this_uart->status |= status;
    2390:	7b46      	ldrb	r6, [r0, #13]
        while(((status & MSS_UART_DATA_READY) != 0u) &&
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
            ++rx_size;
            status = this_uart->hw_reg->LSR;
    2392:	f894 c014 	ldrb.w	ip, [r4, #20]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
            ++rx_size;
    2396:	3301      	adds	r3, #1
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
    2398:	ea4c 0606 	orr.w	r6, ip, r6
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
    239c:	429a      	cmp	r2, r3
    239e:	bf94      	ite	ls
    23a0:	2500      	movls	r5, #0
    23a2:	f00c 0501 	andhi.w	r5, ip, #1
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
    23a6:	7346      	strb	r6, [r0, #13]
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
    23a8:	2d00      	cmp	r5, #0
    23aa:	d1ee      	bne.n	238a <MSS_UART_get_rx+0x4e>
    23ac:	e7d4      	b.n	2358 <MSS_UART_get_rx+0x1c>
    23ae:	bf00      	nop

000023b0 <MSS_UART_isr>:
{
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
    23b0:	f240 0364 	movw	r3, #100	; 0x64
    23b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    23b8:	4298      	cmp	r0, r3
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
    23ba:	b510      	push	{r4, lr}
    23bc:	4604      	mov	r4, r0
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
    23be:	d006      	beq.n	23ce <MSS_UART_isr+0x1e>
    23c0:	f240 0024 	movw	r0, #36	; 0x24
    23c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    23c8:	4284      	cmp	r4, r0
    23ca:	d000      	beq.n	23ce <MSS_UART_isr+0x1e>
    23cc:	bd10      	pop	{r4, pc}
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
    23ce:	6822      	ldr	r2, [r4, #0]
    23d0:	7a11      	ldrb	r1, [r2, #8]

        switch (iirf)
    23d2:	f001 0c0f 	and.w	ip, r1, #15
    23d6:	f1bc 0f0c 	cmp.w	ip, #12
    23da:	d8f7      	bhi.n	23cc <MSS_UART_isr+0x1c>
    23dc:	a101      	add	r1, pc, #4	; (adr r1, 23e4 <MSS_UART_isr+0x34>)
    23de:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
    23e2:	bf00      	nop
    23e4:	00002435 	.word	0x00002435
    23e8:	000023cd 	.word	0x000023cd
    23ec:	0000242d 	.word	0x0000242d
    23f0:	0000243d 	.word	0x0000243d
    23f4:	00002425 	.word	0x00002425
    23f8:	000023cd 	.word	0x000023cd
    23fc:	00002419 	.word	0x00002419
    2400:	000023cd 	.word	0x000023cd
    2404:	000023cd 	.word	0x000023cd
    2408:	000023cd 	.word	0x000023cd
    240c:	000023cd 	.word	0x000023cd
    2410:	000023cd 	.word	0x000023cd
    2414:	00002425 	.word	0x00002425
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
                if(NULL_HANDLER != this_uart->linests_handler)
    2418:	69e3      	ldr	r3, [r4, #28]
    241a:	2b00      	cmp	r3, #0
    241c:	d0d6      	beq.n	23cc <MSS_UART_isr+0x1c>
                {
                   (*(this_uart->linests_handler))(this_uart);
    241e:	4620      	mov	r0, r4
    2420:	4798      	blx	r3
    2422:	bd10      	pop	{r4, pc}

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
                if(NULL_HANDLER != this_uart->rx_handler)
    2424:	6a23      	ldr	r3, [r4, #32]
    2426:	2b00      	cmp	r3, #0
    2428:	d1f9      	bne.n	241e <MSS_UART_isr+0x6e>
    242a:	e7cf      	b.n	23cc <MSS_UART_isr+0x1c>
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
                if(NULL_HANDLER != this_uart->tx_handler)
    242c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    242e:	2b00      	cmp	r3, #0
    2430:	d1f5      	bne.n	241e <MSS_UART_isr+0x6e>
    2432:	e7cb      	b.n	23cc <MSS_UART_isr+0x1c>
        switch (iirf)
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
                if(NULL_HANDLER != this_uart->modemsts_handler)
    2434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2436:	2b00      	cmp	r3, #0
    2438:	d1f1      	bne.n	241e <MSS_UART_isr+0x6e>
    243a:	e7c7      	b.n	23cc <MSS_UART_isr+0x1c>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
    243c:	3228      	adds	r2, #40	; 0x28
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
    243e:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    2442:	f420 0370 	bic.w	r3, r0, #15728640	; 0xf00000
    2446:	f002 4170 	and.w	r1, r2, #4026531840	; 0xf0000000
    244a:	0158      	lsls	r0, r3, #5
    244c:	f101 7c00 	add.w	ip, r1, #33554432	; 0x2000000
    2450:	f85c 3000 	ldr.w	r3, [ip, r0]
    2454:	f013 0fff 	tst.w	r3, #255	; 0xff
    2458:	d005      	beq.n	2466 <MSS_UART_isr+0xb6>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
                    if(NULL_HANDLER != this_uart->rto_handler)
    245a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    245c:	b11b      	cbz	r3, 2466 <MSS_UART_isr+0xb6>
                    {
                        (*(this_uart->rto_handler))(this_uart);
    245e:	4620      	mov	r0, r4
    2460:	4798      	blx	r3
    2462:	6822      	ldr	r2, [r4, #0]
    2464:	3228      	adds	r2, #40	; 0x28
    2466:	f002 4070 	and.w	r0, r2, #4026531840	; 0xf0000000
    246a:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
    246e:	f100 7300 	add.w	r3, r0, #33554432	; 0x2000000
    2472:	f42c 0170 	bic.w	r1, ip, #15728640	; 0xf00000
    2476:	1d18      	adds	r0, r3, #4
    2478:	0149      	lsls	r1, r1, #5
    247a:	5843      	ldr	r3, [r0, r1]
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
    247c:	f013 0fff 	tst.w	r3, #255	; 0xff
    2480:	d005      	beq.n	248e <MSS_UART_isr+0xde>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
                    if(NULL_HANDLER != this_uart->nack_handler)
    2482:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2484:	b11b      	cbz	r3, 248e <MSS_UART_isr+0xde>
                    {
                        (*(this_uart->nack_handler))(this_uart);
    2486:	4620      	mov	r0, r4
    2488:	4798      	blx	r3
    248a:	6822      	ldr	r2, [r4, #0]
    248c:	3228      	adds	r2, #40	; 0x28
    248e:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    2492:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
    2496:	f103 7000 	add.w	r0, r3, #33554432	; 0x2000000
    249a:	f42c 0170 	bic.w	r1, ip, #15728640	; 0xf00000
    249e:	3008      	adds	r0, #8
    24a0:	0149      	lsls	r1, r1, #5
    24a2:	5843      	ldr	r3, [r0, r1]
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
    24a4:	f013 0fff 	tst.w	r3, #255	; 0xff
    24a8:	d005      	beq.n	24b6 <MSS_UART_isr+0x106>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
    24aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    24ac:	b11b      	cbz	r3, 24b6 <MSS_UART_isr+0x106>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
    24ae:	4620      	mov	r0, r4
    24b0:	4798      	blx	r3
    24b2:	6822      	ldr	r2, [r4, #0]
    24b4:	3228      	adds	r2, #40	; 0x28
    24b6:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    24ba:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
    24be:	f42c 0070 	bic.w	r0, ip, #15728640	; 0xf00000
    24c2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    24c6:	330c      	adds	r3, #12
    24c8:	0141      	lsls	r1, r0, #5
    24ca:	5858      	ldr	r0, [r3, r1]
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
    24cc:	f010 0fff 	tst.w	r0, #255	; 0xff
    24d0:	d005      	beq.n	24de <MSS_UART_isr+0x12e>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
                    if(NULL_HANDLER != this_uart->break_handler)
    24d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    24d4:	b11b      	cbz	r3, 24de <MSS_UART_isr+0x12e>
                    {
                        (*(this_uart->break_handler))(this_uart);
    24d6:	4620      	mov	r0, r4
    24d8:	4798      	blx	r3
    24da:	6822      	ldr	r2, [r4, #0]
    24dc:	3228      	adds	r2, #40	; 0x28
    24de:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
    24e2:	f002 4170 	and.w	r1, r2, #4026531840	; 0xf0000000
    24e6:	f101 7200 	add.w	r2, r1, #33554432	; 0x2000000
    24ea:	f42c 0370 	bic.w	r3, ip, #15728640	; 0xf00000
    24ee:	3210      	adds	r2, #16
    24f0:	0158      	lsls	r0, r3, #5
    24f2:	5811      	ldr	r1, [r2, r0]
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
    24f4:	f011 0fff 	tst.w	r1, #255	; 0xff
    24f8:	f43f af68 	beq.w	23cc <MSS_UART_isr+0x1c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
                    if(NULL_HANDLER != this_uart->sync_handler)
    24fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    24fe:	2b00      	cmp	r3, #0
    2500:	f43f af64 	beq.w	23cc <MSS_UART_isr+0x1c>
                    {
                        (*(this_uart->sync_handler))(this_uart);
    2504:	4620      	mov	r0, r4
    2506:	4798      	blx	r3
    2508:	e760      	b.n	23cc <MSS_UART_isr+0x1c>
    250a:	bf00      	nop

0000250c <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
    250c:	4668      	mov	r0, sp
    250e:	f020 0107 	bic.w	r1, r0, #7
    2512:	468d      	mov	sp, r1
    2514:	b501      	push	{r0, lr}
    MSS_UART_isr(&g_mss_uart1);
    2516:	f240 0024 	movw	r0, #36	; 0x24
    251a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    251e:	f7ff ff47 	bl	23b0 <MSS_UART_isr>
}
    2522:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2526:	4685      	mov	sp, r0
    2528:	4770      	bx	lr
    252a:	bf00      	nop

0000252c <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
    252c:	4668      	mov	r0, sp
    252e:	f020 0107 	bic.w	r1, r0, #7
    2532:	468d      	mov	sp, r1
    2534:	b501      	push	{r0, lr}
    MSS_UART_isr(&g_mss_uart0);
    2536:	f240 0064 	movw	r0, #100	; 0x64
    253a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    253e:	f7ff ff37 	bl	23b0 <MSS_UART_isr>
}
    2542:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2546:	4685      	mov	sp, r0
    2548:	4770      	bx	lr
    254a:	bf00      	nop

0000254c <default_tx_handler>:

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    254c:	f240 0364 	movw	r3, #100	; 0x64
    2550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2554:	4298      	cmp	r0, r3
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
    2556:	b470      	push	{r4, r5, r6}

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
    2558:	d007      	beq.n	256a <default_tx_handler+0x1e>
    255a:	f240 0124 	movw	r1, #36	; 0x24
    255e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2562:	4288      	cmp	r0, r1
    2564:	d001      	beq.n	256a <default_tx_handler+0x1e>
            this_uart->tx_buff_size = TX_COMPLETE;
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
        }
    }
}
    2566:	bc70      	pop	{r4, r5, r6}
    2568:	4770      	bx	lr
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
    256a:	6904      	ldr	r4, [r0, #16]
    256c:	2c00      	cmp	r4, #0
    256e:	d0fa      	beq.n	2566 <default_tx_handler+0x1a>
       (0u < this_uart->tx_buff_size))
    2570:	6943      	ldr	r3, [r0, #20]
    2572:	2b00      	cmp	r3, #0
    2574:	d0f7      	beq.n	2566 <default_tx_handler+0x1a>
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
    2576:	6801      	ldr	r1, [r0, #0]
        this_uart->status |= status;
    2578:	f890 c00d 	ldrb.w	ip, [r0, #13]
    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
    257c:	7d0a      	ldrb	r2, [r1, #20]
        this_uart->status |= status;
    257e:	ea42 0c0c 	orr.w	ip, r2, ip

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
    2582:	f012 0f20 	tst.w	r2, #32
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;
    2586:	f880 c00d 	strb.w	ip, [r0, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
    258a:	6982      	ldr	r2, [r0, #24]
    258c:	d029      	beq.n	25e2 <default_tx_handler+0x96>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
    258e:	1a9d      	subs	r5, r3, r2

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
    2590:	2d0f      	cmp	r5, #15
    2592:	d938      	bls.n	2606 <default_tx_handler+0xba>
    2594:	2510      	movs	r5, #16
    2596:	18a4      	adds	r4, r4, r2

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    2598:	7826      	ldrb	r6, [r4, #0]
    259a:	1e6b      	subs	r3, r5, #1
    259c:	700e      	strb	r6, [r1, #0]
    259e:	f003 0601 	and.w	r6, r3, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25a2:	2301      	movs	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    25a4:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25a6:	429d      	cmp	r5, r3
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    25a8:	6182      	str	r2, [r0, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25aa:	d919      	bls.n	25e0 <default_tx_handler+0x94>
    25ac:	b146      	cbz	r6, 25c0 <default_tx_handler+0x74>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    25ae:	f894 c001 	ldrb.w	ip, [r4, #1]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25b2:	2302      	movs	r3, #2
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    25b4:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25b6:	429d      	cmp	r5, r3
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    25b8:	f881 c000 	strb.w	ip, [r1]
                ++this_uart->tx_idx;
    25bc:	6182      	str	r2, [r0, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25be:	d90f      	bls.n	25e0 <default_tx_handler+0x94>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    25c0:	f814 c003 	ldrb.w	ip, [r4, r3]
                ++this_uart->tx_idx;
    25c4:	3201      	adds	r2, #1

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    25c6:	f881 c000 	strb.w	ip, [r1]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25ca:	3301      	adds	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    25cc:	6182      	str	r2, [r0, #24]

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    25ce:	f814 c003 	ldrb.w	ip, [r4, r3]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25d2:	3301      	adds	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    25d4:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25d6:	429d      	cmp	r5, r3
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    25d8:	f881 c000 	strb.w	ip, [r1]
                ++this_uart->tx_idx;
    25dc:	6182      	str	r2, [r0, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    25de:	d8ef      	bhi.n	25c0 <default_tx_handler+0x74>
    25e0:	6943      	ldr	r3, [r0, #20]
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
    25e2:	429a      	cmp	r2, r3
    25e4:	d1bf      	bne.n	2566 <default_tx_handler+0x1a>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
    25e6:	6802      	ldr	r2, [r0, #0]
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
        {
            this_uart->tx_buff_size = TX_COMPLETE;
    25e8:	2100      	movs	r1, #0
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
    25ea:	1d13      	adds	r3, r2, #4
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    25ec:	f023 4c7f 	bic.w	ip, r3, #4278190080	; 0xff000000
    25f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
    25f4:	f102 7300 	add.w	r3, r2, #33554432	; 0x2000000
    25f8:	f42c 0270 	bic.w	r2, ip, #15728640	; 0xf00000
    25fc:	3304      	adds	r3, #4
    25fe:	0152      	lsls	r2, r2, #5
    2600:	5099      	str	r1, [r3, r2]
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
        {
            this_uart->tx_buff_size = TX_COMPLETE;
    2602:	6141      	str	r1, [r0, #20]
    2604:	e7af      	b.n	2566 <default_tx_handler+0x1a>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
    2606:	2d00      	cmp	r5, #0
    2608:	d1c5      	bne.n	2596 <default_tx_handler+0x4a>
    260a:	e7ea      	b.n	25e2 <default_tx_handler+0x96>

0000260c <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
    260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    2610:	f240 0364 	movw	r3, #100	; 0x64
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
    2614:	b08f      	sub	sp, #60	; 0x3c
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    2616:	f2c2 0300 	movt	r3, #8192	; 0x2000
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
    261a:	920b      	str	r2, [sp, #44]	; 0x2c
    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
    261c:	f248 0200 	movw	r2, #32768	; 0x8000
{
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    2620:	4298      	cmp	r0, r3
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
    2622:	f2c4 0203 	movt	r2, #16387	; 0x4003
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
    2626:	4604      	mov	r4, r0
    2628:	910d      	str	r1, [sp, #52]	; 0x34
    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
    262a:	6c90      	ldr	r0, [r2, #72]	; 0x48

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    262c:	f24e 1100 	movw	r1, #57600	; 0xe100
{
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    2630:	f000 8129 	beq.w	2886 <global_init+0x27a>
    else
    {
        this_uart->hw_reg = UART1;
        this_uart->irqn = UART1_IRQn;
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
    2634:	f440 7780 	orr.w	r7, r0, #256	; 0x100
    2638:	f2ce 0100 	movt	r1, #57344	; 0xe000
    263c:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2640:	6497      	str	r7, [r2, #72]	; 0x48
    2642:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
    2646:	6c95      	ldr	r5, [r2, #72]	; 0x48
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
    2648:	f240 0100 	movw	r1, #0
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
    264c:	f425 7080 	bic.w	r0, r5, #256	; 0x100
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
    2650:	f2c4 0101 	movt	r1, #16385	; 0x4001
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
    2654:	6490      	str	r0, [r2, #72]	; 0x48
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
        this_uart->irqn = UART1_IRQn;
    2656:	220b      	movs	r2, #11
    2658:	7122      	strb	r2, [r4, #4]
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
    265a:	6021      	str	r1, [r4, #0]
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
    265c:	2200      	movs	r2, #0

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
    265e:	460d      	mov	r5, r1
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
    2660:	710a      	strb	r2, [r1, #4]
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
    2662:	f101 0610 	add.w	r6, r1, #16

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
    2666:	f805 2f08 	strb.w	r2, [r5, #8]!
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
    266a:	f101 0a38 	add.w	sl, r1, #56	; 0x38
    266e:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
    2672:	f101 0934 	add.w	r9, r1, #52	; 0x34
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2676:	f025 477f 	bic.w	r7, r5, #4278190080	; 0xff000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    267a:	f026 487f 	bic.w	r8, r6, #4278190080	; 0xff000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    267e:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2682:	f006 4670 	and.w	r6, r6, #4026531840	; 0xf0000000
    2686:	f00a 4a70 	and.w	sl, sl, #4026531840	; 0xf0000000
    268a:	f8cd a010 	str.w	sl, [sp, #16]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    268e:	9506      	str	r5, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2690:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2694:	f106 7500 	add.w	r5, r6, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2698:	9003      	str	r0, [sp, #12]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    269a:	9501      	str	r5, [sp, #4]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    269c:	f009 4970 	and.w	r9, r9, #4026531840	; 0xf0000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    26a0:	9d04      	ldr	r5, [sp, #16]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    26a2:	f8cd 901c 	str.w	r9, [sp, #28]
    26a6:	f8dd 900c 	ldr.w	r9, [sp, #12]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    26aa:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    26ae:	f429 0a70 	bic.w	sl, r9, #15728640	; 0xf00000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    26b2:	950a      	str	r5, [sp, #40]	; 0x28
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    26b4:	f42b 0970 	bic.w	r9, fp, #15728640	; 0xf00000
    26b8:	9d07      	ldr	r5, [sp, #28]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    26ba:	f8dd b018 	ldr.w	fp, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    26be:	f8cd 9014 	str.w	r9, [sp, #20]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    26c2:	f10b 7900 	add.w	r9, fp, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    26c6:	f105 7b00 	add.w	fp, r5, #33554432	; 0x2000000
    26ca:	9d04      	ldr	r5, [sp, #16]

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG); 
    26cc:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    26d0:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    26d4:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
    26d8:	f00c 4c70 	and.w	ip, ip, #4026531840	; 0xf0000000
    26dc:	f8cd a00c 	str.w	sl, [sp, #12]
    26e0:	9504      	str	r5, [sp, #16]
    26e2:	f10c 7500 	add.w	r5, ip, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    26e6:	f10c 7a00 	add.w	sl, ip, #33554432	; 0x2000000
    26ea:	46ac      	mov	ip, r5
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    26ec:	9d03      	ldr	r5, [sp, #12]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    26ee:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    26f2:	016d      	lsls	r5, r5, #5
    26f4:	9503      	str	r5, [sp, #12]
    26f6:	9d05      	ldr	r5, [sp, #20]
    26f8:	f428 0870 	bic.w	r8, r8, #15728640	; 0xf00000
    26fc:	016d      	lsls	r5, r5, #5
    26fe:	9505      	str	r5, [sp, #20]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2700:	9d06      	ldr	r5, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2702:	46ca      	mov	sl, r9
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2704:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
    2708:	9506      	str	r5, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    270a:	9d01      	ldr	r5, [sp, #4]
    270c:	ea4f 1848 	mov.w	r8, r8, lsl #5
    2710:	3514      	adds	r5, #20
    2712:	9501      	str	r5, [sp, #4]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2714:	9d07      	ldr	r5, [sp, #28]
    2716:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    271a:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
    271e:	9507      	str	r5, [sp, #28]
    2720:	9d04      	ldr	r5, [sp, #16]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2722:	017f      	lsls	r7, r7, #5
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2724:	3504      	adds	r5, #4
    2726:	9504      	str	r5, [sp, #16]
    2728:	4665      	mov	r5, ip
    272a:	3514      	adds	r5, #20
    272c:	9508      	str	r5, [sp, #32]
    272e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    2730:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    2734:	351c      	adds	r5, #28
    2736:	9509      	str	r5, [sp, #36]	; 0x24
    2738:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    273a:	f04f 0801 	mov.w	r8, #1
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    273e:	350c      	adds	r5, #12
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2740:	f10a 0a08 	add.w	sl, sl, #8
    2744:	f109 0904 	add.w	r9, r9, #4
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2748:	950a      	str	r5, [sp, #40]	; 0x28
    274a:	f106 7600 	add.w	r6, r6, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    274e:	f849 8007 	str.w	r8, [r9, r7]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2754:	f84a 8007 	str.w	r8, [sl, r7]
    2758:	f8dd a018 	ldr.w	sl, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    275c:	3610      	adds	r6, #16
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    275e:	f84a 8007 	str.w	r8, [sl, r7]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2762:	5172      	str	r2, [r6, r5]
    2764:	f8dd a00c 	ldr.w	sl, [sp, #12]
    2768:	9e01      	ldr	r6, [sp, #4]
    276a:	f10b 0b04 	add.w	fp, fp, #4
    276e:	5172      	str	r2, [r6, r5]
    2770:	f84b 200a 	str.w	r2, [fp, sl]
    2774:	f8dd b01c 	ldr.w	fp, [sp, #28]
    2778:	9d05      	ldr	r5, [sp, #20]
    277a:	f84b 200a 	str.w	r2, [fp, sl]
    277e:	9e04      	ldr	r6, [sp, #16]
    2780:	f8dd a020 	ldr.w	sl, [sp, #32]
    2784:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    2788:	0140      	lsls	r0, r0, #5
    278a:	f10c 0c18 	add.w	ip, ip, #24
    278e:	5172      	str	r2, [r6, r5]
    2790:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    2794:	f84a 2000 	str.w	r2, [sl, r0]
    2798:	f84c 2000 	str.w	r2, [ip, r0]
    279c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    uint32_t baudrate    
)
{
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    
    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
    27a0:	429c      	cmp	r4, r3
    27a2:	f84b 2000 	str.w	r2, [fp, r0]
    27a6:	f84c 2005 	str.w	r2, [ip, r5]

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
    27aa:	f881 2044 	strb.w	r2, [r1, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
    27ae:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
    27b2:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
    uint32_t baudrate    
)
{
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    
    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
    27b6:	d079      	beq.n	28ac <global_init+0x2a0>
    27b8:	f240 0324 	movw	r3, #36	; 0x24
    27bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c0:	429c      	cmp	r4, r3
    27c2:	d015      	beq.n	27f0 <global_init+0x1e4>
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
    27c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

    /* Instance setup */
    this_uart->baudrate = baud_rate;
    this_uart->lineconfig = line_config;
    this_uart->tx_buff_size = TX_COMPLETE;
    27c6:	2000      	movs	r0, #0
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
    27c8:	730d      	strb	r5, [r1, #12]
    this_uart->pid_pei_handler  = NULL_HANDLER;
    this_uart->break_handler    = NULL_HANDLER;    
    this_uart->sync_handler     = NULL_HANDLER;   

    /* Initialize the sticky status */
    this_uart->status = 0u;
    27ca:	7360      	strb	r0, [r4, #13]

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;

    /* Instance setup */
    this_uart->baudrate = baud_rate;
    27cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    this_uart->lineconfig = line_config;
    this_uart->tx_buff_size = TX_COMPLETE;
    27ce:	6160      	str	r0, [r4, #20]

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;

    /* Instance setup */
    this_uart->baudrate = baud_rate;
    27d0:	60a6      	str	r6, [r4, #8]
    this_uart->lineconfig = line_config;
    27d2:	7325      	strb	r5, [r4, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
    this_uart->tx_buffer = (const uint8_t *)0;
    27d4:	6120      	str	r0, [r4, #16]
    this_uart->tx_idx = 0u;
    27d6:	61a0      	str	r0, [r4, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
    27d8:	6220      	str	r0, [r4, #32]
    this_uart->tx_handler       = NULL_HANDLER;
    27da:	6260      	str	r0, [r4, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
    27dc:	61e0      	str	r0, [r4, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
    27de:	62a0      	str	r0, [r4, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;    
    27e0:	62e0      	str	r0, [r4, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;   
    27e2:	6320      	str	r0, [r4, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
    27e4:	6360      	str	r0, [r4, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;    
    27e6:	63a0      	str	r0, [r4, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;   
    27e8:	63e0      	str	r0, [r4, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
}
    27ea:	b00f      	add	sp, #60	; 0x3c
    27ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
    27f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    27f2:	60a7      	str	r7, [r4, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
    27f4:	f000 f90e 	bl	2a14 <SystemCoreClockUpdate>
        {
            pclk_freq = g_FrequencyPCLK0;
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
    27f8:	f240 0118 	movw	r1, #24
    27fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2800:	680a      	ldr	r2, [r1, #0]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
    2802:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2804:	00d7      	lsls	r7, r2, #3
    2806:	fbb7 f2f6 	udiv	r2, r7, r6
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
    280a:	09d3      	lsrs	r3, r2, #7
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
    280c:	0857      	lsrs	r7, r2, #1
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
        
        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
    
        if(baud_value <= (uint32_t)UINT16_MAX)
    280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2812:	bf28      	it	cs
    2814:	6821      	ldrcs	r1, [r4, #0]
    2816:	d2d5      	bcs.n	27c4 <global_init+0x1b8>
        {
            if(baud_value > 1u)
    2818:	2b01      	cmp	r3, #1
            {
                /* 
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
    281a:	6821      	ldr	r1, [r4, #0]
        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
    
        if(baud_value <= (uint32_t)UINT16_MAX)
        {
            if(baud_value > 1u)
    281c:	d950      	bls.n	28c0 <global_init+0x2b4>
            {
                /* 
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
    281e:	f101 000c 	add.w	r0, r1, #12
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    2822:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    2826:	f000 4670 	and.w	r6, r0, #4026531840	; 0xf0000000
    282a:	f106 7000 	add.w	r0, r6, #33554432	; 0x2000000
    282e:	f42c 0a70 	bic.w	sl, ip, #15728640	; 0xf00000
    2832:	ea4f 1e4a 	mov.w	lr, sl, lsl #5
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
    2836:	460d      	mov	r5, r1
    2838:	fa5f f883 	uxtb.w	r8, r3
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
    283c:	eba7 1783 	sub.w	r7, r7, r3, lsl #6
    2840:	301c      	adds	r0, #28
    2842:	2601      	movs	r6, #1
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
    2844:	f3c2 3ac7 	ubfx	sl, r2, #15, #8
    2848:	f840 600e 	str.w	r6, [r0, lr]
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
    284c:	eba7 13c3 	sub.w	r3, r7, r3, lsl #7
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
    2850:	f881 a004 	strb.w	sl, [r1, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
    2854:	f805 8b30 	strb.w	r8, [r5], #48
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
    2858:	189a      	adds	r2, r3, r2
    285a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    285e:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
    2862:	f423 0870 	bic.w	r8, r3, #15728640	; 0xf00000
                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
        
                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
    2866:	eba2 0747 	sub.w	r7, r2, r7, lsl #1
    286a:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
    286e:	351c      	adds	r5, #28
    2870:	ea4f 1848 	mov.w	r8, r8, lsl #5
    2874:	b2ff      	uxtb	r7, r7
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    2876:	2300      	movs	r3, #0
    2878:	f840 300e 	str.w	r3, [r0, lr]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
    287c:	f845 6008 	str.w	r6, [r5, r8]
    2880:	f881 703c 	strb.w	r7, [r1, #60]	; 0x3c
    2884:	e79e      	b.n	27c4 <global_init+0x1b8>
    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
    2886:	f040 0780 	orr.w	r7, r0, #128	; 0x80
    288a:	f2ce 0100 	movt	r1, #57344	; 0xe000
    288e:	f44f 6680 	mov.w	r6, #1024	; 0x400
    2892:	6497      	str	r7, [r2, #72]	; 0x48
    2894:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    2898:	6c95      	ldr	r5, [r2, #72]	; 0x48
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
    289a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    289e:	f025 0080 	bic.w	r0, r5, #128	; 0x80
    28a2:	6490      	str	r0, [r2, #72]	; 0x48
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
    28a4:	220a      	movs	r2, #10
    28a6:	7122      	strb	r2, [r4, #4]
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
    28a8:	6021      	str	r1, [r4, #0]
    28aa:	e6d7      	b.n	265c <global_init+0x50>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
    28ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    28ae:	60a2      	str	r2, [r4, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
    28b0:	f000 f8b0 	bl	2a14 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
        {
            pclk_freq = g_FrequencyPCLK0;
    28b4:	f240 0114 	movw	r1, #20
    28b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    28bc:	680a      	ldr	r2, [r1, #0]
    28be:	e7a0      	b.n	2802 <global_init+0x1f6>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
    28c0:	f101 0c0c 	add.w	ip, r1, #12
    28c4:	f02c 4e7f 	bic.w	lr, ip, #4278190080	; 0xff000000
    28c8:	f00c 4270 	and.w	r2, ip, #4026531840	; 0xf0000000
    28cc:	f42e 0570 	bic.w	r5, lr, #15728640	; 0xf00000
    28d0:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
    28d4:	ea4f 1e45 	mov.w	lr, r5, lsl #5
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
    28d8:	4608      	mov	r0, r1
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
    28da:	2500      	movs	r5, #0
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
    28dc:	b2db      	uxtb	r3, r3
    28de:	321c      	adds	r2, #28
    28e0:	2601      	movs	r6, #1
    28e2:	f842 600e 	str.w	r6, [r2, lr]
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
    28e6:	710d      	strb	r5, [r1, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
    28e8:	f800 3b30 	strb.w	r3, [r0], #48
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
    28ec:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    28f0:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
    28f4:	f100 7600 	add.w	r6, r0, #33554432	; 0x2000000
    28f8:	f42c 0370 	bic.w	r3, ip, #15728640	; 0xf00000
    28fc:	361c      	adds	r6, #28
    28fe:	015b      	lsls	r3, r3, #5
    2900:	f842 500e 	str.w	r5, [r2, lr]
    2904:	50f5      	str	r5, [r6, r3]
    2906:	e75d      	b.n	27c4 <global_init+0x1b8>

00002908 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart, 
    uint32_t baud_rate,
    uint8_t line_config
)
{
    2908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    290a:	4604      	mov	r4, r0
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
    290c:	f7ff fe7e 	bl	260c <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
    2910:	6822      	ldr	r2, [r4, #0]
    2912:	f64f 73ff 	movw	r3, #65535	; 0xffff

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
    2916:	f102 0034 	add.w	r0, r2, #52	; 0x34

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
    291a:	f102 0530 	add.w	r5, r2, #48	; 0x30
    291e:	f2c0 030f 	movt	r3, #15
    2922:	f005 4770 	and.w	r7, r5, #4026531840	; 0xf0000000

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
    2926:	3238      	adds	r2, #56	; 0x38
    2928:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
    292c:	ea02 0603 	and.w	r6, r2, r3
    2930:	f107 7c00 	add.w	ip, r7, #33554432	; 0x2000000
    2934:	401d      	ands	r5, r3
    2936:	ea00 0703 	and.w	r7, r0, r3
    293a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    293e:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
    2942:	f242 504d 	movw	r0, #9549	; 0x254d
    2946:	017b      	lsls	r3, r7, #5
    2948:	f10c 0c0c 	add.w	ip, ip, #12
    294c:	f102 7700 	add.w	r7, r2, #33554432	; 0x2000000
    2950:	016d      	lsls	r5, r5, #5
    2952:	2200      	movs	r2, #0
    2954:	3108      	adds	r1, #8
    2956:	0176      	lsls	r6, r6, #5
    2958:	f2c0 0000 	movt	r0, #0
    295c:	f84c 2005 	str.w	r2, [ip, r5]
    2960:	6260      	str	r0, [r4, #36]	; 0x24
    2962:	50ca      	str	r2, [r1, r3]
    2964:	51ba      	str	r2, [r7, r6]
}
    2966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002968 <MSS_GPIO_init>:
void MSS_GPIO_init( void )
{
    uint32_t inc;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    2968:	f248 0200 	movw	r2, #32768	; 0x8000
    296c:	f2c4 0203 	movt	r2, #16387	; 0x4003
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
    2970:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t inc;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    2974:	6c94      	ldr	r4, [r2, #72]	; 0x48
    2976:	f243 56a8 	movw	r6, #13736	; 0x35a8
    297a:	f444 1380 	orr.w	r3, r4, #1048576	; 0x100000
    297e:	6493      	str	r3, [r2, #72]	; 0x48
    SYSREG->SOFT_RST_CR |= (SYSREG_GPIO_7_0_SOFTRESET_MASK |
    2980:	6c90      	ldr	r0, [r2, #72]	; 0x48

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2982:	f24e 1300 	movw	r3, #57600	; 0xe100
    2986:	f040 71f0 	orr.w	r1, r0, #31457280	; 0x1e00000
    298a:	6491      	str	r1, [r2, #72]	; 0x48
    298c:	f2c0 0600 	movt	r6, #0
    2990:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2994:	2200      	movs	r2, #0
    2996:	2701      	movs	r7, #1
                            SYSREG_GPIO_15_8_SOFTRESET_MASK |
                            SYSREG_GPIO_23_16_SOFTRESET_MASK |
                            SYSREG_GPIO_31_24_SOFTRESET_MASK);
                            
    /* Clear any previously pended MSS GPIO interrupt */
    for(inc = 0U; inc < NB_OF_GPIO; ++inc)
    2998:	1c55      	adds	r5, r2, #1
    {
        NVIC_DisableIRQ(g_gpio_irqn_lut[inc]);
    299a:	5cb4      	ldrb	r4, [r6, r2]
    299c:	f816 a005 	ldrb.w	sl, [r6, r5]
    29a0:	f004 001f 	and.w	r0, r4, #31
    29a4:	f00a 011f 	and.w	r1, sl, #31
    29a8:	fa17 f000 	lsls.w	r0, r7, r0
    29ac:	fa17 f101 	lsls.w	r1, r7, r1
    29b0:	fa4f f88a 	sxtb.w	r8, sl
    29b4:	b262      	sxtb	r2, r4
    29b6:	0954      	lsrs	r4, r2, #5
    29b8:	ea4f 1c58 	mov.w	ip, r8, lsr #5
                            SYSREG_GPIO_15_8_SOFTRESET_MASK |
                            SYSREG_GPIO_23_16_SOFTRESET_MASK |
                            SYSREG_GPIO_31_24_SOFTRESET_MASK);
                            
    /* Clear any previously pended MSS GPIO interrupt */
    for(inc = 0U; inc < NB_OF_GPIO; ++inc)
    29bc:	1c6a      	adds	r2, r5, #1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    29be:	f104 0a60 	add.w	sl, r4, #96	; 0x60
    29c2:	f10c 0860 	add.w	r8, ip, #96	; 0x60

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    29c6:	3420      	adds	r4, #32
    29c8:	f10c 0c20 	add.w	ip, ip, #32
    29cc:	2a20      	cmp	r2, #32
    29ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    29d2:	f843 002a 	str.w	r0, [r3, sl, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    29d6:	f843 102c 	str.w	r1, [r3, ip, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    29da:	f843 1028 	str.w	r1, [r3, r8, lsl #2]
    29de:	d1db      	bne.n	2998 <MSS_GPIO_init+0x30>
    {
        NVIC_DisableIRQ(g_gpio_irqn_lut[inc]);
        NVIC_ClearPendingIRQ(g_gpio_irqn_lut[inc]);
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~(SYSREG_GPIO_7_0_SOFTRESET_MASK |
    29e0:	f248 0300 	movw	r3, #32768	; 0x8000
    29e4:	f2c4 0303 	movt	r3, #16387	; 0x4003
    29e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    29ea:	f022 70f0 	bic.w	r0, r2, #31457280	; 0x1e00000
    29ee:	6498      	str	r0, [r3, #72]	; 0x48
                             SYSREG_GPIO_15_8_SOFTRESET_MASK |
                             SYSREG_GPIO_23_16_SOFTRESET_MASK |
                             SYSREG_GPIO_31_24_SOFTRESET_MASK);
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
    29f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    29f2:	f421 1280 	bic.w	r2, r1, #1048576	; 0x100000
    29f6:	649a      	str	r2, [r3, #72]	; 0x48
}
    29f8:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
    29fc:	4770      	bx	lr
    29fe:	bf00      	nop

00002a00 <MSS_GPIO_config>:
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT(gpio_idx < NB_OF_GPIO);

    if(gpio_idx < NB_OF_GPIO)
    2a00:	281f      	cmp	r0, #31
    {
        *(g_config_reg_lut[gpio_idx]) = config;
    2a02:	bf9f      	itttt	ls
    2a04:	f243 53c8 	movwls	r3, #13768	; 0x35c8
    2a08:	f2c0 0300 	movtls	r3, #0
    2a0c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
    2a10:	6019      	strls	r1, [r3, #0]
    2a12:	4770      	bx	lr

00002a14 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
    2a14:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
    2a18:	f248 0300 	movw	r3, #32768	; 0x8000
    2a1c:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2a20:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
    2a24:	b083      	sub	sp, #12
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;

    if(0u == controller_pll_init)
    2a26:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
    2a2a:	d119      	bne.n	2a60 <SystemCoreClockUpdate+0x4c>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
    2a2c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
        if(0u == global_mux_sel)
    2a30:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    2a34:	d04e      	beq.n	2ad4 <SystemCoreClockUpdate+0xc0>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
    2a36:	f243 6c48 	movw	ip, #13896	; 0x3648
    2a3a:	f2c0 0c00 	movt	ip, #0
    2a3e:	466a      	mov	r2, sp
    2a40:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2a44:	e882 0003 	stmia.w	r2, {r0, r1}

            uint32_t standby_sel;
            uint8_t clock_source;

            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
    2a48:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
            clock_source = standby_clock_lut[standby_sel];
            switch(clock_source)
    2a4c:	af02      	add	r7, sp, #8
    2a4e:	f3c1 1682 	ubfx	r6, r1, #6, #3
    2a52:	19bd      	adds	r5, r7, r6
    2a54:	f815 4c08 	ldrb.w	r4, [r5, #-8]
    2a58:	2c01      	cmp	r4, #1
    2a5a:	f000 8081 	beq.w	2b60 <SystemCoreClockUpdate+0x14c>
    2a5e:	d26a      	bcs.n	2b36 <SystemCoreClockUpdate+0x122>
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;

    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
    2a60:	f8d3 0150 	ldr.w	r0, [r3, #336]	; 0x150
    if(0u == rcosc_div2)
    2a64:	f647 0840 	movw	r8, #30784	; 0x7840
    2a68:	f24f 0380 	movw	r3, #61568	; 0xf080
    2a6c:	f010 0f04 	tst.w	r0, #4
    2a70:	f2c0 187d 	movt	r8, #381	; 0x17d
    2a74:	f2c0 23fa 	movt	r3, #762	; 0x2fa
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    2a78:	f240 051c 	movw	r5, #28
    g_FrequencyPCLK0 = standby_clk;
    2a7c:	f240 0414 	movw	r4, #20
    g_FrequencyPCLK1 = standby_clk;
    2a80:	f240 0018 	movw	r0, #24
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2a84:	f240 0708 	movw	r7, #8
    2a88:	f64a 7ce0 	movw	ip, #45024	; 0xafe0
    g_FrequencyFIC0 = standby_clk;
    2a8c:	f240 010c 	movw	r1, #12
    g_FrequencyFIC1 = standby_clk;
    2a90:	f240 0210 	movw	r2, #16
    g_FrequencyFIC64 = standby_clk;
    2a94:	f240 0604 	movw	r6, #4
{
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;

    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
    if(0u == rcosc_div2)
    2a98:	bf08      	it	eq
    2a9a:	4643      	moveq	r3, r8
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    2a9c:	f2c2 0500 	movt	r5, #8192	; 0x2000
    g_FrequencyPCLK0 = standby_clk;
    2aa0:	f2c2 0400 	movt	r4, #8192	; 0x2000
    g_FrequencyPCLK1 = standby_clk;
    2aa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2aa8:	f2c2 0700 	movt	r7, #8192	; 0x2000
    2aac:	f2c0 2c1d 	movt	ip, #541	; 0x21d
    g_FrequencyFIC0 = standby_clk;
    2ab0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    g_FrequencyFIC1 = standby_clk;
    2ab4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    g_FrequencyFIC64 = standby_clk;
    2ab8:	f2c2 0600 	movt	r6, #8192	; 0x2000
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    g_FrequencyPCLK0 = standby_clk;
    g_FrequencyPCLK1 = standby_clk;
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2abc:	f8c7 c000 	str.w	ip, [r7]
    g_FrequencyFIC0 = standby_clk;
    g_FrequencyFIC1 = standby_clk;
    g_FrequencyFIC64 = standby_clk;
    2ac0:	6033      	str	r3, [r6, #0]
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    2ac2:	602b      	str	r3, [r5, #0]
    g_FrequencyPCLK0 = standby_clk;
    2ac4:	6023      	str	r3, [r4, #0]
    g_FrequencyPCLK1 = standby_clk;
    2ac6:	6003      	str	r3, [r0, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = standby_clk;
    2ac8:	600b      	str	r3, [r1, #0]
    g_FrequencyFIC1 = standby_clk;
    2aca:	6013      	str	r3, [r2, #0]
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
        set_clock_frequency_globals(clk_src);
    }
}
    2acc:	b003      	add	sp, #12
    2ace:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    2ad2:	4770      	bx	lr

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    2ad4:	f240 051c 	movw	r5, #28
    2ad8:	f64b 7380 	movw	r3, #49024	; 0xbf80
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    2adc:	f240 0414 	movw	r4, #20
    2ae0:	f645 72c0 	movw	r2, #24512	; 0x5fc0
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
    2ae4:	f240 0018 	movw	r0, #24
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2ae8:	f240 0c08 	movw	ip, #8
    2aec:	f64a 78e0 	movw	r8, #45024	; 0xafe0
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    2af0:	f240 070c 	movw	r7, #12
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    2af4:	f240 0110 	movw	r1, #16
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
    2af8:	f240 0604 	movw	r6, #4

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    2afc:	f6c0 0376 	movt	r3, #2166	; 0x876
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    2b00:	f2c0 423b 	movt	r2, #1083	; 0x43b

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    2b04:	f2c2 0500 	movt	r5, #8192	; 0x2000
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    2b08:	f2c2 0400 	movt	r4, #8192	; 0x2000
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
    2b0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2b10:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    2b14:	f2c0 281d 	movt	r8, #541	; 0x21d
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    2b18:	f2c2 0700 	movt	r7, #8192	; 0x2000
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    2b1c:	f2c2 0100 	movt	r1, #8192	; 0x2000
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
    2b20:	f2c2 0600 	movt	r6, #8192	; 0x2000
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2b24:	f8cc 8000 	str.w	r8, [ip]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    2b28:	603a      	str	r2, [r7, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
    2b2a:	6033      	str	r3, [r6, #0]

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    2b2c:	602b      	str	r3, [r5, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    2b2e:	6022      	str	r2, [r4, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
    2b30:	6002      	str	r2, [r0, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    2b32:	600b      	str	r3, [r1, #0]
    2b34:	e7ca      	b.n	2acc <SystemCoreClockUpdate+0xb8>
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    2b36:	f244 2340 	movw	r3, #16960	; 0x4240
    2b3a:	f240 051c 	movw	r5, #28
    g_FrequencyPCLK0 = standby_clk;
    2b3e:	f240 0414 	movw	r4, #20
    g_FrequencyPCLK1 = standby_clk;
    2b42:	f240 0018 	movw	r0, #24
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2b46:	f240 0708 	movw	r7, #8
    2b4a:	f64a 7ce0 	movw	ip, #45024	; 0xafe0
    g_FrequencyFIC0 = standby_clk;
    2b4e:	f240 010c 	movw	r1, #12
    g_FrequencyFIC1 = standby_clk;
    2b52:	f240 0210 	movw	r2, #16
    g_FrequencyFIC64 = standby_clk;
    2b56:	f240 0604 	movw	r6, #4
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    2b5a:	f2c0 030f 	movt	r3, #15
    2b5e:	e79d      	b.n	2a9c <SystemCoreClockUpdate+0x88>
    g_FrequencyPCLK0 = standby_clk;
    2b60:	f240 051c 	movw	r5, #28
    2b64:	f240 0414 	movw	r4, #20
    g_FrequencyPCLK1 = standby_clk;
    2b68:	f240 0018 	movw	r0, #24
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2b6c:	f240 0708 	movw	r7, #8
    2b70:	f64a 7ce0 	movw	ip, #45024	; 0xafe0
    g_FrequencyFIC0 = standby_clk;
    2b74:	f240 010c 	movw	r1, #12
    g_FrequencyFIC1 = standby_clk;
    2b78:	f240 0210 	movw	r2, #16
    g_FrequencyFIC64 = standby_clk;
    2b7c:	f240 0604 	movw	r6, #4
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    2b80:	f2c2 0500 	movt	r5, #8192	; 0x2000
    g_FrequencyPCLK0 = standby_clk;
    2b84:	f2c2 0400 	movt	r4, #8192	; 0x2000
    g_FrequencyPCLK1 = standby_clk;
    2b88:	f2c2 0000 	movt	r0, #8192	; 0x2000
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    2b8c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    2b90:	f2c0 2c1d 	movt	ip, #541	; 0x21d
    g_FrequencyFIC0 = standby_clk;
    2b94:	f2c2 0100 	movt	r1, #8192	; 0x2000
    g_FrequencyFIC1 = standby_clk;
    2b98:	f2c2 0200 	movt	r2, #8192	; 0x2000
    g_FrequencyFIC64 = standby_clk;
    2b9c:	f2c2 0600 	movt	r6, #8192	; 0x2000
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    2ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2ba4:	e78a      	b.n	2abc <SystemCoreClockUpdate+0xa8>
    2ba6:	bf00      	nop

00002ba8 <SystemInit>:
static uint32_t get_silicon_revision(void)
{
    uint32_t silicon_revision;
    uint32_t device_version;

    device_version = SYSREG->DEVICE_VERSION;
    2ba8:	f248 0300 	movw	r3, #32768	; 0x8000
    2bac:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2bb0:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    switch(device_version)
    2bb4:	f64f 0202 	movw	r2, #63490	; 0xf802
    2bb8:	4291      	cmp	r1, r2
    2bba:	d10b      	bne.n	2bd4 <SystemInit+0x2c>
{
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
    2bbc:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    2bc0:	f440 7280 	orr.w	r2, r0, #256	; 0x100
    2bc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
    2bc8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2bcc:	f021 6080 	bic.w	r0, r1, #67108864	; 0x4000000
    2bd0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    2bd4:	f64e 5300 	movw	r3, #60672	; 0xed00
    2bd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2bdc:	695a      	ldr	r2, [r3, #20]
    2bde:	f442 7100 	orr.w	r1, r2, #512	; 0x200
    2be2:	6159      	str	r1, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
    2be4:	f7fd bc26 	b.w	434 <mscc_post_hw_cfg_init>

00002be8 <__libc_init_array>:
    2be8:	b570      	push	{r4, r5, r6, lr}
    2bea:	f243 6668 	movw	r6, #13928	; 0x3668
    2bee:	f243 6568 	movw	r5, #13928	; 0x3668
    2bf2:	f2c0 0600 	movt	r6, #0
    2bf6:	f2c0 0500 	movt	r5, #0
    2bfa:	1b76      	subs	r6, r6, r5
    2bfc:	10b6      	asrs	r6, r6, #2
    2bfe:	d006      	beq.n	2c0e <__libc_init_array+0x26>
    2c00:	2400      	movs	r4, #0
    2c02:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    2c06:	3401      	adds	r4, #1
    2c08:	4798      	blx	r3
    2c0a:	42a6      	cmp	r6, r4
    2c0c:	d8f9      	bhi.n	2c02 <__libc_init_array+0x1a>
    2c0e:	f243 6568 	movw	r5, #13928	; 0x3668
    2c12:	f243 666c 	movw	r6, #13932	; 0x366c
    2c16:	f2c0 0500 	movt	r5, #0
    2c1a:	f2c0 0600 	movt	r6, #0
    2c1e:	1b76      	subs	r6, r6, r5
    2c20:	f000 fd16 	bl	3650 <_init>
    2c24:	10b6      	asrs	r6, r6, #2
    2c26:	d006      	beq.n	2c36 <__libc_init_array+0x4e>
    2c28:	2400      	movs	r4, #0
    2c2a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    2c2e:	3401      	adds	r4, #1
    2c30:	4798      	blx	r3
    2c32:	42a6      	cmp	r6, r4
    2c34:	d8f9      	bhi.n	2c2a <__libc_init_array+0x42>
    2c36:	bd70      	pop	{r4, r5, r6, pc}
    2c38:	20200d0a 	.word	0x20200d0a
    2c3c:	46205854 	.word	0x46205854
    2c40:	204f4649 	.word	0x204f4649
    2c44:	45444e55 	.word	0x45444e55
    2c48:	4e555252 	.word	0x4e555252
    2c4c:	544e4920 	.word	0x544e4920
    2c50:	55525245 	.word	0x55525245
    2c54:	00005450 	.word	0x00005450
    2c58:	20200d0a 	.word	0x20200d0a
    2c5c:	46205854 	.word	0x46205854
    2c60:	204f4649 	.word	0x204f4649
    2c64:	5245564f 	.word	0x5245564f
    2c68:	574f4c46 	.word	0x574f4c46
    2c6c:	544e4920 	.word	0x544e4920
    2c70:	55525245 	.word	0x55525245
    2c74:	00005450 	.word	0x00005450
    2c78:	20200d0a 	.word	0x20200d0a
    2c7c:	43205854 	.word	0x43205854
    2c80:	494c4c4f 	.word	0x494c4c4f
    2c84:	4e4f4953 	.word	0x4e4f4953
    2c88:	544e4920 	.word	0x544e4920
    2c8c:	55525245 	.word	0x55525245
    2c90:	00005450 	.word	0x00005450
    2c94:	21200d0a 	.word	0x21200d0a
    2c98:	21212121 	.word	0x21212121
    2c9c:	41462021 	.word	0x41462021
    2ca0:	44454c49 	.word	0x44454c49
    2ca4:	20585220 	.word	0x20585220
    2ca8:	4b434150 	.word	0x4b434150
    2cac:	00005445 	.word	0x00005445
    2cb0:	50200d0a 	.word	0x50200d0a
    2cb4:	20535341 	.word	0x20535341
    2cb8:	50205852 	.word	0x50205852
    2cbc:	454b4341 	.word	0x454b4341
    2cc0:	00000054 	.word	0x00000054
    2cc4:	41200d0a 	.word	0x41200d0a
    2cc8:	50204c4c 	.word	0x50204c4c
    2ccc:	454b4341 	.word	0x454b4341
    2cd0:	50205354 	.word	0x50205354
    2cd4:	45535341 	.word	0x45535341
    2cd8:	2e2e2e44 	.word	0x2e2e2e44
    2cdc:	000d0a20 	.word	0x000d0a20
    2ce0:	0d0a0d0a 	.word	0x0d0a0d0a
    2ce4:	50462020 	.word	0x50462020
    2ce8:	52204147 	.word	0x52204147
    2cec:	73697665 	.word	0x73697665
    2cf0:	206e6f69 	.word	0x206e6f69
    2cf4:	69676552 	.word	0x69676552
    2cf8:	72657473 	.word	0x72657473
    2cfc:	2020203a 	.word	0x2020203a
    2d00:	20202020 	.word	0x20202020
    2d04:	00007830 	.word	0x00007830
    2d08:	20200d0a 	.word	0x20200d0a
    2d0c:	41475046 	.word	0x41475046
    2d10:	72635320 	.word	0x72635320
    2d14:	68637461 	.word	0x68637461
    2d18:	64615020 	.word	0x64615020
    2d1c:	67655220 	.word	0x67655220
    2d20:	65747369 	.word	0x65747369
    2d24:	20203a72 	.word	0x20203a72
    2d28:	78302020 	.word	0x78302020
    2d2c:	00000000 	.word	0x00000000
    2d30:	20200d0a 	.word	0x20200d0a
    2d34:	41475046 	.word	0x41475046
    2d38:	6e6f4320 	.word	0x6e6f4320
    2d3c:	6c6f7274 	.word	0x6c6f7274
    2d40:	67655220 	.word	0x67655220
    2d44:	65747369 	.word	0x65747369
    2d48:	20203a72 	.word	0x20203a72
    2d4c:	20202020 	.word	0x20202020
    2d50:	78302020 	.word	0x78302020
    2d54:	00000000 	.word	0x00000000
    2d58:	20200d0a 	.word	0x20200d0a
    2d5c:	41475046 	.word	0x41475046
    2d60:	746e4920 	.word	0x746e4920
    2d64:	75727265 	.word	0x75727265
    2d68:	52207470 	.word	0x52207470
    2d6c:	73696765 	.word	0x73696765
    2d70:	3a726574 	.word	0x3a726574
    2d74:	20202020 	.word	0x20202020
    2d78:	78302020 	.word	0x78302020
    2d7c:	00000000 	.word	0x00000000
    2d80:	20200d0a 	.word	0x20200d0a
    2d84:	41475046 	.word	0x41475046
    2d88:	746e4920 	.word	0x746e4920
    2d8c:	75727265 	.word	0x75727265
    2d90:	4d207470 	.word	0x4d207470
    2d94:	206b7361 	.word	0x206b7361
    2d98:	69676552 	.word	0x69676552
    2d9c:	72657473 	.word	0x72657473
    2da0:	7830203a 	.word	0x7830203a
    2da4:	00000000 	.word	0x00000000
    2da8:	20200d0a 	.word	0x20200d0a
    2dac:	41475046 	.word	0x41475046
    2db0:	61745320 	.word	0x61745320
    2db4:	20737574 	.word	0x20737574
    2db8:	69676552 	.word	0x69676552
    2dbc:	72657473 	.word	0x72657473
    2dc0:	2020203a 	.word	0x2020203a
    2dc4:	20202020 	.word	0x20202020
    2dc8:	78302020 	.word	0x78302020
    2dcc:	00000000 	.word	0x00000000
    2dd0:	20200d0a 	.word	0x20200d0a
    2dd4:	41475046 	.word	0x41475046
    2dd8:	67694820 	.word	0x67694820
    2ddc:	64412068 	.word	0x64412068
    2de0:	73657264 	.word	0x73657264
    2de4:	65522073 	.word	0x65522073
    2de8:	74736967 	.word	0x74736967
    2dec:	203a7265 	.word	0x203a7265
    2df0:	78302020 	.word	0x78302020
    2df4:	00000000 	.word	0x00000000
    2df8:	20200d0a 	.word	0x20200d0a
    2dfc:	41475046 	.word	0x41475046
    2e00:	776f4c20 	.word	0x776f4c20
    2e04:	64644120 	.word	0x64644120
    2e08:	73736572 	.word	0x73736572
    2e0c:	67655220 	.word	0x67655220
    2e10:	65747369 	.word	0x65747369
    2e14:	20203a72 	.word	0x20203a72
    2e18:	78302020 	.word	0x78302020
    2e1c:	00000000 	.word	0x00000000
    2e20:	48200d0a 	.word	0x48200d0a
    2e24:	20686769 	.word	0x20686769
    2e28:	72646441 	.word	0x72646441
    2e2c:	20737365 	.word	0x20737365
    2e30:	6c696146 	.word	0x6c696146
    2e34:	00002020 	.word	0x00002020
    2e38:	50462020 	.word	0x50462020
    2e3c:	49204147 	.word	0x49204147
    2e40:	7265746e 	.word	0x7265746e
    2e44:	74707572 	.word	0x74707572
    2e48:	67655220 	.word	0x67655220
    2e4c:	65747369 	.word	0x65747369
    2e50:	20203a72 	.word	0x20203a72
    2e54:	00783020 	.word	0x00783020
    2e58:	20202020 	.word	0x20202020
    2e5c:	65707845 	.word	0x65707845
    2e60:	64657463 	.word	0x64657463
    2e64:	2020203a 	.word	0x2020203a
    2e68:	00007830 	.word	0x00007830
    2e6c:	20202020 	.word	0x20202020
    2e70:	75746341 	.word	0x75746341
    2e74:	203a6c61 	.word	0x203a6c61
    2e78:	78302020 	.word	0x78302020
    2e7c:	00000000 	.word	0x00000000
    2e80:	4c200d0a 	.word	0x4c200d0a
    2e84:	4120776f 	.word	0x4120776f
    2e88:	65726464 	.word	0x65726464
    2e8c:	46207373 	.word	0x46207373
    2e90:	206c6961 	.word	0x206c6961
    2e94:	00002020 	.word	0x00002020
    2e98:	48200d0a 	.word	0x48200d0a
    2e9c:	20686769 	.word	0x20686769
    2ea0:	676e654c 	.word	0x676e654c
    2ea4:	46206874 	.word	0x46206874
    2ea8:	206c6961 	.word	0x206c6961
    2eac:	00002020 	.word	0x00002020
    2eb0:	4c200d0a 	.word	0x4c200d0a
    2eb4:	4c20776f 	.word	0x4c20776f
    2eb8:	74676e65 	.word	0x74676e65
    2ebc:	61462068 	.word	0x61462068
    2ec0:	20206c69 	.word	0x20206c69
    2ec4:	00002020 	.word	0x00002020
    2ec8:	44200d0a 	.word	0x44200d0a
    2ecc:	20617461 	.word	0x20617461
    2ed0:	6c696146 	.word	0x6c696146
    2ed4:	20202020 	.word	0x20202020
    2ed8:	20202020 	.word	0x20202020
    2edc:	00002020 	.word	0x00002020
    2ee0:	0d0a0d0a 	.word	0x0d0a0d0a
    2ee4:	65725020 	.word	0x65725020
    2ee8:	6e207373 	.word	0x6e207373
    2eec:	65626d75 	.word	0x65626d75
    2ef0:	6f662072 	.word	0x6f662072
    2ef4:	63412072 	.word	0x63412072
    2ef8:	6e6f6974 	.word	0x6e6f6974
    2efc:	0a0d0a20 	.word	0x0a0d0a20
    2f00:	2031200d 	.word	0x2031200d
    2f04:	61655220 	.word	0x61655220
    2f08:	50462064 	.word	0x50462064
    2f0c:	52204147 	.word	0x52204147
    2f10:	73696765 	.word	0x73696765
    2f14:	73726574 	.word	0x73726574
    2f18:	200d0a20 	.word	0x200d0a20
    2f1c:	52202032 	.word	0x52202032
    2f20:	74657365 	.word	0x74657365
    2f24:	63655220 	.word	0x63655220
    2f28:	65766965 	.word	0x65766965
    2f2c:	46494620 	.word	0x46494620
    2f30:	0d0a204f 	.word	0x0d0a204f
    2f34:	20203320 	.word	0x20203320
    2f38:	65736552 	.word	0x65736552
    2f3c:	72542074 	.word	0x72542074
    2f40:	6d736e61 	.word	0x6d736e61
    2f44:	46207469 	.word	0x46207469
    2f48:	204f4649 	.word	0x204f4649
    2f4c:	34200d0a 	.word	0x34200d0a
    2f50:	72542020 	.word	0x72542020
    2f54:	6d736e61 	.word	0x6d736e61
    2f58:	53207469 	.word	0x53207469
    2f5c:	6c676e69 	.word	0x6c676e69
    2f60:	61502065 	.word	0x61502065
    2f64:	74656b63 	.word	0x74656b63
    2f68:	49202d20 	.word	0x49202d20
    2f6c:	5245544e 	.word	0x5245544e
    2f70:	204c414e 	.word	0x204c414e
    2f74:	706f6f4c 	.word	0x706f6f4c
    2f78:	6b636162 	.word	0x6b636162
    2f7c:	200d0a20 	.word	0x200d0a20
    2f80:	52202035 	.word	0x52202035
    2f84:	69656365 	.word	0x69656365
    2f88:	53206576 	.word	0x53206576
    2f8c:	6c676e69 	.word	0x6c676e69
    2f90:	61502065 	.word	0x61502065
    2f94:	74656b63 	.word	0x74656b63
    2f98:	646e6120 	.word	0x646e6120
    2f9c:	65684320 	.word	0x65684320
    2fa0:	2d206b63 	.word	0x2d206b63
    2fa4:	544e4920 	.word	0x544e4920
    2fa8:	414e5245 	.word	0x414e5245
    2fac:	6f4c204c 	.word	0x6f4c204c
    2fb0:	6162706f 	.word	0x6162706f
    2fb4:	0a206b63 	.word	0x0a206b63
    2fb8:	2036200d 	.word	0x2036200d
    2fbc:	6f6f4c20 	.word	0x6f6f4c20
    2fc0:	63616270 	.word	0x63616270
    2fc4:	6150206b 	.word	0x6150206b
    2fc8:	74656b63 	.word	0x74656b63
    2fcc:	72662073 	.word	0x72662073
    2fd0:	38206d6f 	.word	0x38206d6f
    2fd4:	206f7420 	.word	0x206f7420
    2fd8:	33323031 	.word	0x33323031
    2fdc:	74794220 	.word	0x74794220
    2fe0:	26207365 	.word	0x26207365
    2fe4:	65684320 	.word	0x65684320
    2fe8:	2d206b63 	.word	0x2d206b63
    2fec:	544e4920 	.word	0x544e4920
    2ff0:	414e5245 	.word	0x414e5245
    2ff4:	6f4c204c 	.word	0x6f4c204c
    2ff8:	6162706f 	.word	0x6162706f
    2ffc:	0a206b63 	.word	0x0a206b63
    3000:	2037200d 	.word	0x2037200d
    3004:	61725420 	.word	0x61725420
    3008:	696d736e 	.word	0x696d736e
    300c:	69532074 	.word	0x69532074
    3010:	656c676e 	.word	0x656c676e
    3014:	63615020 	.word	0x63615020
    3018:	2074656b 	.word	0x2074656b
    301c:	5845202d 	.word	0x5845202d
    3020:	4e524554 	.word	0x4e524554
    3024:	4c204c41 	.word	0x4c204c41
    3028:	62706f6f 	.word	0x62706f6f
    302c:	206b6361 	.word	0x206b6361
    3030:	38200d0a 	.word	0x38200d0a
    3034:	65522020 	.word	0x65522020
    3038:	76696563 	.word	0x76696563
    303c:	69532065 	.word	0x69532065
    3040:	656c676e 	.word	0x656c676e
    3044:	63615020 	.word	0x63615020
    3048:	2074656b 	.word	0x2074656b
    304c:	20646e61 	.word	0x20646e61
    3050:	63656843 	.word	0x63656843
    3054:	202d206b 	.word	0x202d206b
    3058:	45545845 	.word	0x45545845
    305c:	4c414e52 	.word	0x4c414e52
    3060:	6f6f4c20 	.word	0x6f6f4c20
    3064:	63616270 	.word	0x63616270
    3068:	0d0a206b 	.word	0x0d0a206b
    306c:	20203920 	.word	0x20203920
    3070:	6e617254 	.word	0x6e617254
    3074:	74696d73 	.word	0x74696d73
    3078:	63615020 	.word	0x63615020
    307c:	7374656b 	.word	0x7374656b
    3080:	6f726620 	.word	0x6f726620
    3084:	2038206d 	.word	0x2038206d
    3088:	31206f74 	.word	0x31206f74
    308c:	20333230 	.word	0x20333230
    3090:	65747942 	.word	0x65747942
    3094:	20262073 	.word	0x20262073
    3098:	63656843 	.word	0x63656843
    309c:	202d206b 	.word	0x202d206b
    30a0:	45545845 	.word	0x45545845
    30a4:	4c414e52 	.word	0x4c414e52
    30a8:	6f6f4c20 	.word	0x6f6f4c20
    30ac:	63616270 	.word	0x63616270
    30b0:	0d0a206b 	.word	0x0d0a206b
    30b4:	20206120 	.word	0x20206120
    30b8:	6e617254 	.word	0x6e617254
    30bc:	74696d73 	.word	0x74696d73
    30c0:	616f4220 	.word	0x616f4220
    30c4:	32206472 	.word	0x32206472
    30c8:	616f4220 	.word	0x616f4220
    30cc:	53206472 	.word	0x53206472
    30d0:	6c676e69 	.word	0x6c676e69
    30d4:	61502065 	.word	0x61502065
    30d8:	74656b63 	.word	0x74656b63
    30dc:	200d0a20 	.word	0x200d0a20
    30e0:	52202062 	.word	0x52202062
    30e4:	69656365 	.word	0x69656365
    30e8:	42206576 	.word	0x42206576
    30ec:	6472616f 	.word	0x6472616f
    30f0:	42203220 	.word	0x42203220
    30f4:	6472616f 	.word	0x6472616f
    30f8:	6e695320 	.word	0x6e695320
    30fc:	20656c67 	.word	0x20656c67
    3100:	6b636150 	.word	0x6b636150
    3104:	61207465 	.word	0x61207465
    3108:	4320646e 	.word	0x4320646e
    310c:	6b636568 	.word	0x6b636568
    3110:	200d0a20 	.word	0x200d0a20
    3114:	54202063 	.word	0x54202063
    3118:	736e6172 	.word	0x736e6172
    311c:	2074696d 	.word	0x2074696d
    3120:	72616f42 	.word	0x72616f42
    3124:	20322064 	.word	0x20322064
    3128:	72616f42 	.word	0x72616f42
    312c:	754d2064 	.word	0x754d2064
    3130:	7069746c 	.word	0x7069746c
    3134:	5020656c 	.word	0x5020656c
    3138:	656b6361 	.word	0x656b6361
    313c:	0a207374 	.word	0x0a207374
    3140:	2064200d 	.word	0x2064200d
    3144:	63655220 	.word	0x63655220
    3148:	65766965 	.word	0x65766965
    314c:	616f4220 	.word	0x616f4220
    3150:	32206472 	.word	0x32206472
    3154:	616f4220 	.word	0x616f4220
    3158:	4d206472 	.word	0x4d206472
    315c:	69746c75 	.word	0x69746c75
    3160:	20656c70 	.word	0x20656c70
    3164:	6b636150 	.word	0x6b636150
    3168:	20737465 	.word	0x20737465
    316c:	65200d0a 	.word	0x65200d0a
    3170:	72542020 	.word	0x72542020
    3174:	6d736e61 	.word	0x6d736e61
    3178:	50207469 	.word	0x50207469
    317c:	656b6361 	.word	0x656b6361
    3180:	6c422074 	.word	0x6c422074
    3184:	65747361 	.word	0x65747361
    3188:	0a202e72 	.word	0x0a202e72
    318c:	2066200d 	.word	0x2066200d
    3190:	73655220 	.word	0x73655220
    3194:	46207465 	.word	0x46207465
    3198:	20414750 	.word	0x20414750
    319c:	69676f4c 	.word	0x69676f4c
    31a0:	0a202e63 	.word	0x0a202e63
    31a4:	2067200d 	.word	0x2067200d
    31a8:	616c4220 	.word	0x616c4220
    31ac:	72657473 	.word	0x72657473
    31b0:	63615020 	.word	0x63615020
    31b4:	2074656b 	.word	0x2074656b
    31b8:	706f6f4c 	.word	0x706f6f4c
    31bc:	6b636162 	.word	0x6b636162
    31c0:	200d0a20 	.word	0x200d0a20
    31c4:	54202069 	.word	0x54202069
    31c8:	736e6172 	.word	0x736e6172
    31cc:	2074696d 	.word	0x2074696d
    31d0:	20423242 	.word	0x20423242
    31d4:	73616c42 	.word	0x73616c42
    31d8:	20726574 	.word	0x20726574
    31dc:	6b636150 	.word	0x6b636150
    31e0:	0a207465 	.word	0x0a207465
    31e4:	206a200d 	.word	0x206a200d
    31e8:	63655220 	.word	0x63655220
    31ec:	65766965 	.word	0x65766965
    31f0:	42324220 	.word	0x42324220
    31f4:	616c4220 	.word	0x616c4220
    31f8:	72657473 	.word	0x72657473
    31fc:	63615020 	.word	0x63615020
    3200:	2074656b 	.word	0x2074656b
    3204:	00000d0a 	.word	0x00000d0a
    3208:	0d0a0d0a 	.word	0x0d0a0d0a
    320c:	00000000 	.word	0x00000000
    3210:	0d0a0d0a 	.word	0x0d0a0d0a
    3214:	73655220 	.word	0x73655220
    3218:	52207465 	.word	0x52207465
    321c:	69656365 	.word	0x69656365
    3220:	46206576 	.word	0x46206576
    3224:	2e4f4649 	.word	0x2e4f4649
    3228:	0a202e2e 	.word	0x0a202e2e
    322c:	0000000d 	.word	0x0000000d
    3230:	0d0a0d0a 	.word	0x0d0a0d0a
    3234:	73655220 	.word	0x73655220
    3238:	54207465 	.word	0x54207465
    323c:	736e6172 	.word	0x736e6172
    3240:	2074696d 	.word	0x2074696d
    3244:	4f464946 	.word	0x4f464946
    3248:	202e2e2e 	.word	0x202e2e2e
    324c:	00000d0a 	.word	0x00000d0a
    3250:	0d0a0d0a 	.word	0x0d0a0d0a
    3254:	61725420 	.word	0x61725420
    3258:	696d736e 	.word	0x696d736e
    325c:	6e697474 	.word	0x6e697474
    3260:	69532067 	.word	0x69532067
    3264:	656c676e 	.word	0x656c676e
    3268:	63615020 	.word	0x63615020
    326c:	2074656b 	.word	0x2074656b
    3270:	6e49202d 	.word	0x6e49202d
    3274:	6e726574 	.word	0x6e726574
    3278:	4c206c61 	.word	0x4c206c61
    327c:	62706f6f 	.word	0x62706f6f
    3280:	2e6b6361 	.word	0x2e6b6361
    3284:	0a202e2e 	.word	0x0a202e2e
    3288:	0000000d 	.word	0x0000000d
    328c:	0d0a0d0a 	.word	0x0d0a0d0a
    3290:	63655220 	.word	0x63655220
    3294:	65766965 	.word	0x65766965
    3298:	67695320 	.word	0x67695320
    329c:	20656c6e 	.word	0x20656c6e
    32a0:	6b636150 	.word	0x6b636150
    32a4:	61207465 	.word	0x61207465
    32a8:	4320646e 	.word	0x4320646e
    32ac:	6b636568 	.word	0x6b636568
    32b0:	49202d20 	.word	0x49202d20
    32b4:	7265746e 	.word	0x7265746e
    32b8:	206c616e 	.word	0x206c616e
    32bc:	706f6f4c 	.word	0x706f6f4c
    32c0:	6b636162 	.word	0x6b636162
    32c4:	202e2e2e 	.word	0x202e2e2e
    32c8:	00000d0a 	.word	0x00000d0a
    32cc:	0d0a0d0a 	.word	0x0d0a0d0a
    32d0:	6f6f4c20 	.word	0x6f6f4c20
    32d4:	676e6970 	.word	0x676e6970
    32d8:	63614220 	.word	0x63614220
    32dc:	6150206b 	.word	0x6150206b
    32e0:	74656b63 	.word	0x74656b63
    32e4:	61522073 	.word	0x61522073
    32e8:	6e69676e 	.word	0x6e69676e
    32ec:	6e692067 	.word	0x6e692067
    32f0:	7a695320 	.word	0x7a695320
    32f4:	72662065 	.word	0x72662065
    32f8:	38206d6f 	.word	0x38206d6f
    32fc:	74794220 	.word	0x74794220
    3300:	74207365 	.word	0x74207365
    3304:	3032206f 	.word	0x3032206f
    3308:	42203830 	.word	0x42203830
    330c:	73657479 	.word	0x73657479
    3310:	49202d20 	.word	0x49202d20
    3314:	7265746e 	.word	0x7265746e
    3318:	206c616e 	.word	0x206c616e
    331c:	706f6f4c 	.word	0x706f6f4c
    3320:	6b636162 	.word	0x6b636162
    3324:	202e2e2e 	.word	0x202e2e2e
    3328:	000d0a20 	.word	0x000d0a20
    332c:	0d0a0d0a 	.word	0x0d0a0d0a
    3330:	61725420 	.word	0x61725420
    3334:	696d736e 	.word	0x696d736e
    3338:	6e697474 	.word	0x6e697474
    333c:	69532067 	.word	0x69532067
    3340:	656c676e 	.word	0x656c676e
    3344:	63615020 	.word	0x63615020
    3348:	2074656b 	.word	0x2074656b
    334c:	5845202d 	.word	0x5845202d
    3350:	4e524554 	.word	0x4e524554
    3354:	4c204c41 	.word	0x4c204c41
    3358:	62706f6f 	.word	0x62706f6f
    335c:	2e6b6361 	.word	0x2e6b6361
    3360:	0a202e2e 	.word	0x0a202e2e
    3364:	0000000d 	.word	0x0000000d
    3368:	0d0a0d0a 	.word	0x0d0a0d0a
    336c:	63655220 	.word	0x63655220
    3370:	65766965 	.word	0x65766965
    3374:	6e695320 	.word	0x6e695320
    3378:	20656c67 	.word	0x20656c67
    337c:	6b636150 	.word	0x6b636150
    3380:	61207465 	.word	0x61207465
    3384:	4320646e 	.word	0x4320646e
    3388:	6b636568 	.word	0x6b636568
    338c:	45202d20 	.word	0x45202d20
    3390:	52455458 	.word	0x52455458
    3394:	204c414e 	.word	0x204c414e
    3398:	706f6f4c 	.word	0x706f6f4c
    339c:	6b636162 	.word	0x6b636162
    33a0:	202e2e2e 	.word	0x202e2e2e
    33a4:	00000d0a 	.word	0x00000d0a
    33a8:	0d0a0d0a 	.word	0x0d0a0d0a
    33ac:	6f6f4c20 	.word	0x6f6f4c20
    33b0:	676e6970 	.word	0x676e6970
    33b4:	63614220 	.word	0x63614220
    33b8:	6150206b 	.word	0x6150206b
    33bc:	74656b63 	.word	0x74656b63
    33c0:	61522073 	.word	0x61522073
    33c4:	2065676e 	.word	0x2065676e
    33c8:	6f742038 	.word	0x6f742038
    33cc:	30303220 	.word	0x30303220
    33d0:	79422038 	.word	0x79422038
    33d4:	20736574 	.word	0x20736574
    33d8:	5845202d 	.word	0x5845202d
    33dc:	4e524554 	.word	0x4e524554
    33e0:	4c204c41 	.word	0x4c204c41
    33e4:	62706f6f 	.word	0x62706f6f
    33e8:	2e6b6361 	.word	0x2e6b6361
    33ec:	20202e2e 	.word	0x20202e2e
    33f0:	00000d0a 	.word	0x00000d0a
    33f4:	0d0a0d0a 	.word	0x0d0a0d0a
    33f8:	61725420 	.word	0x61725420
    33fc:	696d736e 	.word	0x696d736e
    3400:	676e6974 	.word	0x676e6974
    3404:	616f4220 	.word	0x616f4220
    3408:	74206472 	.word	0x74206472
    340c:	6f42206f 	.word	0x6f42206f
    3410:	20647261 	.word	0x20647261
    3414:	676e6953 	.word	0x676e6953
    3418:	5020656c 	.word	0x5020656c
    341c:	656b6361 	.word	0x656b6361
    3420:	2e2e2e74 	.word	0x2e2e2e74
    3424:	000d0a20 	.word	0x000d0a20
    3428:	0d0a0d0a 	.word	0x0d0a0d0a
    342c:	63655220 	.word	0x63655220
    3430:	69766965 	.word	0x69766965
    3434:	4220676e 	.word	0x4220676e
    3438:	6472616f 	.word	0x6472616f
    343c:	206f7420 	.word	0x206f7420
    3440:	72616f42 	.word	0x72616f42
    3444:	69532064 	.word	0x69532064
    3448:	656c676e 	.word	0x656c676e
    344c:	63615020 	.word	0x63615020
    3450:	2074656b 	.word	0x2074656b
    3454:	20646e61 	.word	0x20646e61
    3458:	63656843 	.word	0x63656843
    345c:	2e2e2e6b 	.word	0x2e2e2e6b
    3460:	000d0a20 	.word	0x000d0a20
    3464:	0d0a0d0a 	.word	0x0d0a0d0a
    3468:	61725420 	.word	0x61725420
    346c:	696d736e 	.word	0x696d736e
    3470:	6e697474 	.word	0x6e697474
    3474:	6f422067 	.word	0x6f422067
    3478:	20647261 	.word	0x20647261
    347c:	42206f74 	.word	0x42206f74
    3480:	6472616f 	.word	0x6472616f
    3484:	6c754d20 	.word	0x6c754d20
    3488:	6c706974 	.word	0x6c706974
    348c:	61502065 	.word	0x61502065
    3490:	74656b63 	.word	0x74656b63
    3494:	2e2e2e73 	.word	0x2e2e2e73
    3498:	000d0a20 	.word	0x000d0a20
    349c:	0d0a0d0a 	.word	0x0d0a0d0a
    34a0:	63655220 	.word	0x63655220
    34a4:	69766965 	.word	0x69766965
    34a8:	4220676e 	.word	0x4220676e
    34ac:	6472616f 	.word	0x6472616f
    34b0:	206f7420 	.word	0x206f7420
    34b4:	72616f42 	.word	0x72616f42
    34b8:	754d2064 	.word	0x754d2064
    34bc:	7069746c 	.word	0x7069746c
    34c0:	5020656c 	.word	0x5020656c
    34c4:	656b6361 	.word	0x656b6361
    34c8:	2e2e7374 	.word	0x2e2e7374
    34cc:	0d0a202e 	.word	0x0d0a202e
    34d0:	00000000 	.word	0x00000000
    34d4:	0d0a0d0a 	.word	0x0d0a0d0a
    34d8:	61725420 	.word	0x61725420
    34dc:	696d736e 	.word	0x696d736e
    34e0:	61502074 	.word	0x61502074
    34e4:	74656b63 	.word	0x74656b63
    34e8:	616c4220 	.word	0x616c4220
    34ec:	72657473 	.word	0x72657473
    34f0:	0d0a202e 	.word	0x0d0a202e
    34f4:	00000000 	.word	0x00000000
    34f8:	0d0a0d0a 	.word	0x0d0a0d0a
    34fc:	73655220 	.word	0x73655220
    3500:	46207465 	.word	0x46207465
    3504:	20414750 	.word	0x20414750
    3508:	69676f4c 	.word	0x69676f4c
    350c:	0a202e63 	.word	0x0a202e63
    3510:	0000000d 	.word	0x0000000d
    3514:	0d0a0d0a 	.word	0x0d0a0d0a
    3518:	616c4220 	.word	0x616c4220
    351c:	72657473 	.word	0x72657473
    3520:	63615020 	.word	0x63615020
    3524:	2074656b 	.word	0x2074656b
    3528:	706f6f4c 	.word	0x706f6f4c
    352c:	6b636162 	.word	0x6b636162
    3530:	000d0a20 	.word	0x000d0a20
    3534:	0d0a0d0a 	.word	0x0d0a0d0a
    3538:	61725420 	.word	0x61725420
    353c:	696d736e 	.word	0x696d736e
    3540:	32422074 	.word	0x32422074
    3544:	6c422042 	.word	0x6c422042
    3548:	65747361 	.word	0x65747361
    354c:	61502072 	.word	0x61502072
    3550:	74656b63 	.word	0x74656b63
    3554:	000d0a20 	.word	0x000d0a20
    3558:	0d0a0d0a 	.word	0x0d0a0d0a
    355c:	63655220 	.word	0x63655220
    3560:	65766965 	.word	0x65766965
    3564:	42324220 	.word	0x42324220
    3568:	616c4220 	.word	0x616c4220
    356c:	72657473 	.word	0x72657473
    3570:	63615020 	.word	0x63615020
    3574:	2074656b 	.word	0x2074656b
    3578:	00000d0a 	.word	0x00000d0a
    357c:	0d0a0d0a 	.word	0x0d0a0d0a
    3580:	65725020 	.word	0x65725020
    3584:	61207373 	.word	0x61207373
    3588:	6e20796e 	.word	0x6e20796e
    358c:	65626d75 	.word	0x65626d75
    3590:	2e2e2e72 	.word	0x2e2e2e72
    3594:	0a0d0a20 	.word	0x0a0d0a20
    3598:	0000000d 	.word	0x0000000d
    359c:	45200d0a 	.word	0x45200d0a
    35a0:	7265746e 	.word	0x7265746e
    35a4:	0020203a 	.word	0x0020203a

000035a8 <g_gpio_irqn_lut>:
    35a8:	35343332 39383736 3d3c3b3a 41403f3e     23456789:;<=>?@A
    35b8:	45444342 49484746 4d4c4b4a 51504f4e     BCDEFGHIJKLMNOPQ

000035c8 <g_config_reg_lut>:
    35c8:	40013000 40013004 40013008 4001300c     .0.@.0.@.0.@.0.@
    35d8:	40013010 40013014 40013018 4001301c     .0.@.0.@.0.@.0.@
    35e8:	40013020 40013024 40013028 4001302c      0.@$0.@(0.@,0.@
    35f8:	40013030 40013034 40013038 4001303c     00.@40.@80.@<0.@
    3608:	40013040 40013044 40013048 4001304c     @0.@D0.@H0.@L0.@
    3618:	40013050 40013054 40013058 4001305c     P0.@T0.@X0.@\0.@
    3628:	40013060 40013064 40013068 4001306c     `0.@d0.@h0.@l0.@
    3638:	40013070 40013074 40013078 4001307c     p0.@t0.@x0.@|0.@

00003648 <C.16.3514>:
    3648:	01000100 03030202                       ........

00003650 <_init>:
    3650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3652:	bf00      	nop
    3654:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3656:	bc08      	pop	{r3}
    3658:	469e      	mov	lr, r3
    365a:	4770      	bx	lr

0000365c <_fini>:
    365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    365e:	bf00      	nop
    3660:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3662:	bc08      	pop	{r3}
    3664:	469e      	mov	lr, r3
    3666:	4770      	bx	lr

00003668 <__frame_dummy_init_array_entry>:
    3668:	04d5 0000                                   ....

0000366c <__do_global_dtors_aux_fini_array_entry>:
    366c:	04c1 0000                                   ....
